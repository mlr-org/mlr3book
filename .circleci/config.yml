version: 2.1
jobs:
  r-release:
    docker:
      - image: rocker/verse
    steps:
      - checkout

      # create a unique env var for the cache. Unfortunately normal env vars
      # are not picked up by the cache, therefore this workaround is needed.
      # See https://discuss.circleci.com/t/cannot-use-circle-yml-environment-variables-in-cache-keys/10994/7
      - run: echo "$(date '+%d-%m')-r-release" > /tmp/_tmp_file
      - restore_cache:
          key: R-package-library-{{ checksum "/tmp/_tmp_file" }}

      # install deps and check pkg ---------------------------------------------
      - run:
          name: "[r-release] Install dependencies"
          command: |
            sudo apt update && sudo apt install -y pandoc
            R -q -e "install.packages('pak', repos = 'https://r-lib.github.io/p/pak/devel')"
            R -q -e "if (grepl('Ubuntu', Sys.info()[['version']])) {options(repos = c(CRAN = sprintf('https://packagemanager.rstudio.com/all/__linux__/%s/latest', system('lsb_release -cs', intern = TRUE))))}; pak::local_install_dev_deps()"
            # R -q -e "pak::pkg_install(c('alan-turing-institute/distr6', 'xoopR/param6', 'mlr-org/mlr3proba'))"
            R -q -e "pak::local_install()"

      - run:
          name: "Render book"
          no_output_timeout: 60m
          command: |
            sudo apt update && sudo apt install -y gdebi-core curl
            curl -sL -O https://github.com/quarto-dev/quarto-cli/releases/download/v1.1.149/quarto-1.1.149-linux-amd64.deb
            sudo gdebi -n -qq quarto-1.1.149-linux-amd64.deb
            quarto render book/

      - run:
          name: "Add .lycheeignore"
          command: cp .lycheeignore book/_book/.lycheeignore

      # save R pkg cache -------------------------------------------------------
      - save_cache:
          key: R-package-library-{{ checksum "/tmp/_tmp_file" }}
          paths:
            - /usr/local/lib/R/site-library
  # deploy:
  #   environment:
  #     # if you use bookdown or blogdown, replace "PKGDOWN" by the respective
  #     # capitalized term. This also might need to be done in tic.R
  #     BUILD_PKGDOWN: true

  #   docker:
  #     - image: rocker/verse
  #   steps:
  #     - checkout

  #     - run: echo "$(date '+%d-%m')-r-release" > /tmp/_tmp_file
  #     - restore_cache:
  #         key: R-package-library-{{ checksum "/tmp/_tmp_file" }}

  #     - run:
  #         name: Deploy
  #         command: |
  #           sudo apt update && sudo apt install -y pandoc
  #           R -q -e "install.packages('pak', repos = 'https://r-lib.github.io/p/pak/devel')"
  #           R -q -e "if (grepl('Ubuntu', Sys.info()[['version']])) {options(repos = c(CRAN = sprintf('https://packagemanager.rstudio.com/all/__linux__/%s/latest', system('lsb_release -cs', intern = TRUE))))}; pak::pkg_install('ropensci/tic')" -e "print(tic::dsl_load())" -e "tic::prepare_all_stages()"
  #           R -q -e 'tic::before_deploy()'
  #           R -q -e 'tic::deploy()'
  #           R -q -e 'tic::after_deploy()'

workflows:
  build-and-deploy:
    jobs:
      - r-release
      # - deploy:
      #     requires:
      #       - r-release

  # CRON job daily at 4 am in the morning
  # - runs the "build" job on the master branch and builds package cache
  nightly:
    triggers:
      - schedule:
          cron: "0 4 * * *"
          filters:
            branches:
              only:
                - master
                - main
                - cran-*
                - pak
    jobs:
      - r-release
# Custom user code -------------------------------------------------------------
