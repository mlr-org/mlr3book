# Quick R6 Intro for Beginners {#r6}

```{r 02-basics-R6-001, include = F}
library(mlr3)
library(mlr3book)
```

`r mlr3book::cran_pkg("R6")` is one of R's more recent dialects for object-oriented programming (OO).
It addresses shortcomings of earlier OO implementations in R, such as S3, which we used in `r mlr3book::mlr_pkg("mlr")`.
If you have done any object-oriented programming before, R6 should feel familiar.
We focus on the parts of R6 that you need to know to use `r mlr3book::mlr_pkg("mlr3")` here.

Objects are created by calling the constructor of an `"R6::R6Class()"` object, specifically the initialization method `$new()`.
  For example, `foo = Foo$new(bar = 1)` creates a new object of class `Foo`, setting the `bar` argument of the constructor to the value `1`.
  Most objects in `r mlr3book::mlr_pkg("mlr3")` are created through special functions (e.g. `lrn("regr.rpart")`) that encapsulate this and are also referred to as *sugar functions*.

Objects have mutable state that is encapsulated in their fields, which can be accessed through the dollar operator.
  We can access the `bar` value in the `foo` variable from above through `foo$bar` and set its value by assigning the field, e.g. `foo$bar = 2`.

In addition to fields, objects expose methods that allow to inspect the object's state, retrieve information, or perform an action that changes the internal state of the object.
  For example, the `$train` method of a learner changes the internal state of the learner by building and storing a trained model, which can then be used to make predictions, given data.

Objects can have public and private fields and methods.
  The public fields and methods define the API to interact with the object.
  Private methods are only relevant for you if you want to extend mlr3, e.g. with new learners.

R6 objects are internally environments, and as such have reference semantics.
  For example, `foo2 = foo` does not create a copy of `foo` in `foo2`, but another reference to the same actual object.
  Setting `foo$bar = 3` will also change `foo2$bar` to `3` and vice versa.

To copy an object, use the `$clone()` method and the `deep = TRUE` argument for nested objects, for example, `foo2 = foo$clone(deep = TRUE)`.

:::{.callout-tip}
For more details on R6, have a look at the excellent [R6 vignettes](https://r6.r-lib.org/), especially the [introduction](https://r6.r-lib.org/articles/Introduction.html).
:::
