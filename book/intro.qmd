# Introduction and Overview {#sec-introduction}

{{< include _setup.qmd >}}

The (**M**achine **L**earning in **R**) `r mlr3` [@mlr3] package and ecosystem provide a generic, `r index("object-oriented")`, and extensible framework for `r define("regression")` (@sec-tasks), `r define("classification")` (@sec-classif), and other machine learning `r define("tasks")` (@sec-special) for the R language [@R].
This unified interface provides functionality to extend and combine existing machine learning algorithms (`r define("learners")` (@sec-learners)), intelligently select and tune the most appropriate technique for a given machine learning task (@sec-tasks), and perform large-scale comparisons that enable meta-learning.
Examples of this advanced functionality include hyperparameter tuning ([@sec-optimization]) and feature selection ([@sec-feature-selection]).
Parallelization of many operations is natively supported (@sec-parallelization).

`r mlr3` has similar overall aims to `r ref_pkg("caret")`, `r ref_pkg("tidymodels")`, `r link("https://scikit-learn.org/", "scikit-learn")` for Python, and `r link("https://alan-turing-institute.github.io/MLJ.jl/dev/", "MLJ")` for Julia.
In general `r mlr3` is designed to provide more flexibility than other machine learning frameworks while still offering easy ways to use advanced functionality.
While in particular tidymodels makes it very easy to perform simple machine learning tasks, `r mlr3` is more geared towards advanced machine learning.
To get a quick overview of how to do things in the `r mlr3verse`, see the `r link("https://cheatsheets.mlr-org.com/", "mlr3 cheatsheets")`.

::: callout-note
`r mlr3` provides a unified interface to existing [learners](#learners) in R.
With few exceptions, we do not implement any learners ourselves, although we often augment the functionality provided by the underlying learners.
This includes, in particular, the definition of hyperparameter spaces for tuning.
:::

## Target audience

We assume that users of `r mlr3` have taken an introductory machine learning course or have the equivalent expertise and some basic experience with R.
A background in computer science or statistics is beneficial for understanding the advanced functionality described in the later chapters of this book, but not required.
[@james_introduction_2014] provides a comprehensive introduction for those new to machine learning.

`r mlr3` provides a domain-specific language for machine learning in R that allows to do everything from simple exercises to complex projects.
We target both **practitioners** who want to quickly apply machine learning algorithms and **researchers** who want to implement, benchmark, and compare their new methods in a structured environment.

## From mlr to mlr3

The `r ref_pkg("mlr")` package [@mlr] was first released to `r link("https://cran.r-project.org", "CRAN")` in 2013, with the core design and architecture dating back much further.
Over time, the addition of many features has led to a considerably more complex design that made it harder to build, maintain, and extend than we had hoped for.
In hindsight, we saw that some design and architecture choices in `r ref_pkg("mlr")` made it difficult to support new features, in particular with respect to machine learning pipelines.
Furthermore, the R ecosystem and helpful packages such as `r ref_pkg("data.table")` have undergone major changes after the initial design of `r ref_pkg("mlr")`.

It would have been impossible to integrate all of these changes into the original design of `r ref_pkg("mlr")`.
Instead, we decided to start working on a reimplementation in 2018, which resulted in the first release of `r mlr3` on CRAN in July 2019.

The new design and the integration of further and newly-developed R packages (especially `r ref_pkg("R6")`, `r ref_pkg("future")`, and `r ref_pkg("data.table")`) makes `r mlr3` much easier to use, maintain, and in many regards more efficient than its predecessor `r ref_pkg("mlr")`.
The packages in the ecosystem are less tightly coupled, making them easier to maintain and easier to develop, especially very specialized packages.

## Design principles

{{< include _optional.qmd >}}

We follow these general design principles in the `r mlr3` package and `r mlr3verse` ecosystem.

*   **Separation of computation and presentation**.
Most packages of the `r mlr3` ecosystem focus on processing and transforming data, applying machine learning algorithms, and computing results.
Our core packages do not provide graphical user interfaces (GUIs) because their dependencies would make installation unnecessarily complex, especially on headless servers.
For the same reason, visualizations of data and results are provided in the extra package `r mlr3viz`, which avoids dependencies on `ggplot2`.
`mlr3shiny` provides an interface for some basic machine learning tasks using the `r ref_pkg("shiny")` package.
*   **Object-oriented programming (OOP)**.
Embrace `r ref_pkg("R6")` for a clean, object-oriented design, object state-changes, and reference semantics. `r mlr3` uses encapsulation with tasks (@sec-tasks), learners (@sec-learners), and other objects. These objects use state variables and built-in functions to accomplish the tedious machine learning tasks while maintaining flexibility and customization to specific problems.
*   **Tabular data**.
Embrace `r ref_pkg("data.table")` for its top-notch computation performance as well as tabular data as a data structure which can be easily processed further.
*   **Unify input and output data formats.**
This considerably simplifies the API and allows easy selection and "split-apply-combine" (aggregation) operations.
We combine `data.table` and `R6` to place references to non-atomic and compound objects in tables and make heavy use of list columns.
*   **Defensive programming and type safety**.
All user input is checked with `r ref_pkg("checkmate")` [@checkmate].
We document return types, and avoid mechanisms popular in base R which "simplify" the result unpredictably (e.g., `sapply()` or the `drop` argument for indexing data.frames).
And we have extensive unit tests!
*   **Light on dependencies**.
One of the main maintenance burdens for `r ref_pkg("mlr")` was to keep up with changing learner interfaces and behavior of the many packages it depended on.
We require far fewer packages in `r mlr3` to make installation and maintenance easier.
We still provide the same functionality, but it is split into more packages that have fewer dependencies individually.
As mentioned above, this is particularly the case for all visualization functionality, which is contained in a separate package to avoid unnecessary dependencies in all other packages.

## Package ecosystem

`r mlr3` depends on the following popular and well-established packages that are not developed by core members of the `r mlr3` team:

*   `r ref_pkg("R6")`: The class system predominantly used in mlr3.
*   `r ref_pkg("data.table")`: High-performance extension of R's `data.frame`.
*   `r ref_pkg("digest")`: Cryptographic hash functions.
*   `r ref_pkg("uuid")`: Generation of universally unique identifiers.
*   `r ref_pkg("lgr")`: Highly configurable logging library.
*   `r ref_pkg("mlbench")` and `r ref_pkg("palmerpenguins")`: More machine learning data sets.
*   `r ref_pkg("evaluate")`: For capturing output, warnings, and exceptions (@sec-error-handling).
*   `r ref_pkg("future")` / `r ref_pkg("future.apply")`: For parallelization (@sec-parallelization).

The `r mlr3` package itself provides the base functionality that the rest of ecosystem (`mlr3verse`) relies on and the fundamental building blocks for machine learning.
@fig-mlr3verse shows the packages in the `mlr3verse` that extend `r mlr3` with capabilities for preprocessing, pipelining, visualizations, additional learners, additional task types, and more.

```{r intro-001, echo = FALSE, fig.align='center', out.width="98%", eval=knitr::is_html_output()}
#| label: fig-mlr3verse
#| fig-cap: Overview of the `mlr3` ecosystem, the `mlr3verse`.
#| fig-alt: Diagram showing the packages of the mlr3verse and their relationship.
knitr::include_graphics("https://raw.githubusercontent.com/mlr-org/mlr3/master/man/figures/mlr3verse.svg")
```

::: callout-tip
A complete list with links to the repositories for the respective packages can be found on our `r link("https://mlr-org.com/ecosystem.html", "package overview page")`.
:::

We build on `r ref_pkg("R6")` for object orientation and `r ref_pkg("data.table")` to store and operate on tabular data.
Both are core to `r mlr3`; we briefly introduce both packages for beginners.
While in-depth expertise with these packages is not necessary, a basic understanding is required to work effectively with `r mlr3`.

## Quick R6 introduction for beginners {#sec-r6}

`r ref_pkg("R6")` is one of R's more recent paradigm for object-oriented programming (OOP).
It addresses shortcomings of earlier OO implementations in R, such as S3, which we used in `r ref_pkg("mlr")`.
If you have done any object-oriented programming before, R6 should feel familiar.
We focus on the parts of R6 that you need to know to use `r mlr3`.

Objects are created by calling the constructor of an `R6::R6Class()` object, specifically the initialization method `$new()`.
For example, `foo = Foo$new(bar = 1)` creates a new object of class `Foo`, setting the `bar` argument of the constructor to the value `1`.

Objects have mutable state that is encapsulated in their fields, which can be accessed through the dollar operator.
We can access the `bar` value in the `foo` variable from above through `foo$bar` and set its value by assigning the field, e.g. `foo$bar = 2`.

In addition to fields, objects expose methods that allow to inspect the object's state, retrieve information, or perform an action that changes the internal state of the object.
For example, the `$train()` method of a learner changes the internal state of the learner by building and storing a model, which can then be used to make predictions.

Objects can have public and private fields and methods.
The public fields and methods define the API to interact with the object.
Private methods are only relevant for you if you want to extend `r mlr3`, e.g. with new learners.

Technically, R6 objects are environments, and as such have reference semantics.
For example, `foo2 = foo` does not create a copy of `foo` in `foo2`, but another reference to the same actual object.
Setting `foo$bar = 3` will also change `foo2$bar` to `3` and vice versa.

To copy an object, use the `$clone()` method and the `deep = TRUE` argument for nested objects, for example, `foo2 = foo$clone(deep = TRUE)`.

::: callout-tip
For more details on R6, have a look at the excellent `r link("https://r6.r-lib.org/", "R6 vignettes")`, especially the `r link("https://r6.r-lib.org/articles/Introduction.html", "introduction")`. For comprehensive R6 information, we refer to the `r link("https://adv-r.hadley.nz/r6.html", "R6 chapter from Advanced R")`.
:::

## Quick `data.table` introduction for beginners {#sec-data.table}

The package `r ref_pkg("data.table")` implements a popular alternative to R's `data.frame()`, i.e. an object to store tabular data.
We decided to use `r ref_pkg("data.table")` because it is blazingly fast and scales well to bigger data.

::: callout-note
Many `r mlr3` functions return `data.table`s which can conveniently be subsetted or combined with other outputs.
If you do not like the syntax or are feeling more comfortable with other tools, base `data.frame`s or `r ref_pkg("tibble")`/`r ref_pkg("dplyr")`s are just a single `as.data.frame()` or `as_tibble()` away.
:::

Data tables are constructed with the `data.table()` function (whose interface is similar to `data.frame()`) or by converting an object with `as.data.table()`.

```{r intro-002.table-001.table-002}
library("data.table")
dt = data.table(x = 1:6, y = rep(letters[1:3], each = 2))
dt
```

`data.table`s can be used much like `data.frame`s, but they do provide additional functionality that makes complex operations easier.
For example, data can be summarized by groups with the `[` operator:

```{r intro-004.table-003.table-004}
dt[, mean(x), by = "y"]
```

There is also extensive support for many kinds of database join operations (see e.g. `r link("https://rstudio-pubs-static.s3.amazonaws.com/52230_5ae0d25125b544caab32f75f0360e775.html", "this RPubs post by Ronald Stalder")`) that make it easy to combine multiple `data.table`s in different ways.

::: callout-tip
For an in-depth introduction, we refer the reader to the `r link("https://cran.r-project.org/web/packages/data.table/vignettes/datatable-intro.html", "excellent data.table introduction vignette")`.
:::

## Essential `r mlr3` utilities {#sec-mlr3-utilities}

### Sugar functions {.unnumbered .unlisted}

Most objects in `r mlr3` can be created through convenience functions called *sugar functions*.
They provide shortcuts for common code idioms, reducing the amount of code a user has to write.
We heavily use sugar functions throughout this book and give the equivalent "full form" for full detail.
In most cases, the sugar functions will achieve what you want to do, and you only have to consider using the full R6 code if you program custom objects or extensions.
For example `lrn("regr.rpart")` is the sugar version of `LearnerRegrRpart$new()`.

### Dictionaries {.unnumbered .unlisted}

`r mlr3` uses dictionaries to store objects like learners or tasks.
These are key-value stores that allow to associate a key with a value that can be an R6 object, much like paper dictionaries associate words with their definitions.
Often, values in dictionaries are accessed through sugar functions that automatically use the applicable dictionary without the user having to specify it; only the key to be retrieved needs to be specified.
Dictionaries are used to group relevant objects so that they can be listed and retrieved easily.
For example, a learner can be retrieved directly from the `mlr_learners` dictionary using the key `"classif.featureless"` (`mlr_learners$get("classif.featureless")`) and you can get an overview over all stored learners with `as.data.table(mlr_learners)`.

### `r mlr3viz` {.unnumbered .unlisted}

`r mlr3viz` is the package for all plotting functionality in the `r mlr3` ecosystem.
The package uses a common theme (`ggplot2::theme_minimal()`) so that all generated plots have a similar aesthetic.
Under the hood, `r mlr3viz` uses `ggplot2`.
`r mlr3viz` extends `fortify` and `autoplot`for use with common `r mlr3` outputs including Prediction, Learner, and Benchmark objects (these objects will be introduced and covered in the next chapter).
The most common use of `r mlr3viz` is the `autoplot()` function, where the type of the object passed determines the type of the plot.
Plot types are documented in the respective manual page that can be accessed through `?autoplot.X`.
For example, the documentation of plots for regression tasks can be found by running `?autoplot.TaskRegr`.
