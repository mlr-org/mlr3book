---
author:
  - name: Michel Lang
    orcid: 0000-0001-9754-0393
    email: michel.lang@tu-dortmund.de
    affiliations:
      - name: Research Center Trustworthy Data Science and Security
      - name: TU Dortmund University
  - name: Author 2
    orcid:
    email:
    affiliations:
      - name: Affiliation 2
abstract: TODO (150-200 WORDS)
---

# Technical {#sec-technical}

{{< include _setup.qmd >}}

This chapter provides an overview of the technical details of the `r mlr3` framework.
This includes the following topics:

* Parallelization with the `r ref_pkg("future")` framework (@sec-parallelization),
* how to handle errors and troubleshoot (@sec-error-handling),
* working with out-of-memory data, e.g., data stored in databases (@sec-backends),
* working with hyperparameters (@sec-paradox), and
* adjust the logger to your needs (@sec-logging).

## Parallelization {#sec-parallelization}

Parallelization refers to running multiple jobs in parallel, i.e., executing them simultaneously on multiple CPU cores, CPUs, or computational nodes.
This process allows for significant savings in computing power.

In general, there are many possibilities to parallelize, depending on the hardware to run the computations: If you only have a single CPU with multiple cores, [threads](https://en.wikipedia.org/wiki/Thread_(computing)) or [forks](https://en.wikipedia.org/wiki/Fork_(system_call)) are ways to utilize all cores.
If you have multiple machines, they need a way to communicate and exchange information, e.g. via protocols like network sockets or the [Message Passing Interface (MPI)](https://en.wikipedia.org/wiki/Message_Passing_Interface).
We don't want to delve too deep into such details here, but want to introduce some terminology:

* We call the parallelization platform together with its implementation for R the **parallelization backend**.
  As many parallelization backends have a different API, we are using the `r ref_pkg("future")` package as an additional abstraction layer.
  `r mlr3` just interfaces `r ref_pkg("future")` while the user can control how the code is executed.
* The R session or process which orchestrates the computational work is called **main**, and it starts computational **jobs**.
* The R sessions, processes, forks or machines which receive the jobs, do the calculation and then send back the result are called **workers**.

We distinguish between [*implicit parallelism*](#sec-implicit) and [*explicit parallelism*](#sec-explicit).
For the former, no special directives are required to enable the parallelization, everything works fully automatically.
For the latter, parallelization has to be manually configured.
On the one hand, this gives you full control over the execution, but on the other hand, this poses a greater obstacle for non-experts.

:::{.callout-note}
We don't cover parallelization on GPUs here.
`mlr3` only distributes the fitting of multiple learners, e.g., during resampling, benchmarking, or tuning.
On this rather abstract level, GPU parallelization doesn't work efficiently.
Some learning procedures can be compiled against CUDA/OpenCL to utilize the GPU while fitting a single model.
We refer to the respective documentation of the learner's implementation, e.g., [here](https://xgboost.readthedocs.io/en/stable/gpu/index.html) for `r ref("mlr_learners_classif.xgboost", text = "xgboost")`.
:::

### Implicit Parallelization {#sec-implicit}

We talk about implicit parallelization in the context of `mlr3`, if `mlr3` calls external code (i.e., code from foreign CRAN packages which implements a `r ref("Learner")`) that itself runs in parallel.
Note that this definition includes GPU acceleration.

Many machine learning algorithms can parallelize their model fit using threading, e.g., the random forest implementation in `r ref("mlr_learners_classif.ranger", text = "ranger")` or the boosting implemented in `r ref("mlr_learners_classif.xgboost", text = "xgboost")`.
During threading, the implementation instructs some sequential parts of the code to be executed independently of the other parts in the same process.

For example, while fitting a decision tree, each split that divides the data into two disjoint partitions requires a search for the best cut point on all $p$ features.
So instead of iterating over all features sequentially, the search can be broken down into $p$ threads, each searching for the best cut point on a single feature.
These threads can easily be parallelized by the scheduler of the operating system, as there is no need for communication between the threads.
After all threads have finished, the results are collected and merged before terminating the threads.
I.e., for our example of the decision tree, (1) the $p$ best cut points per feature are collected and then (2) aggregated to the single best cut point across all features by just iterating over the $p$ results sequentially.


:::{.callout-warning}
It does not make practical sense to actually execute in parallel every operation that can be parallelized.
Starting and terminating workers (here: threads) as well as possible communication between workers comes at a price in the form of additionally required runtime which is called (parallelization) overhead.
The overhead must be related to the runtime of the sequential execution.
If the sequential execution is comparably fast, enabling parallelization often just introduces additional complexity and slows down the execution.
:::

Unfortunately, threading conflicts with certain parallel backends used during explicit parallelization, causing the system to be overutilized in the best case and causing hangs or segfaults in the worst case.
For this reason, we introduced the convention that implicit parallelization is turned off per default.
Hyperparameters that control the number of threads are tagged with the label `"threads"`.
Currently, controlling the number of threads is possible for some learners and filters from the `r ref_pkg("mlr3filters")` package:

```{r technical-001}
library("mlr3learners") # for the ranger learner

learner = lrn("classif.ranger")
learner$param_set$ids(tags = "threads")
```

To enable the parallelization for this learner, we provide the helper function `r ref("set_threads()")` which
```{r technical-002}
# use 4 CPUs
set_threads(learner, n = 4)

# auto-detect cores on the local machine
set_threads(learner)
```

:::{.callout-caution}
Automatic detection of the number of CPUs is sometimes flaky, and utilizing all available cores is occasionally counterproductive as overburdening the system often has negative effects on the overall runtime.
The function which determines the number of CPUs for `r mlr3` is implemented in `r ref("parallelly::availableCores()")` and comes with reasonable heuristics for many setups.
See [this blog post](https://www.jottr.org/2022/12/05/avoid-detectcores/) for some background information about the heuristic.
However, there are still some scenarios where it is better to reduce the number of utilized CPUs manually:

* You want to simultaneously work on the same system, e.g., browse the web or watch a video.
* You are on a multi-user system and want to spare some resources for other users.
* You have energy-efficient CPU cores, for example, the "Icestorm" cores on a Mac M1 chip.
  These are comparably slower than the high-performance "Firestorm" cores and not well suited for heavy computations.
* You have linked R to a threaded [BLAS](https://de.wikipedia.org/wiki/Basic_Linear_Algebra_Subprograms) implementation like [OpenBLAS](https://www.openblas.net/), and your learners make heavy use of linear algebra.

You can manually set the number of CPUs to overrule the heuristic via option `"mc.cores"`:

```{r technical-003, eval = FALSE}
options(mc.cores = 4)
```
We recommend setting this in your system's `.Rprofile` file, c.f. `r ref("Startup")`.
:::


### Explicit Parallelization {#sec-explicit}

Here, we talk about explicit parallelization if `r mlr3` starts and controls the parallelization itself.
For this purpose, an additional abstraction layer is used to be able to operate on a unified interface for a broad range of parallel backends: the `r ref_pkg("future")` package.
There are two operations where `r mlr3` calls the `future` package: while performing resampling via `r ref("resample()")` and while benchmarking via `r ref("benchmark()")`.
During resampling, because all resampling iterations are independent of each other, all iterations can be executed in parallel.
The same holds for benchmarking, where additionally to the independent model fits of a single resampling, all combinations in the provided design are also independent.
These iterations are performed by `r ref_pkg("future")` using the parallel backend configured with `r ref("future::plan()")`.
Extension packages like `r mlr3tuning` internally call `r ref("benchmark()")` during tuning and thus work in parallel, too.


:::{.callout-tip}
When computational problems are so easy to parallelize, they are often referred to as "embarrassingly parallel".

Whenever you loop over elements with a map-like function (e.g., `r ref("lapply()")`, `r ref("sapply()")`, `r ref("mapply()")`, `r ref("vapply()")` or a function from package `r ref_pkg("purrr")`), you are facing an embarrassingly parallel problem.
Such problems are straightforward to parallelize with R, e.g., with the `r ref_pkg("furrr")` package providing map-like functions executed in parallel via the `r ref_pkg("future")` framework.
The same holds for `for`-loops with independent iterations, i.e., loops where the current iteration does not rely on the results of previous iterations.
:::

In this section, we will use the `r ref("mlr_tasks_spam", text = "spam task")` and a simple `r ref("mlr_learners_classif.rpart", text = "classification tree")` to showcase the explicit parallelization.
We use the `r ref("future::multisession")` parallel backend that should work on all systems.

```{r technical-005, eval = FALSE}
# select the multisession backend to use
future::plan("multisession")

# define objects to perform a resampling
task = tsk("spam")
learner = lrn("classif.rpart")
resampling = rsmp("cv", folds = 3)

time = proc.time()[3]
resample(task, learner, resampling)
diff = proc.time()[3] - time
```

By default, all CPUs of your machine are used unless you specify the argument `workers` in `r ref("future::plan()")` (possible problems with this default have already been discussed for implicit parallelization).
You should see a decrease in the reported elapsed time, but in practice, you cannot expect the runtime to fall linearly as the number of cores increases ([Amdahl's law](https://www.wikiwand.com/en/Amdahl%27s_law)).
In contrast to threads, the technical overhead for starting workers, communicating objects, sending back results, and shutting down the workers is quite large for the multisession backend.
Therefore, it is advised to only consider parallelization for resamplings where each iteration runs at least several seconds.


@fig-parallel-overview illustrates the parallelization from the above example. From left to right:

1. The main process calls the `resample()` function.
2. The task is split into 3 folds.
3. The folds are passed to three workers, each fitting a model on the respective subset of the task and predicting on the left-out observations.
4. The predictions (and trained models) are communicated back to main process which combines them into a `ResampleResult`.

```{mermaid}
%%| label: fig-parallel-overview
%%| fig-cap: Parallelization of a resampling using a 3-fold cross-validation
graph LR
    M[fa:fa-server Main]
    S{"resample()"}
    C{ResampleResult}

    M --> S
    S -->|Fold 1| W1[fa:fa-microchip Worker 1]
    S -->|Fold 2| W2[fa:fa-microchip Worker 2]
    S -->|Fold 3| W3[fa:fa-microchip Worker 3]
    W1 -->|Prediction 1| C
    W2 -->|Prediction 2| C
    W3 -->|Prediction 3| C
```


:::{.callout-note}
If you are transitioning from `r ref_pkg("mlr")`, you might be used to selecting different parallelization levels, e.g., for resampling, benchmarking, or tuning.
In `r mlr3`, this is no longer required (except for nested resampling, briefly described in the following section).
All kind of experiments are rolled out on the same level.
Therefore, there is no need to decide whether you want to parallelize the tuning OR the resampling.

Just lean back and let the machine do the work :-)
:::

### Reproducibility

Usually reproducibility is a major concern during parallelization as special [pseudorandom number generators](https://en.wikipedia.org/wiki/Pseudorandom_number_generator) (PRNGs) are required.
Luckily, this problem is already solved for us by the excellent `r ref_pkg("future")` package `r mlr3` calls under the hood.
`r ref_pkg("future")` ensures that all workers will receive the exactly same PRNG streams.
Although this alone does not guarantee full reproducibility, it is one problem less to worry about.

You can find more details about the used pseudo RNG in [this blog post](https://www.jottr.org/2020/09/22/push-for-statistical-sound-rng/).


### Nested Resampling Parallelization {#sec-nested-resampling-parallelization}

[Nested resampling](#nested-resampling) results in two nested resampling loops, and the user can choose which of them should be parallelized.
Let's consider the following example:
You want to tune the `minsplit` argument of a classification tree using the `r ref("AutoTuner")` of `r mlr3tuning` (simplified version taken from the [nested resampling section](#sec-model-performance)):

```{r}
library("mlr3tuning")

learner = lrn("classif.rpart",
  minsplit  = to_tune(2, 128, logscale = TRUE)
)

at = auto_tuner(
  method = tnr("random_search"),
  learner = learner,
  resampling = rsmp("cv", folds = 2), # inner CV
  measure = msr("classif.ce"),
  term_evals = 20,
)
```
To evaluate the performance on an independent test set, resampling is used:
```{r}
resample(
  task = tsk("penguins"),
  learner = at,
  resampling = rsmp("cv", folds = 5) # outer CV
)
```

Here, we have two opportunities to tune: the inner cross-validation of the auto tuner with 2 folds, or the outer cross-validation of the resampling with 5 folds.
Let's say that we have a single CPU with four cores available.

If we opt to parallelize the outer CV, all four cores would be utilized first with the computation of the first 4 resampling iterations.
The computation of the fifth iteration has to wait, i.e., depending on the parallelization backend and its scheduling strategy,

(a) until all four iterations have been finished, and the results have been collectively reported back to the main process, or
(b) either one of the four cores has terminated -- the first core reporting back will get a new task as soon as possible.

:::{.callout-note}
The former method usually comes with less synchronization overhead and is best suited for short jobs with homogeneous runtimes.
The latter yields better runtimes if the runtimes are heterogeneous, especially if the parallelization overhead is neglectable in comparison with the runtime for the computation.
E.g., for `r ref("parallel::mclapply()")`, the behavior of the scheduler can be controlled with the `mc.preschedule` option.
For many backends, you cannot control the scheduling.
However, `r ref_pkg("future")` allows you to first chunk jobs together which combines multiple tasks into blocks that run sequentially on a worker, avoiding the intermediate synchronization steps.
:::

The resulting CPU utilization of the nested resampling example on 4 CPUs is visualized in two Figures:

* @fig-parallel-outer as an example for parallelizing the outer 5-fold cross-validation.
  ```{r, eval = FALSE}
  # Runs the outer loop in parallel and the inner loop sequentially
  future::plan(list("multisession", "sequential"))
  ```
  We assume that each fit during the inner resampling takes 4 seconds to compute and that there is no other significant overhead.
  First, each of the four workers starts with the computation of an inner 2-fold cross-validation.
  As there are more jobs than workers, the remaining fifth iteration of the outer resampling is queued on CPU1 **after** the first 4 iterations are finished after 8 secs.
  During the computation of the 5th outer resampling iteration, only CPU1 is utilized, the other 3 CPUs are idling.
* @fig-parallel-inner as an example for parallelizing the inner 2-fold cross-validation.
  ```{r technical-006, eval = FALSE}
  # Runs the outer loop sequentially and the inner loop in parallel
  future::plan(list("sequential", "multisession"))
  ```
  Here, the outer loop runs sequentially and distributes the 2 computations for the inner resampling on 2 CPUs. Meanwhile, CPU3 and CPU4 are idling.

```{mermaid}
%%| label: fig-parallel-outer
%%| fig-cap: CPU utilization while parallelizing the outer resampling of a 2-fold cross-validation nested inside a 5-fold cross-validation on 4 CPUs.
gantt
    title CPU Utilization
    dateFormat  s
    axisFormat %S
    section CPU1
    Iteration 1-1           :0, 4s
    Iteration 1-2           :4, 4s
    Iteration 5-1           :8, 4s
    Iteration 5-2           :12, 4s

    section CPU2
    Iteration 2-1           :0, 4s
    Iteration 2-2           :4, 4s
    Idle                    :crit, 8, 8s

    section CPU3
    Iteration 3-1           :0, 4s
    Iteration 3-2           :4, 4s
    Idle                    :crit, 8, 8s

    Iteration 4-1           :0, 4s
    section CPU4
    Iteration 4-2           :4, 4s
    Idle                    :crit, 8, 8s
```

```{mermaid}
%%| label: fig-parallel-inner
%%| fig-cap: CPU utilization while parallelizing the inner resampling of a 2-fold cross-validation nested inside a 5-fold cross-validation on 4 CPUs.
gantt
    title CPU Utilization
    dateFormat  s
    axisFormat %S
    section CPU1
    Iteration 1-1           :0, 4s
    Iteration 2-1           :4, 4s
    Iteration 3-1           :8, 4s
    Iteration 4-1           :12, 4s
    Iteration 5-1           :16, 4s

    section CPU2
    Iteration 1-2           :0, 4s
    Iteration 2-2           :4, 4s
    Iteration 3-2           :8, 4s
    Iteration 4-2           :12, 4s
    Iteration 5-2           :16, 4s

    section CPU3
    Idle                    :crit, 0, 20s

    section CPU4
    Idle                    :crit, 0, 20s
```

Both possibilities for parallelization are not exploiting the full potential of the 4 CPUs.
With parallelization of the outer loop, all results are computed after 16s, in contrast to parallelization of the inner loop where the results are only available after 20s.

If possible, the number of iterations can be adapted to the available hardware. There is no law set in stone that you have to do, e.g., 10 folds in cross-validation.
If you have 4 CPUs and a reasonable variance, 8 iterations are often sufficient, or you do 12 iterations because you get the last two iterations basically for free.

Alternatively, you can also enable parallelization for both loops for nested parallelization, even on different parallelization backends.
While nesting real parallelization backends is often unintended and causes unnecessary overhead, it is useful in some distributed computing setups.
In this case, the number of workers must be manually tweaked so that the system does not get overburdened:

```{r technical-007, eval = FALSE}
# Runs both loops in parallel
future::plan(list(
  future::tweak("multisession", workers = 2),
  future::tweak("multisession", workers = 4)
))
```

This example would run on 8 cores (`= 2 * 4`) on the local machine.
The [vignette](https://cran.r-project.org/web/packages/future/vignettes/future-3-topologies.html) of the `r ref_pkg("future")` package gives more insight into nested parallelization.
For more background information about parallelization during tuning, see Section 6.7 of @hpo_practical.

:::{.callout-caution}
During tuning with `r mlr3tuning`, you can often adjust the **batch size** of the `r ref("Tuner")`, i.e., control how many hyperparameter configurations are evaluated in parallel.
If you want full parallelization, make sure that the batch size multiplied by the number of (inner) resampling iterations is at least equal to the number of available workers.
If you expect homogeneous runtimes, i.e., you are tuning over a single learner or linear pipeline and you have no hyperparameter which is likely to influence the performance, aim for a multiple of the number of workers.

In general, larger batches mean more parallelization, while smaller batches imply a more frequent evaluation of termination criteria.
We default to a `batch_size` of 1 that ensures that all `r ref("Terminator", text = "Terminators")` work as intended, i.e., you cannot exceed the computational budget.
:::

## Error Handling {#sec-error-handling}

In ML, it is not uncommon for something to break.
This is because the algorithms have to process arbitrary data, and not all eventualities can always be handled.
While we try to identify obvious problems before execution, such as when missing values occur, but a learner can't handle them, other problems are far more complex to detect.
Examples include correlations or collinearity that make model fitting impossible, outliers that lead to numerical problems, or new levels of categorical variables emerging in the predict step.
The learners behave quite differently when encountering such problems: some models signal a warning during the train step that they failed to fit but return a baseline model while other models stop the execution.
During prediction, some learners just refuse to predict the response for observations they cannot handle while others predict a missing value.
How to deal with these problems even in more complex setups like benchmarking or tuning is the topic of this section.

For illustration (and internal testing) of error handling, `r mlr3` ships with the learners `r ref("mlr_learners_classif.debug", "classif.debug")` and `r ref("mlr_learners_regr.debug", "regr.debug")`.
Here, we will concentrate on the debug learner for classification:

```{r technical-008}
task = tsk("penguins")
learner = lrn("classif.debug")
print(learner)
```

This learner comes with special hyperparameters that let us simulate problems frequently encountered in ML.
E.g., the debug learner comes with hyperparameters to control

1. what conditions should be signaled (message, warning, error, segfault) with what probability,
1. during which stage the conditions should be signaled (train or predict), and
1. the ratio of predictions being `NA` (`predict_missing`).

```{r technical-009}
learner$param_set
```

With the learner's default settings, the learner will do nothing special: The learner remembers a random label and constantly predicts this label:

```{r technical-010}
task = tsk("penguins")
learner$train(task)$predict(task)$confusion
```

We now set a hyperparameter to let the debug learner signal an error during the train step.
By default, `r mlr3` does not catch conditions such as warnings or errors raised while calling learners:

```{r technical-011, error = TRUE}
# set probability to signal an error to 1
learner$param_set$values = list(error_train = 1)

learner$train(tsk("iris"))
```
If this have been a regular learner, we could now start debugging with `r ref("traceback()")` (or create a [Minimal Reproducible Example (MRE)](https://stackoverflow.com/help/minimal-reproducible-example) to file a bug report upstream).



### Encapsulation {#sec-encapsulation}

Since ML algorithms are confronted with arbitrary, often messy data, errors are not uncommon here, and we often just need to move on during benchmarking or tuning.
Thus, we need a mechanism to

  1. capture all signaled conditions such as messages, warnings and errors so that we can analyze them post-hoc (called "encapsulation", covered in this section), and
  2. a statistically sound way to proceed while being able to aggregate over partial results (next @sec-fallback).

Encapsulation ensures that signaled conditions (such as messages, warnings and errors) are intercepted: all conditions raised during the training or predict step are logged into the learner, and errors do not interrupt the program flow.
I.e., the execution of the calling function or package (here: `r mlr3`) continues as if there had been no error, though the result (fitted model during `train()`, predictions during `predict()`) are missing.
Each `r ref("Learner")` has a field `encapsulate` to control how the train or predict steps are wrapped.
The easiest way to encapsulate the execution is provided by the package `r ref_pkg("evaluate")` which evaluates R expressions while tracking conditions such as outputs, messages, warnings or errors (see the documentation of the `r ref("encapsulate()")` helper function for more details):

```{r technical-012}
task = tsk("penguins")
learner = lrn("classif.debug")

# this learner throws a warning and then stops with an error during train()
learner$param_set$values = list(warning_train = 1, error_train = 1)

# enable encapsulation for train() and predict()
learner$encapsulate = c(train = "evaluate", predict = "evaluate")

learner$train(task)
```

After training the learner, one can access the recorded log via the fields `log`, `warnings` and `errors`:

```{r technical-013}
learner$log
learner$warnings
learner$errors
```

Another method for encapsulation is implemented in the `r ref_pkg("callr")` package.
In contrast to `r ref_pkg("evaluate")`, the computation is taken out in a separate R process.
This guards the calling session against segfaults which otherwise would tear down the complete R session.
On the downside, starting new processes comes with comparably more computational overhead.

```{r technical-014}
learner$encapsulate = c(train = "callr", predict = "callr")
learner$param_set$values = list(segfault_train = 1)
learner$train(task = task)
learner$errors
```

With either of these encapsulation methods, we can now catch errors and post-hoc analyze the messages, warnings and error messages.
Unfortunately, this is only half the battle.
Without a model, it is not possible to get predictions:

```{r technical-015, error = TRUE}
learner$predict(task)
```

To handle the missing predictions gracefully during `r ref("resample()")`, `r ref("benchmark()")` or tuning, fallback learners are introduced next.


### Fallback learners {#sec-fallback}

Fallback learners have the purpose of allowing scoring results in cases where a `r ref("Learner")` failed to fit a model, refuses to provide predictions for all observations or predicts missing values.

We will first handle the case that a learner fails to fit a model during training, e.g., if some convergence criterion is not met or the learner ran out of memory.
There are in general three possibilities to proceed:

1. Ignore missing scores.
   Although this is arguably the most frequent approach in practice, it is **not** statistically sound.
   For example, consider the case where a researcher wants a specific learner to look better in a benchmark study.
   To do this, the researcher takes an existing learner but introduces a small adaptation: If an internal goodness-of-fit measure is not achieved, an error is thrown.
   In other words, the learner only fits a model if the model can be reasonably well learned on the given training data.
   In comparison with the learning procedure without this adaptation and a good threshold, however, we now compare the mean over only the "easy" splits with the mean over all splits - an unfair advantage.
2. Penalize failing learners.
   If a score is missing, we can simply impute the worst possible score (as defined by the `r ref("Measure")`) and thereby heavily penalize the learner for failing.
   However, this often seems too harsh for many problems, and for some measures there is no reasonable value to impute.
3. Impute a value that corresponds to a (weak) baseline.
   Instead of imputing with the worst possible score, impute with a reasonable baseline, e.g., by just predicting the majority class or the mean of the response in the training data.
   Such simple baselines are implemented as featureless learners (`r ref("mlr_learners_classif.featureless")` or `r ref("mlr_learners_regr.featureless")`).
   Note that a reasonable baseline value is different in different training splits.
   Retrieving these values after a larger benchmark study has been conducted is possible, but tedious.

We strongly recommend option (3): it is statistically sound and very flexible.
To make this procedure very convenient during resampling and benchmarking, we support fitting a proper baseline with a fallback learner.
In the next example, in addition to the debug learner, we attach a simple featureless learner to the debug learner.
So whenever the debug learner fails (which is every single time with the given parametrization) and encapsulation is enabled, `r mlr3` falls back to the predictions of the featureless learner internally:

```{r technical-016}
task = tsk("penguins")

learner = lrn("classif.debug")
learner$param_set$values = list(error_train = 1)
learner$fallback = lrn("classif.featureless")

learner$train(task)
learner
```

Note that we don't have to enable encapsulation explicitly; it is automatically set to `"evaluate"` for the training and the predict step while setting a fallback learner for a learner without encapsulation enabled.
Furthermore, the log contains the captured error (which is also included in the print output), and although we don't have a model, we can still get predictions:

```{r technical-017}
learner$model
prediction = learner$predict(task)
prediction$score()
```

In this stepwise train-predict procedure, the fallback learner is of limited use.
However, it is invaluable for larger benchmark studies.

In the following snippet, we compare the previously created debug learner with a simple classification tree.
We re-parametrize the debug learner to fail in roughly 30% of the resampling iterations during the training step:

```{r technical-018}
learner$param_set$values = list(error_train = 0.3)

bmr = benchmark(benchmark_grid(tsk("penguins"), list(learner, lrn("classif.rpart")), rsmp("cv")))
aggr = bmr$aggregate(conditions = TRUE)
aggr[, .(learner_id, warnings, errors, classif.ce)]
```

Even though the debug learner occasionally failed to provide predictions, we still got a statistically sound aggregated performance value which we can compare to the aggregated performance of the classification tree.
It is also possible to split the benchmark up into separate `ResampleResult` objects which sometimes helps to get more context.
E.g., if we only want to have a closer look into the debug learner, we can extract the errors from the corresponding resample results:


```{r technical-019}
rr = aggr[learner_id == "classif.debug"]$resample_result[[1L]]
rr$errors
```

A similar problem to failed model fits emerges when a learner predicts only a subset of the observations in the test set (and predicts `NA` or no value for others).
A typical case is, e.g., when new and unseen factor levels are encountered in the test data.
Imagine again that our goal is to benchmark two algorithms using cross-validation on some binary classification task:

* Algorithm A is an ordinary logistic regression.
* Algorithm B is also an ordinary logistic regression, but with a twist:
  If the logistic regression is rather certain about the predicted label (> 90% probability), it returns the label and returns a missing value otherwise.

Clearly, at its core, this is the same problem as outlined before.
Algorithm B would easily outperform algorithm A, but you have not factored in that you can not generate predictions for all observations.
Long story short, if a fallback learner is involved, missing predictions of the base learner will be automatically replaced with predictions from the fallback learner.
This is illustrated in the following example:

```{r technical-020}
task = tsk("penguins")
learner = lrn("classif.debug")

# this hyperparameter sets the ratio of missing predictions
learner$param_set$values = list(predict_missing = 0.5)

# without fallback
p = learner$train(task)$predict(task)
table(p$response, useNA = "always")

# with fallback
learner$fallback = lrn("classif.featureless")
p = learner$train(task)$predict(task)
table(p$response, useNA = "always")
```

Summed up, by combining encapsulation and fallback learners, it is possible to benchmark even quite unreliable or unstable learning algorithms in a convenient and statistically sound fashion.

### Actionable Errors

All problems demonstrated so far are artificial and non-actionable.
The usefulness of encapsulation and error logging usually only really becomes apparent in large benchmarks, especially in combination with parallelization.
For a fair comparison, you need to distinguish between the following cases:

(a) You have made a mistake, e.g., forgot a required preprocessing step in your pipeline. Action: Fix problems, restart computation.
(b) Temporary problems related to the executing system, e.g., network hiccups. Action: Restart computation.
(c) Intrinsic, deterministic and reproducible problem with the model fitting. Action: Impute with fallback learner.

The package [mlr3batchmark](https://github.com/mlr-org/mlr3batchmark) provides functionality to map jobs of a benchmark to computational jobs for the package `r ref_pkg("batchtools")`.
This provides a convenient way get fine-grained control over the execution of each single resampling iteration and then combine the results afterwards to a `r ref("BenchmarkResult")` again to proceed with the analysis.



## Data Backends {#sec-backends}

In mlr3, `r ref("Task", text = "Tasks")` store their data in an abstract data object, the `r ref("DataBackend")`.
A backend provides a unified API to retrieve subsets of the data or query information about it, regardless of how the data is actually stored.
The default backend uses `r ref_pkg("data.table")` via the `r ref("DataBackendDataTable")` as a very fast and efficient in-memory database.
For example, we can query some information of the `r ref("mlr_tasks_penguins")` task:
```{r}
task = tsk("penguins")
backend = task$backend
backend$nrow
backend$ncol
```

For bigger data, or when working with many tasks simultaneously in the same R session, it can be necessary to interface out-of-memory data to reduce the memory requirements.
This way, only the part of the data which is currently required by the learners will be placed in the main memory to operate on.
There are multiple options to archive this:

1. `r ref("DataBackendDplyr")` which interfaces the R package `r ref_pkg("dbplyr")`, extending `r ref_pkg("dplyr")` to work on many popular databases like [MariaDB](https://mariadb.org/), [PostgreSQL](https://www.postgresql.org/) or [SQLite](https://www.sqlite.org).
2. `r ref("DataBackendDuckDB")` for the impressive [DuckDB](https://duckdb.org/) database connected via `r ref_pkg("duckdb")`: a fast, zero-configuration alternative to SQLite.
3. `r ref("DataBackendDuckDB")`, again, but for [Parquet files](https://parquet.apache.org/).
  The data does not need to be converted to DuckDB's native storage format, you can work directly on directories containing one or multiple files stored in the popular Parquet format.


### Databases with DataBackendDplyr

To demonstrate the `r ref("DataBackendDplyr")` we use the NYC flights data set from the `r ref_pkg("nycflights13")` package and move it into a SQLite database.
Although `as_sqlite_backend()` provides a convenient function to perform this step, we construct the database manually here.

```{r technical-021, message = FALSE}
# load data
requireNamespace("DBI")
requireNamespace("RSQLite")
requireNamespace("nycflights13")
data("flights", package = "nycflights13")
str(flights)

# add column of unique row ids
flights$row_id = 1:nrow(flights)

# create sqlite database in temporary file
path = tempfile("flights", fileext = ".sqlite")
con = DBI::dbConnect(RSQLite::SQLite(), path)
tbl = DBI::dbWriteTable(con, "flights", as.data.frame(flights))
DBI::dbDisconnect(con)

# remove in-memory data
rm(flights)
```

With the SQLite database stored in file `path`, we now re-establish a connection and switch to `r ref_pkg("dplyr")`/`r ref_pkg("dbplyr")` for some essential preprocessing.

```{r technical-022}
# establish connection
con = DBI::dbConnect(RSQLite::SQLite(), path)

# select the "flights" table, enter dplyr
library("dplyr")
library("dbplyr")
tbl = tbl(con, "flights")
```

First, we select a subset of columns to work on:

```{r technical-023}
keep = c("row_id", "year", "month", "day", "hour", "minute", "dep_time",
  "arr_time", "carrier", "flight", "air_time", "distance", "arr_delay")
tbl = select(tbl, all_of(keep))
```

Additionally, we remove those observations where the arrival delay (`arr_delay`) has a missing value:

```{r technical-024}
tbl = filter(tbl, !is.na(arr_delay))
```

To keep runtime reasonable for this toy example, we filter the data to only use every second row:

```{r technical-025}
tbl = filter(tbl, row_id %% 2 == 0)
```

The factor levels of the feature `carrier` are merged so that infrequent carriers are replaced by level "other":

```{r technical-026}
tbl = mutate(tbl, carrier = case_when(
  carrier %in% c("OO", "HA", "YV", "F9", "AS", "FL", "VX", "WN") ~ "other",
  TRUE ~ carrier))
```

Next, the processed table is used to create a `r ref("mlr3db::DataBackendDplyr")` from `r mlr3db`:

```{r technical-027}
library("mlr3db")
b = as_data_backend(tbl, primary_key = "row_id")
```

We can now use the interface of `r ref("DataBackend")` to query some basic information about the data:

```{r technical-028}
b$nrow
b$ncol
b$head()
```

Note that the `r ref("DataBackendDplyr")` does not know about any rows or columns we have filtered out with `r ref_pkg("dplyr")` before, it just operates on the view we provided.

As we now have constructed a backend, we can switch over to `r mlr3` for model fitting and create the following `r mlr3` objects:

* A `r ref("TaskRegr", text = "regression task")`, based on the previously created `r ref("mlr3db::DataBackendDplyr")`.
* A regression learner (`r ref("mlr_learners_regr.rpart", text = "regr.rpart")`).
* A resampling strategy: 3 times repeated subsampling using 2\% of the observations for training ("`r ref("mlr_resamplings_subsampling", text = "subsampling")`")
* Measures "`r ref("mlr_measures_regr.mse", text = "mse")`", "`r ref("mlr_measures_time_train", text = "time_train")`" and "`r ref("mlr_measures_time_predict", text = "time_predict")`"

```{r technical-029}
task = as_task_regr(b, id = "flights_sqlite", target = "arr_delay")
learner = lrn("regr.rpart")
measures = mlr_measures$mget(c("regr.mse", "time_train", "time_predict"))
resampling = rsmp("subsampling", repeats = 3, ratio = 0.02)
```

We pass all these objects to `r ref("resample()")` to perform a simple resampling with three iterations.
In each iteration, only the required subset of the data is queried from the SQLite database and passed to `r ref("rpart::rpart()")`:

```{r technical-030}
rr = resample(task, learner, resampling)
print(rr)
rr$aggregate(measures)
```

Note that we still have an active connection to the database.
To properly close it, we remove the `tbl` object referencing the connection and then close the connection.

```{r technical-031}
rm(tbl)
DBI::dbDisconnect(con)
```


### Parquet Files with DataBackendDuckDB

While storing the Task's data in memory is most efficient w.r.t. accessing it for model fitting, this has two major disadvantages:

1. Although you might only need a small proportion of the data, the complete data frame sits in memory and consumes memory.
  This is especially a problem if you work with many tasks simultaneously.
2. During parallelization, the complete data needs to be transferred to the workers which can cause significant overhead.

A very simple way to avoid this is given by just converting the `r ref("DataBackendDataTable")` to a `r ref("DataBackendDuckDB")`.
As we have already demonstrated how to operate on a SQLite database, and DuckDB is not different in that regard.
To convert a `data.frame` to DuckDB, we provide the helper function `r ref("as_duckdb_backend()")`.
Only two arguments are required: the `data.frame` to convert, and a `path` to store the data.

While this is useful while working with many tasks simultaneously in order to keep the memory requirements reasonable, the more frequent use case for DuckDB are nowadays [Parquet files](https://en.wikipedia.org/wiki/Apache_Parquet).
Parquet is a popular column-oriented data storage format supporting efficient compression, making it far superior to other popular data exchange formats such as CSV.

To demonstrate working with Parquet files, we first query the location of an example data set shipped with `r ref_pkg("mlr3db")`:

```{r}
path = system.file(file.path("extdata", "spam.parquet"), package = "mlr3db")
```

We can then create a `r ref("DataBackendDuckDB")` based on this file and convert the backend to a classification task, all without loading the dataset into memory:

```{r}
backend = as_duckdb_backend(path)
task = as_task_classif(backend, target = "type")
print(task)
```

Accessing the data internally triggers a query and data is fetched to be stored in an in-memory `data.frame`, but only the required subsets.


## Parameters (using paradox) {#sec-paradox}

:::{.callout-note}
We are currently revising the book.
This section contains a lot of legacy code.
You can find the new paradox syntax in the [Defining a Tuning Spaces](#sec-tuning-space) section.
:::

The `r ref_pkg("paradox")` package offers a language for the description of *parameter spaces*, as well as tools for useful operations on these parameter spaces.
A parameter space is often useful when describing:

* A set of sensible input values for an R function
* The set of possible values that slots of a configuration object can take
* The search space of an optimization process

The tools provided by `r ref_pkg("paradox")` therefore relate to:

* **Parameter checking**: Verifying that a set of parameters satisfies the conditions of a parameter space
* **Parameter sampling**: Generating parameter values that lie in the parameter space for systematic exploration of program behavior depending on these parameters

`r ref_pkg("paradox")` is, by nature, an auxiliary package that derives its usefulness from other packages that make use of it.
It is heavily utilized in other [mlr-org](https://github.com/mlr-org) packages such as `r mlr3`, `r mlr3pipelines`, and `r mlr3tuning`.

### Reference Based Objects

`r ref_pkg("paradox")` is the spiritual successor to the `r ref_pkg("ParamHelpers")` package and was written from scratch using the `r ref_pkg("R6")` class system.
The most important consequence of this is that all objects created in `r ref_pkg("paradox")` are "reference-based", unlike most other objects in R.
When a change is made to a `r ref("ParamSet")` object, for example by adding a parameter using the `$add()` function, all variables that point to this `r ref("ParamSet")` will contain the changed object.
To create an independent copy of a `r ref("ParamSet")`, the `$clone()` method needs to be used:

```{r technical-032}
library("paradox")

ps = ParamSet$new()
ps2 = ps
ps3 = ps$clone(deep = TRUE)
print(ps) # the same for ps2 and ps3
```

```{r technical-033}
ps$add(ParamLgl$new("a"))
```

```{r technical-034}
print(ps)  # ps was changed
print(ps2) # contains the same reference as ps
print(ps3) # is a "clone" of the old (empty) ps
```

### Defining a Parameter Space

#### Single Parameters

The basic building block for describing parameter spaces is the **`r ref("Param")`** class.
It represents a single parameter, which usually can take a single atomic value.
Consider, for example, trying to configure the `r ref_pkg("rpart")` package's `rpart.control` object.
It has various components (`minsplit`, `cp`, ...) that all take a single value, and that would all be represented by a different instance of a `r ref("Param")` object.

The `r ref("Param")` class has various subclasses that represent different value types:

* `r ref("ParamInt")`: Integer numbers
* `r ref("ParamDbl")`: Real numbers
* `r ref("ParamFct")`: String values from a set of possible values, similar to R `factor`s
* `r ref("ParamLgl")`: Truth values (`TRUE` / `FALSE`), as `logical`s in R
* `r ref("ParamUty")`: Parameter that can take any value

A particular instance of a parameter is created by calling the attached `$new()` function:

```{r technical-035}
library("paradox")
parA = ParamLgl$new(id = "A")
parB = ParamInt$new(id = "B", lower = 0, upper = 10, tags = c("tag1", "tag2"))
parC = ParamDbl$new(id = "C", lower = 0, upper = 4, special_vals = list(NULL))
parD = ParamFct$new(id = "D", levels = c("x", "y", "z"), default = "y")
parE = ParamUty$new(id = "E", custom_check = function(x) checkmate::checkFunction(x))
```

Every parameter must have:

* **id** - A name for the parameter within the parameter set
* **default** - A default value
* **special_vals** - A list of values that are accepted even if they do not conform to the type
* **tags** - Tags that can be used to organize parameters

The numeric (`Int` and `Dbl`) parameters furthermore allow for specification of a **lower** and **upper** bound.
Meanwhile, the `Fct` parameter must be given a vector of **levels** that define the possible states its parameter can take.
The `Uty` parameter can also have a **`custom_check`** function that must return `TRUE` when a value is acceptable and may return a `character(1)` error description otherwise.
The example above defines `parE` as a parameter that only accepts functions.

All values which are given to the constructor are then accessible from the object for inspection using `$`.
Although all these values can be changed for a parameter after construction, this can be a bad idea and should be avoided when possible.

Instead, a new parameter should be constructed.
Besides the possible values that can be given to a constructor, there are also the `$class`, `$nlevels`, `$is_bounded`, `$has_default`, `$storage_type`, `$is_number` and `$is_categ` slots that give information about a parameter.

A list of all slots can be found in `r ref("Param", "?Param")`.

```{r technical-036}
parB$lower
parA$levels
parE$class
```

It is also possible to get all information of a `r ref("Param")` as `data.table` by calling `r ref("as.data.table()")`.

```{r technical-037}
as.data.table(parA)
```

##### Type / Range Checking

A `r ref("Param")` object offers the possibility to check whether a value satisfies its condition, i.e. is of the right type, and also falls within the range of allowed values, using the `$test()`, `$check()`, and `$assert()` functions.
`test()` should be used within conditional checks and returns `TRUE` or `FALSE`, while `check()` returns an error description when a value does not conform to the parameter (and thus plays well with the `"checkmate::assert()"` function).
`assert()` will throw an error whenever a value does not fit.

```{r technical-038}
parA$test(FALSE)
parA$test("FALSE")
parA$check("FALSE")
```

Instead of testing single parameters, it is often more convenient to check a whole set of parameters using a `r ref("ParamSet")`.

#### Parameter Sets

The ordered collection of parameters is handled in a `r ref("ParamSet")`^[Although the name is suggestive of a "Set"-valued `r ref("Param")`, this is unrelated to the other objects that follow the `ParamXxx` naming scheme.].
It is initialized using the `$new()` function and optionally takes a list of `r ref("Param")`s as argument.
Parameters can also be added to the constructed `r ref("ParamSet")` using the `$add()` function.
It is even possible to add whole `r ref("ParamSet")`s to other `r ref("ParamSet")`s.

```{r technical-039}
ps = ParamSet$new(list(parA, parB))
ps$add(parC)
ps$add(ParamSet$new(list(parD, parE)))
print(ps)
```

The individual parameters can be accessed through the `$params` slot.
It is also possible to get information about all parameters in a vectorized fashion using mostly the same slots as for individual `r ref("Param")`s (i.e. `$class`, `$levels` etc.), see `?ParamSet` for details.

It is possible to reduce `r ref("ParamSet")`s using the **`$subset`** method.
Be aware that it modifies a ParamSet in-place, so a "clone" must be created first if the original `r ref("ParamSet")` should not be modified.

```{r technical-040}
psSmall = ps$clone()
psSmall$subset(c("A", "B", "C"))
print(psSmall)
```

Just as for `r ref("Param")`s, and much more useful, it is possible to get the `r ref("ParamSet")` as a `data.table` using `r ref("as.data.table()")`.
This makes it easy to subset parameters on certain conditions and aggregate information about them, using the variety of methods provided by `data.table`.

```{r technical-041}
as.data.table(ps)
```

##### Type / Range Checking

Similar to individual `r ref("Param")`s, the `r ref("ParamSet")` provides `$test()`, `$check()` and `$assert()` functions that allow for type and range checking of parameters.
Their argument must be a named list with values that are checked against the respective parameters.
It is possible to check only a subset of parameters.

```{r technical-042}
ps$check(list(A = TRUE, B = 0, E = identity))
ps$check(list(A = 1))
ps$check(list(Z = 1))
```

##### Values in a `r ref("ParamSet")`

Although a `r ref("ParamSet")` fundamentally represents a value space, it also has a slot `$values` that can contain a point within that space.
This is useful because many things that define a parameter space need similar operations (like parameter checking) that can be simplified.
The `$values` slot contains a named list that is always checked against parameter constraints.
When trying to set parameter values, e.g. for `r mlr3` `r ref("Learner")`s, it is the `$values` slot of its `$param_set` that needs to be used.

```{r technical-043}
ps$values = list(A = TRUE, B = 0)
ps$values$B = 1
print(ps$values)
```

The parameter constraints are automatically checked:

```{r technical-044, error = TRUE}
ps$values$B = 100
```

##### Dependencies

It is often the case that certain parameters are irrelevant or should not be given depending on values of other parameters.
An example would be a parameter that switches a certain algorithm feature (for example regularization) on or off, combined with another parameter that controls the behavior of that feature (e.g. a regularization parameter).
The second parameter would be said to *depend* on the first parameter having the value `TRUE`.

A dependency can be added using the `$add_dep` method, which takes both the ids of the "depender" and "dependee" parameters as well as a `Condition` object.
The `Condition` object represents the check to be performed on the "dependee".
Currently it can be created using `CondEqual$new()` and `CondAnyOf$new()`.
Multiple dependencies can be added, and parameters that depend on others can again be depended on, as long as no cyclic dependencies are introduced.

The consequence of dependencies are twofold:
For one, the `$check()`, `$test()` and `$assert()` tests will not accept the presence of a parameter if its dependency is not met.
Furthermore, when sampling or creating grid designs from a `r ref("ParamSet")`, the dependencies will be respected (see [Parameter Sampling](#parameter-sampling), in particular [Hierarchical Sampler](#hierarchical-sampler)).

The following example makes parameter `D` depend on parameter `A` being `FALSE`, and parameter `B` depend on parameter `D` being one of `"x"` or `"y"`.
This introduces an implicit dependency of `B` on `A` being `FALSE` as well, because `D` does not take any value if `A` is `TRUE`.

```{r technical-045}
ps$add_dep("D", "A", CondEqual$new(FALSE))
ps$add_dep("B", "D", CondAnyOf$new(c("x", "y")))
```

```{r technical-046}
ps$check(list(A = FALSE, D = "x", B = 1))          # OK: all dependencies met
ps$check(list(A = FALSE, D = "z", B = 1))          # B's dependency is not met
ps$check(list(A = FALSE, B = 1))                   # B's dependency is not met
ps$check(list(A = FALSE, D = "z"))                 # OK: B is absent
ps$check(list(A = TRUE))                           # OK: neither B nor D present
ps$check(list(A = TRUE, D = "x", B = 1))           # D's dependency is not met
ps$check(list(A = TRUE, B = 1))                    # B's dependency is not met
```

Internally, the dependencies are represented as a `data.table`, which can be accessed listed in the **`$deps`** slot.
This `data.table` can even be mutated, to e.g. remove dependencies.
There are no sanity checks done when the `$deps` slot is changed this way.
Therefore it is advised to be cautious.

```{r technical-047}
ps$deps
```

#### Vector Parameters

Unlike in the old `r ref_pkg("ParamHelpers")` package, there are no more vectorial parameters in `r ref_pkg("paradox")`.
Instead, it is now possible to create multiple copies of a single parameter using the `$rep` function.
This creates a `r ref("ParamSet")` consisting of multiple copies of the parameter, which can then (optionally) be added to another `r ref("ParamSet")`.

```{r technical-048}
ps2d = ParamDbl$new("x", lower = 0, upper = 1)$rep(2)
print(ps2d)
```

```{r technical-049}
ps$add(ps2d)
print(ps)
```

It is also possible to use a `r ref("ParamUty")` to accept vectorial parameters, which also works for parameters of variable length.
A `r ref("ParamSet")` containing a `r ref("ParamUty")` can be used for parameter checking, but not for [sampling](#parameter-sampling).
To sample values for a method that needs a vectorial parameter, it is advised to use a [parameter transformation](#transformation-between-types) function that creates a vector from atomic values.

Assembling a vector from repeated parameters is aided by the parameter's `$tags`: Parameters that were generated by the `$rep()` command automatically get tagged as belonging to a group of repeated parameters.

```{r technical-050}
ps$tags
```

### Parameter Sampling

It is often useful to have a list of possible parameter values that can be systematically iterated through, for example to find parameter values for which an algorithm performs particularly well (tuning).
`r ref_pkg("paradox")` offers a variety of functions that allow creating evenly-spaced parameter values in a "grid" design as well as random sampling.
In the latter case, it is possible to influence the sampling distribution in more or less fine detail.

A point to always keep in mind while sampling is that only numerical and factorial parameters that are bounded can be sampled from, i.e. not `r ref("ParamUty")`.
Furthermore, for most samplers `r ref("ParamInt")` and `r ref("ParamDbl")` must have finite lower and upper bounds.

#### Parameter Designs

Functions that sample the parameter space fundamentally return an object of the `r ref("Design")` class.
These objects contain the sampled data as a `data.table` under the `$data` slot, and also offer conversion to a list of parameter-values using the **`$transpose()`** function.

#### Grid Design

The `r ref("generate_design_grid()")` function is used to create grid designs that contain all combinations of parameter values: All possible values for `r ref("ParamLgl")` and `r ref("ParamFct")`, and values with a given resolution for `r ref("ParamInt")` and `r ref("ParamDbl")`.
The resolution can be given for all numeric parameters, or for specific named parameters through the `param_resolutions` parameter.

```{r technical-051}
design = generate_design_grid(psSmall, 2)
print(design)
```

```{r technical-052}
generate_design_grid(psSmall, param_resolutions = c(B = 1, C = 2))
```

#### Random Sampling

`r ref_pkg("paradox")` offers different methods for random sampling, which vary in the degree to which they can be configured.
The easiest way to get a uniformly random sample of parameters is `r ref("generate_design_random()")`.
It is also possible to create "[latin hypercube](https://en.wikipedia.org/wiki/Latin_hypercube_sampling)" sampled parameter values using `r ref("generate_design_lhs()")`, which utilizes the `r ref_pkg("lhs")` package.
LHS-sampling creates low-discrepancy sampled values that cover the parameter space more evenly than purely random values.

```{r technical-053}
pvrand = generate_design_random(ps2d, 500)
pvlhs = generate_design_lhs(ps2d, 500)
```

```{r technical-054, echo = FALSE, out.width="45%", fig.show = "hold", fig.width = 4, fig.height = 4}
#| layout: [[40, 40]]
par(mar=c(4, 4, 2, 1))
plot(pvrand$data, main = "'random' design", xlim = c(0, 1), ylim=c(0, 1))
plot(pvlhs$data, main = "'lhs' design", xlim = c(0, 1), ylim=c(0, 1))
```

#### Generalized Sampling: The `r ref("Sampler")` Class

It may sometimes be desirable to configure parameter sampling in more detail.
`r ref_pkg("paradox")` uses the `r ref("Sampler")` abstract base class for sampling, which has many different sub-classes that can be parameterized and combined to control the sampling process.
It is even possible to create further sub-classes of the `r ref("Sampler")` class (or of any of *its* subclasses) for even more possibilities.

Every `r ref("Sampler")` object has a `r ref("sample()")` function, which takes one argument, the number of instances to sample, and returns a `r ref("Design")` object.

##### 1D-Samplers

There is a variety of samplers that sample values for a single parameter.
These are `r ref("Sampler1DUnif")` (uniform sampling), `r ref("Sampler1DCateg")` (sampling for categorical parameters), `r ref("Sampler1DNormal")` (normally distributed sampling, truncated at parameter bounds), and `r ref("Sampler1DRfun")` (arbitrary 1D sampling, given a random-function).
These are initialized with a single `r ref("Param")`, and can then be used to sample values.

```{r technical-055}
sampA = Sampler1DCateg$new(parA)
sampA$sample(5)
```

##### Hierarchical Sampler

The `r ref("SamplerHierarchical")` sampler is an auxiliary sampler that combines many 1D-Samplers to get a combined distribution.
Its name "hierarchical" implies that it is able to respect parameter dependencies.
This suggests that parameters only get sampled when their dependencies are met.

The following example shows how this works: The `Int` parameter `B` depends on the `Lgl` parameter `A` being `TRUE`.
`A` is sampled to be `TRUE` in about half the cases, in which case `B` takes a value between 0 and 10.
In the cases where `A` is `FALSE`, `B` is set to `NA`.

```{r technical-056}
psSmall$add_dep("B", "A", CondEqual$new(TRUE))
sampH = SamplerHierarchical$new(psSmall,
  list(Sampler1DCateg$new(parA),
    Sampler1DUnif$new(parB),
    Sampler1DUnif$new(parC))
)
sampled = sampH$sample(1000)
table(sampled$data[, c("A", "B")], useNA = "ifany")
```

##### Joint Sampler

Another way of combining samplers is the `r ref("SamplerJointIndep")`.
`r ref("SamplerJointIndep")` also makes it possible to combine `r ref("Sampler")`s that are not 1D.
However, `r ref("SamplerJointIndep")` currently can not handle `r ref("ParamSet")`s with dependencies.

```{r technical-057}
sampJ = SamplerJointIndep$new(
  list(Sampler1DUnif$new(ParamDbl$new("x", 0, 1)),
    Sampler1DUnif$new(ParamDbl$new("y", 0, 1)))
)
sampJ$sample(5)
```

##### SamplerUnif

The `r ref("Sampler")` used in `r ref("generate_design_random()")` is the `r ref("SamplerUnif")` sampler, which corresponds to a `HierarchicalSampler` of `r ref("Sampler1DUnif")` for all parameters.

### Parameter Transformation

While the different `r ref("Sampler")`s allow for a wide specification of parameter distributions, there are cases where the simplest way of getting a desired distribution is to sample parameters from a simple distribution (such as the uniform distribution) and then transform them.
This can be done by assigning a function to the `$trafo` slot of a `r ref("ParamSet")`.
The `$trafo` function is called with two parameters:

* The list of parameter values to be transformed as `x`
* The `r ref("ParamSet")` itself as `param_set`

The `$trafo` function must return a list of transformed parameter values.

The transformation is performed when calling the `$transpose` function of the `r ref("Design")` object returned by a `r ref("Sampler")` with the `trafo` ParamSet to `TRUE` (the default).
The following, for example, creates a parameter that is exponentially distributed:

```{r technical-058}
psexp = ParamSet$new(list(ParamDbl$new("par", 0, 1)))
psexp$trafo = function(x, param_set) {
  x$par = -log(x$par)
  x
}
design = generate_design_random(psexp, 2)
print(design)
design$transpose()  # trafo is TRUE
```

Compare this to `$transpose()` without transformation:

```{r technical-059}
design$transpose(trafo = FALSE)
```

#### Transformation between Types

Usually the design created with one `r ref("ParamSet")` is then used to configure other objects that themselves have a `r ref("ParamSet")` which defines the values they take.
The `r ref("ParamSet")`s which can be used for random sampling, however, are restricted in some ways:
They must have finite bounds, and they may not contain "untyped" (`r ref("ParamUty")`) parameters.
`$trafo` provides the glue for these situations.
There is relatively little constraint on the trafo function's return value, so it is possible to return values that have different bounds or even types than the original `r ref("ParamSet")`.
It is even possible to remove some parameters and add new ones.

Suppose, for example, that a certain method requires a *function* as a parameter.
Let's say a function that summarizes its data in a certain way.
The user can pass functions like `median()` or `mean()`, but could also pass quantiles or something completely different.
This method would probably use the following `r ref("ParamSet")`:

```{r technical-060}
methodPS = ParamSet$new(
  list(
    ParamUty$new("fun",
      custom_check = function(x) checkmate::checkFunction(x, nargs = 1))
  )
)
print(methodPS)
```

If one wanted to sample this method, using one of four functions, a way to do this would be:

```{r technical-061}
samplingPS = ParamSet$new(
  list(
    ParamFct$new("fun", c("mean", "median", "min", "max"))
  )
)

samplingPS$trafo = function(x, param_set) {
  # x$fun is a `character(1)`,
  # in particular one of 'mean', 'median', 'min', 'max'.
  # We want to turn it into a function!
  x$fun = get(x$fun, mode = "function")
  x
}
```

```{r technical-062}
design = generate_design_random(samplingPS, 2)
print(design)
```

Note that the `r ref("Design")` only contains the column "`fun`" as a `character` column.
To get a single value as a *function*, the `$transpose` function is used.

```{r technical-063}
xvals = design$transpose()
print(xvals[[1]])
```

We can now check that it fits the requirements set by `methodPS`, and that `fun` it is in fact a function:

```{r technical-064}
methodPS$check(xvals[[1]])
xvals[[1]]$fun(1:10)
```

Imagine now that a different kind of parametrization of the function is desired:
The user wants to give a function that selects a certain quantile, where the quantile is set by a parameter.
In that case the `$transpose` function could generate a function in a different way.
For interpretability, the parameter is called "`quantile`" before transformation, and the "`fun`" parameter is generated on the fly.

```{r technical-065}
samplingPS2 = ParamSet$new(
  list(
    ParamDbl$new("quantile", 0, 1)
  )
)

samplingPS2$trafo = function(x, param_set) {
  # x$quantile is a `numeric(1)` between 0 and 1.
  # We want to turn it into a function!
  list(fun = function(input) quantile(input, x$quantile))
}
```

```{r technical-066}
design = generate_design_random(samplingPS2, 2)
print(design)
```

The `r ref("Design")` now contains the column "`quantile`" that will be used by the `$transpose` function to create the `fun` parameter.
We also check that it fits the requirement set by `methodPS`, and that it is a function.

```{r technical-067}
xvals = design$transpose()
print(xvals[[1]])
methodPS$check(xvals[[1]])
xvals[[1]]$fun(1:10)
```

### Defining a Tuning Spaces {#sec-tuning-space}

When running an optimization, it is important to inform the tuning algorithm about what hyperparameters are valid.
Here the names, types, and valid ranges of each hyperparameter are important.
All this information is communicated with objects of the class `r ref("ParamSet")`, which is defined in `r ref_pkg("paradox")`.
While it is possible to create `r ref("ParamSet")`-objects using its `$new`-constructor, it is much shorter and readable to use the `r ref("ps")`-shortcut, which will be presented here.
For an in-depth description of `r ref_pkg("paradox")` and its classes, see the [`r ref_pkg("paradox")` chapter](#paradox).

Note, that `r ref("ParamSet")` objects exist in two contexts.
First, `r ref("ParamSet")`-objects are used to define the space of valid parameter settings for a learner (and other objects).
Second, they are used to define a search space for tuning.
We are mainly interested in the latter.
For example we can consider the `minsplit` parameter of the `r ref("mlr_learners_classif.rpart", "classif.rpart Learner")`.
The `r ref("ParamSet")` associated with the learner has a lower but *no* upper bound.
However, for tuning the value, a lower *and* upper bound must be given because tuning search spaces need to be bounded.
For `r ref("Learner")` or `r ref("PipeOp")` objects, typically "unbounded" `r ref("ParamSet", text = "ParamSets")` are used.
Here, however, we will mainly focus on creating "bounded" `r ref("ParamSet", text = "ParamSets")` that can be used for tuning.
See the [in-depth `r ref_pkg("paradox")` chapter](#paradox) for more details on using `r ref("ParamSet", text = "ParamSets")` to  define parameter ranges for use-cases besides tuning.

#### Creating `r ref("ParamSet")`s

An empty `"ParamSet")` -- not yet very useful -- can be constructed using just the `"ps")` call:

```{r optimization-027}
search_space = ps()
print(search_space)
```

`r ref("ps")` takes named `r ref("Domain")` arguments that are turned into parameters.
A possible search space for the `"classif.svm"` learner could for example be:

```{r optimization-028}
search_space = ps(
  cost = p_dbl(lower = 0.1, upper = 10),
  kernel = p_fct(levels = c("polynomial", "radial"))
)
print(search_space)
```

There are five domain constructors that produce a parameters when given to `r ref("ps")`:

| Constructor               | Description                          | Is bounded?                        | Underlying Class    |
| :-----------------------: | :----------------------------------: | :--------------------------------: | :-----------------: |
| `r ref("p_dbl")`                   | Real valued parameter ("double")     | When `upper` and `lower` are given | `r ref("ParamDbl")` |
| `r ref("p_int")`                  | Integer parameter                    | When `upper` and `lower` are given | `r ref("ParamInt")` |
| `r ref("p_fct")`                   | Discrete valued parameter ("factor") | Always                             | `r ref("ParamFct")` |
| `r ref("p_lgl")`                 | Logical / Boolean parameter          | Always                             | `r ref("ParamLgl")` |
| `r ref("p_uty")`                   | Untyped parameter                    | Never                              | `r ref("ParamUty")` |

These domain constructors each take some of the following arguments:

* **`lower`**, **`upper`**: lower and upper bound of numerical parameters (`r ref("p_dbl")` and `r ref("p_int")`). These need to be given to get bounded parameter spaces valid for tuning.
* **`levels`**: Allowed categorical values for `p_fct` parameters.
  Required argument for `r ref("p_fct")`.
  See [below](#autolevel) for more details on this parameter.
* **`trafo`**: transformation function, see [below](#searchspace-trafo).
* **`depends`**: dependencies, see [below](#searchspace-depends).
* **`tags`**: Further information about a parameter, used for example by the [`hyperband`](#hyperband) tuner.
* **`default`**: Value corresponding to default behavior when the parameter is not given.
  Not used for tuning search spaces.
* **`special_vals`**: Valid values besides the normally accepted values for a parameter.
  Not used for tuning search spaces.
* **`custom_check`**: Function that checks whether a value given to `r ref("p_uty")` is valid.
  Not used for tuning search spaces.

The `lower` and `upper` parameters are always in the first and second position respectively, except for `r ref("p_fct")` where `levels` is in the first position.
It is preferred to omit the labels (ex: upper = 0.1 becomes just 0.1). This way of defining a `r ref("ParamSet")` is more concise than the equivalent definition above.
Preferred:

```{r optimization-029}
search_space = ps(cost = p_dbl(0.1, 10), kernel = p_fct(c("polynomial", "radial")))
```

#### Transformations (`trafo`) {#sec-searchspace-trafo}

We can use the `r ref_pkg("paradox")` function `r ref("generate_design_grid")` to look at the values that would be evaluated by grid search.
(We are using `r ref("rbindlist()")` here because the result of `$transpose()` is a list that is harder to read.
If we didn't use `$transpose()`, on the other hand, the transformations that we investigate here are not applied.) In `generate_design_grid(search_space, 3)`, `search_space` is the `r ref("ParamSet")` argument and 3 is the specified resolution in the parameter space.
The resolution for categorical parameters is ignored; these parameters always produce a grid over all of their valid levels.
For numerical parameters the endpoints of the params are always included in the grid, so if there were 3 levels for the kernel instead of 2 there would be 9 rows, or if the resolution was 4 in this example there would be 8 rows in the resulting table.

```{r optimization-030}
library("data.table")
rbindlist(generate_design_grid(search_space, 3)$transpose())
```

We notice that the `cost` parameter is taken on a linear scale.
We assume, however, that the difference of cost between `0.1` and `1` should have a similar effect as the difference between `1` and `10`.
Therefore it makes more sense to tune it on a *logarithmic scale*.
This is done by using a **transformation** (`trafo`).
This is a function that is applied to a parameter after it has been sampled by the tuner.
We can tune `cost` on a logarithmic scale by sampling on the linear scale `[-1, 1]` and computing `10^x` from that value.
```{r optimization-031}
search_space = ps(
  cost = p_dbl(-1, 1, trafo = function(x) 10^x),
  kernel = p_fct(c("polynomial", "radial"))
)
rbindlist(generate_design_grid(search_space, 3)$transpose())
```

It is even possible to attach another transformation to the `r ref("ParamSet")` as a whole that gets executed after individual parameter's transformations were performed.
It is given through the `.extra_trafo` argument and should be a function with parameters `x` and `param_set` that takes a list of parameter values in `x` and returns a modified list.
This transformation can access all parameter values of an evaluation and modify them with interactions.
It is even possible to add or remove parameters.
(The following is a bit of a silly example.)

```{r optimization-032}
search_space = ps(
  cost = p_dbl(-1, 1, trafo = function(x) 10^x),
  kernel = p_fct(c("polynomial", "radial")),
  .extra_trafo = function(x, param_set) {
    if (x$kernel == "polynomial") {
      x$cost = x$cost * 2
    }
    x
  }
)
rbindlist(generate_design_grid(search_space, 3)$transpose())
```

The available types of search space parameters are limited: continuous, integer, discrete, and logical scalars.
There are many machine learning algorithms, however, that take parameters of other types, for example vectors or functions.
These can not be defined in a search space `r ref("ParamSet")`, and they are often given as `r ref("ParamUty")` in the `r ref("Learner")`'s `r ref("ParamSet")`.
When trying to tune over these hyperparameters, it is necessary to perform a Transformation that changes the type of a parameter.

An example is the `class.weights` parameter of the [Support Vector Machine](https://machinelearningmastery.com/cost-sensitive-svm-for-imbalanced-classification/) (SVM), which takes a named vector of class weights with one entry for each target class.
The trafo that would tune `class.weights` for the `r ref("mlr_tasks_spam")`, `'tsk("spam")` dataset could be:

```{r optimization-033}
search_space = ps(
  class.weights = p_dbl(0.1, 0.9, trafo = function(x) c(spam = x, nonspam = 1 - x))
)
generate_design_grid(search_space, 3)$transpose()
```

(We are omitting `r ref("rbindlist()")` in this example because it breaks the vector valued return elements.)

### Automatic Factor Level Transformation {#sec-autolevel}

A common use-case is the necessity to specify a list of values that should all be tried (or sampled from).
It may be the case that a hyperparameter accepts function objects as values and a certain list of functions should be tried.
Or it may be that a choice of special numeric values should be tried.
For this, the `r ref("p_fct")` constructor's `level` argument may be a value that is not a `character` vector, but something else.
If, for example, only the values `0.1`, `3`, and `10` should be tried for the `cost` parameter, even when doing random search, then the following search space would achieve that:

```{r optimization-034}
search_space = ps(
  cost = p_fct(c(0.1, 3, 10)),
  kernel = p_fct(c("polynomial", "radial"))
)
rbindlist(generate_design_grid(search_space, 3)$transpose())
```

This is equivalent to the following:
```{r optimization-035}
search_space = ps(
  cost = p_fct(c("0.1", "3", "10"),
    trafo = function(x) list(`0.1` = 0.1, `3` = 3, `10` = 10)[[x]]),
  kernel = p_fct(c("polynomial", "radial"))
)
rbindlist(generate_design_grid(search_space, 3)$transpose())
```

Note: Though the resolution is 3 here, in this case it doesn't matter because both `cost` and `kernel` are factors (the resolution for categorical variables is ignored, these parameters always produce a grid over all their valid levels).

This may seem silly, but makes sense when considering that factorial tuning parameters are always `character` values:

```{r optimization-036}
search_space = ps(
  cost = p_fct(c(0.1, 3, 10)),
  kernel = p_fct(c("polynomial", "radial"))
)
typeof(search_space$params$cost$levels)
```

Be aware that this results in an "unordered" hyperparameter, however.
Tuning algorithms that make use of ordering information of parameters, like genetic algorithms or model based optimization, will perform worse when this is done.
For these algorithms, it may make more sense to define a `r ref("p_dbl")` or `r ref("p_int")` with a more fitting trafo.

The `class.weights` case from above can also be implemented like this, if there are only a few candidates of `class.weights` vectors that should be tried.
Note that the `levels` argument of `r ref("p_fct")` must be named if there is no easy way for `as.character()` to create names:

```{r optimization-037}
search_space = ps(
  class.weights = p_fct(
    list(
      candidate_a = c(spam = 0.5, nonspam = 0.5),
      candidate_b = c(spam = 0.3, nonspam = 0.7)
    )
  )
)
generate_design_grid(search_space)$transpose()
```

#### Parameter Dependencies (`depends`) {#sec-searchspace-depends}

Some parameters are only relevant when another parameter has a certain value, or one of several values.
The [Support Vector Machine](https://machinelearningmastery.com/cost-sensitive-svm-for-imbalanced-classification/) (SVM), for example, has the `degree` parameter that is only valid when `kernel` is `"polynomial"`.
This can be specified using the `depends` argument.
It is an expression that must involve other parameters and be of the form `<param> == <scalar>`, `<param> %in% <vector>`, or multiple of these chained by `&&`.
To tune the `degree` parameter, one would need to do the following:

```{r optimization-038}
search_space = ps(
  cost = p_dbl(-1, 1, trafo = function(x) 10^x),
  kernel = p_fct(c("polynomial", "radial")),
  degree = p_int(1, 3, depends = kernel == "polynomial")
)
rbindlist(generate_design_grid(search_space, 3)$transpose(), fill = TRUE)
```

#### Creating Tuning ParamSets from other ParamSets {#sec-tune-token}

Having to define a tuning `r ref("ParamSet")` for a `r ref("Learner")` that already has parameter set information may seem unnecessarily tedious, and there is indeed a way to create tuning `r ref("ParamSet", "ParamSets")` from a `r ref("Learner")`'s `r ref("ParamSet")`, making use of as much information as already available.

This is done by setting values of a `r ref("Learner")`'s `r ref("ParamSet")` to so-called `r ref("TuneToken")`s, constructed with a `r ref("to_tune")` call.
This can be done in the same way that other hyperparameters are set to specific values.
It can be understood as the hyperparameters being tagged for later tuning.
The resulting `r ref("ParamSet")` used for tuning can be retrieved using the `$search_space()` method.

```{r optimization-039}
learner = lrn("classif.svm")
learner$param_set$values$kernel = "polynomial" # for example
learner$param_set$values$degree = to_tune(lower = 1, upper = 3)

print(learner$param_set$search_space())

rbindlist(generate_design_grid(
  learner$param_set$search_space(), 3)$transpose()
)
```

It is possible to omit `lower` here, because it can be inferred from the lower bound of the `degree` parameter itself.
For other parameters, that are already bounded, it is possible to not give any bounds at all, because their ranges are already bounded.
An example is the logical `shrinking` hyperparameter:
```{r optimization-040}
learner$param_set$values$shrinking = to_tune()

print(learner$param_set$search_space())

rbindlist(generate_design_grid(
  learner$param_set$search_space(), 3)$transpose()
)
```

`"to_tune")` can also be constructed with a `r ref("Domain")` object, i.e. something constructed with a `p_***` call.
This way it is possible to tune continuous parameters with discrete values, or to give trafos or dependencies.
One could, for example, tune the `cost` as above on three given special values, and introduce a dependency of `shrinking` on it.
Notice that a short form for `to_tune(<levels>)` is a short form of `to_tune(p_fct(<levels>))`.

:::{.callout-note}
When introducing the dependency, we need to use the `degree` value from *before* the implicit trafo, which is the name or `as.character()` of the respective value, here `"val2"`!
:::

```{r optimization-041}
learner$param_set$values$type = "C-classification" # needs to be set because of a bug in paradox
learner$param_set$values$cost = to_tune(c(val1 = 0.3, val2 = 0.7))
learner$param_set$values$shrinking = to_tune(p_lgl(depends = cost == "val2"))

print(learner$param_set$search_space())

rbindlist(generate_design_grid(learner$param_set$search_space(), 3)$transpose(), fill = TRUE)
```

The `"search_space()` picks up dependencies from the underlying `r ref("ParamSet")` automatically.
So if the `kernel` is tuned, then `degree` automatically gets the dependency on it, without us having to specify that.
(Here we reset `cost` and `shrinking` to `NULL` for the sake of clarity of the generated output.)

```{r optimization-042}
learner$param_set$values$cost = NULL
learner$param_set$values$shrinking = NULL
learner$param_set$values$kernel = to_tune(c("polynomial", "radial"))

print(learner$param_set$search_space())

rbindlist(generate_design_grid(learner$param_set$search_space(), 3)$transpose(), fill = TRUE)
```

It is even possible to define whole `r ref("ParamSet")`s that get tuned over for a single parameter.
This may be especially useful for vector hyperparameters that should be searched along multiple dimensions.
This `r ref("ParamSet")` must, however, have an `.extra_trafo` that returns a list with a single element, because it corresponds to a single hyperparameter that is being tuned.
Suppose the `class.weights` hyperparameter should be tuned along two dimensions:

```{r optimization-043}
learner$param_set$values$class.weights = to_tune(
  ps(spam = p_dbl(0.1, 0.9), nonspam = p_dbl(0.1, 0.9),
    .extra_trafo = function(x, param_set) list(c(spam = x$spam, nonspam = x$nonspam))
))
head(generate_design_grid(learner$param_set$search_space(), 3)$transpose(), 3)
```


## Logging {#sec-logging}

We use the `r ref_pkg("lgr")` package for logging and progress output.

### Changing `r mlr3` logging levels

To change the setting for `r mlr3` for the current session, you need to retrieve the logger (which is a `r ref_pkg("R6")` object) from `r ref_pkg("lgr")`, and then change the threshold of the like this:

```{r technical-068, eval = FALSE}
requireNamespace("lgr")

logger = lgr::get_logger("mlr3")
logger$set_threshold("<level>")
```

The default log level is `"info"`.
All available levels can be listed as follows:

```{r technical-069}
getOption("lgr.log_levels")
```

To increase verbosity, set the log level to a higher value, e.g. to `"debug"` with:

```{r technical-070, eval = FALSE}
lgr::get_logger("mlr3")$set_threshold("debug")
```

To reduce the verbosity, reduce the log level to warn:

```{r technical-071, eval = FALSE}
lgr::get_logger("mlr3")$set_threshold("warn")
```

`r ref_pkg("lgr")` comes with a global option called `"lgr.default_threshold"` which can be set via `options()` to make your choice permanent across sessions.

Also note that the optimization packages such as `r mlr3tuning`  `r mlr3fselect` use the logger of their base package `r ref_pkg("bbotk")`.
To disable the output from `r mlr3`, but keep the output from `r mlr3tuning`, reduce the verbosity for the logger `r mlr3`
and optionally change the logger `r ref_pkg("bbotk")` to the desired level.

```{r technical-072, eval=FALSE}
lgr::get_logger("mlr3")$set_threshold("warn")
lgr::get_logger("bbotk")$set_threshold("info")
```

### Redirecting output

Redirecting output is already extensively covered in the documentation and vignette of `r ref_pkg("lgr")`.
Here is just a short example that adds an additional appender to log events into a temporary file in [JSON](https://en.wikipedia.org/wiki/JSON) format:

```{r technical-073, eval = knitr::is_html_output()}
tf = tempfile("mlr3log_", fileext = ".json")

# get the logger as R6 object
logger = lgr::get_logger("mlr")

# add Json appender
logger$add_appender(lgr::AppenderJson$new(tf), name = "json")

# signal a warning
logger$warn("this is a warning from mlr3")

# print the contents of the file
cat(readLines(tf))

# remove the appender again
logger$remove_appender("json")
```

### Immediate Log Feedback

`r mlr3` uses the [future](#parallelization) package and [encapsulation](#encapsulation) to make evaluations fast, stable, and reproducible.
However, this may lead to logs being delayed, out of order, or, in case of some errors, not present at all.

When it is necessary to have immediate access to log messages, for example to investigate problems, one may therefore choose to disable `r ref_pkg("future")` and encapsulation.
This can be done by enabling the debug mode using `options(mlr.debug = TRUE)`; the `$encapsulate` slot of learners should also be set to `"none"` (default) or `"evaluate"`, but not `"callr"`.
This should only be done to investigate problems, however, and not for production use, because

1. this disables parallelization, and
2. this leads to different RNG behavior and therefore to results that are not reproducible when the debug mode is set.
