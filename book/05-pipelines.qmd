# Pipelines {#pipelines}

```{r 05-pipelines-001, echo = FALSE, message = FALSE}
library("data.table")
library("mlr3")
library("mlr3book")
requireNamespace("bbotk")

lgr::get_logger("mlr3")$set_threshold("warn")
lgr::get_logger("bbotk")$set_threshold("warn")

options(
    datatable.print.nrows = 25,
    datatable.print.class = FALSE,
    datatable.print.keys = FALSE,
    datatable.print.trunc.cols = TRUE,

    knitr.graphics.auto_pdf = TRUE,
    cache = TRUE,
    cache.lazy = FALSE
)

set.seed(123)
```

```{r 05-pipelines-002, include = FALSE}
library(mlr3pipelines)
```

`r mlr3book::mlr_pkg("mlr3pipelines")` [@mlr3pipelines] is a dataflow programming toolkit.
This chapter focuses on the applicant's side of the package.
A more in-depth and technically oriented guide can be found in the [In-depth look into mlr3pipelines](#in-depth-pipelines) chapter.

Machine learning workflows can be written as directed “Graphs”/"Pipelines" that represent data flows between preprocessing, model fitting, and ensemble learning units in an expressive and intuitive language.
We will most often use the term "Graph" in this manual but it can interchangeably be used  with "pipeline" or "workflow".

Below you can examine an example for such a graph:

```{r 05-pipelines-003, echo=FALSE, fig.align='center', out.width="98%"}
knitr::include_graphics("images/single_pipe.svg")
```

Single computational steps can be represented as so-called PipeOps, which can then be connected with directed edges in a Graph.
The scope of `r mlr3book::mlr_pkg("mlr3pipelines")` is still growing.
Currently supported features are:

* Data manipulation and preprocessing operations, e.g. PCA, feature filtering, imputation
* Task subsampling for speed and outcome class imbalance handling
* `r mlr3book::mlr_pkg("mlr3")` Learner operations for prediction and stacking
* Ensemble methods and aggregation of predictions

Additionally, we implement several meta operators that can be used to construct powerful pipelines:

* Simultaneous path branching (data going both ways)
* Alternative path branching (data going one specific way, controlled by hyperparameters)

An extensive introduction to creating custom **PipeOps** (PO's) can be found in the [technical introduction](#extending-pipeops).

Using methods from `r mlr3book::mlr_pkg("mlr3tuning")`, it is even possible to simultaneously optimize parameters of multiple processing units.

A predecessor to this package is the `r mlr3book::cran_pkg("mlrCPO")` package, which works with `r mlr3book::cran_pkg("mlr")` 2.x.
Other packages that provide, to varying degree, some preprocessing functionality or machine learning domain specific language, are:

* the `r mlr3book::cran_pkg("caret")` package and the related `r mlr3book::cran_pkg("recipes")`  project
* the `r mlr3book::cran_pkg("dplyr")` package

An example for a Pipeline that can be constructed using `r mlr3book::mlr_pkg("mlr3pipelines")` is depicted below:

```{r 05-pipelines-004, echo = FALSE, width = 10, height = 10, eval = TRUE, message=FALSE}
# This just produces a plot, not visible to the user.
library("mlr3pipelines")

graph = po("branch", c("nop", "pca", "scale")) %>>%
  gunion(list(
    po("nop", id = "null1"),
    po("pca"),
    po("scale")
  ))
gr = graph %>>%
  po("unbranch", c("nop", "pca", "scale")) %>>%
  po("learner", lrn("classif.rpart"))

gr$plot(html = FALSE)
```

## The Building Blocks: PipeOps {#pipe-pipeops}

```{r 05-pipelines-005, include = FALSE}
library(mlr3pipelines)
```

The building blocks of `r mlr3book::mlr_pkg("mlr3pipelines")` are **PipeOp**-objects (PO).
They can be constructed directly using `PipeOp<NAME>$new()`, but the recommended way is to retrieve them from the `r ref("mlr_pipeops")` dictionary:

```{r 05-pipelines-006}
library("mlr3pipelines")
as.data.table(mlr_pipeops)
```

Single POs can be created using the dictionary:

```{r 05-pipelines-007}
pca = mlr_pipeops$get("pca")
```

or using **syntactic sugar** `po(<name>)`:

```{r 05-pipelines-008, eval = FALSE}
pca = po("pca")
```

Some POs require additional arguments for construction:

```{r 05-pipelines-009, eval = FALSE}
learner = po("learner")

# Error in as_learner(learner) : argument "learner" is missing, with no default argument "learner" is missing, with no default
```

```{r 05-pipelines-010}
learner = mlr_pipeops$get("learner", lrn("classif.rpart"))
```

or in short `po("learner", lrn("classif.rpart"))`.

Hyperparameters of POs can be set through the `param_vals` argument.
Here we set the fraction of features for a filter:

```{r 05-pipelines-011}
filter = po("filter",
  filter = mlr3filters::flt("variance"),
  param_vals = list(filter.frac = 0.5))
```

or in short notation:

```{r 05-pipelines-012, eval = FALSE}
po("filter", mlr3filters::flt("variance"), filter.frac = 0.5)
```

The figure below shows an exemplary `r ref("PipeOp")`.
It takes an input, transforms it during `.$train` and `.$predict` and returns data:

```{r 05-pipelines-013, echo=FALSE}
knitr::include_graphics("images/po_viz.png")
```

## The Pipeline Operator: `%>>%` {#pipe-operator}

```{r 05-pipelines-014, include = FALSE}
library(mlr3pipelines)
```

It is possible to create intricate `Graphs` with edges going all over the place (as long as no loops are introduced).
Irrespective, there is usually a clear direction of flow between "layers" in the `r ref("Graph")`.
It is therefore convenient to build up a `r ref("Graph")` from layers.

This can be done using the **`%>>%`** ("double-arrow") operator.
It takes either a `r ref("PipeOp")` or a `r ref("Graph")` on each of its sides and connects all of the outputs of its left-hand side to one of the inputs each of its right-hand side.
The number of inputs therefore must match the number of outputs.

```{r 05-pipelines-015, fig.align = "center"}
library("magrittr")

gr = po("scale") %>>% po("pca")
gr$plot(html = FALSE)
```

## Nodes, Edges and Graphs {#pipe-nodes-edges-graphs}

```{r 05-pipelines-016, include = FALSE}
library(mlr3pipelines)
```

POs are combined into `r ref("Graph")`s.

POs are identified by their `$id`.
Note that the operations all modify the object in-place and return the object itself.
Therefore, multiple modifications can be chained.

For this example we use the `pca` PO defined above and a new PO named "mutate".
The latter creates a new feature from existing variables.
Additionally, we use the filter PO again.

```{r 05-pipelines-017}
mutate = po("mutate")

filter = po("filter",
  filter = mlr3filters::flt("variance"),
  param_vals = list(filter.frac = 0.5))
```
The recommended way to construct a graph is to use the `%>>%` operator to chain POs or `r ref("Graph")`s.

```{r 05-pipelines-018}
graph = mutate %>>% filter
```

To illustrate how this sugar operator works under the surface we will include an example of the manual way (= hard way) to construct a `r ref("Graph")`.
This is done by creating an empty graph first.
Then one fills the empty graph with POs, and connects edges between the POs.
Conceptually, this may look like this:

```{r 05-pipelines-019, echo=FALSE}
knitr::include_graphics("images/po_nodes.svg")
```

```{r 05-pipelines-020}
graph = Graph$new()$
  add_pipeop(mutate)$
  add_pipeop(filter)$
  add_edge("mutate", "variance") # add connection mutate -> filter
```

The constructed `r ref("Graph")`  can be inspected using its `$plot()` function:

```{r 05-pipelines-021}
graph$plot()
```

**Chaining multiple POs of the same kind**

If multiple POs of the same kind should be chained, it is necessary to change the `id` to avoid name clashes.
This can be done by either accessing the `$id` slot or during construction:

```{r 05-pipelines-022, error = TRUE}
graph$add_pipeop(po("pca"))
```

```{r 05-pipelines-023}
graph$add_pipeop(po("pca", id = "pca2"))
```

```{r 05-pipelines-024}
graph$plot()
```

## Modeling {#pipe-modeling}

```{r 05-pipelines-025, include = FALSE}
library(mlr3pipelines)
```

The main purpose of a `r ref("Graph")` is to build combined preprocessing and model fitting pipelines that can be used as `r mlr3book::mlr_pkg("mlr3")` `r ref("Learner")`.

Conceptually, the process may be summarized as follows:

```{r 05-pipelines-026, echo=FALSE }
knitr::include_graphics("images/pipe_action.svg")
```

In the following we chain two preprocessing tasks:

* mutate (creation of a new feature)
* filter (filtering the dataset)

Subsequently one can chain a PO learner to train and predict on the modified dataset.

```{r 05-pipelines-027}
mutate = po("mutate")
filter = po("filter",
  filter = mlr3filters::flt("variance"),
  param_vals = list(filter.frac = 0.5))

graph = mutate %>>%
  filter %>>%
  po("learner",
    learner = lrn("classif.rpart"))
```

Until here we defined the main pipeline stored in `r ref("Graph")`.
Now we can train and predict the pipeline:

```{r 05-pipelines-028}
task = tsk("iris")
graph$train(task)
graph$predict(task)
```

Rather than calling `$train()` and `$predict()` manually, we can put the pipeline `r ref("Graph")` into a `r ref("GraphLearner")` object.
A `r ref("GraphLearner")` encapsulates the whole pipeline (including the preprocessing steps) and can be put into `r ref("resample()")` or `r ref("benchmark()")` .
If you are familiar with the old _mlr_ package, this is the equivalent of all the `make*Wrapper()` functions.
The pipeline being encapsulated (here `r ref("Graph")`) must always produce a `r ref("Prediction")`  with its `$predict()` call, so it will probably contain at least one `r ref("PipeOpLearner")` .

```{r 05-pipelines-029}
glrn = as_learner(graph)
```

This learner can be used for model fitting, resampling, benchmarking, and tuning:

```{r 05-pipelines-030}
cv3 = rsmp("cv", folds = 3)
resample(task, glrn, cv3)
```

### Setting Hyperparameters {#pipe-hyperpars}

Individual POs offer hyperparameters because they contain `$param_set` slots that can be read and written from `$param_set$values` (via the `r mlr3book::mlr_pkg("paradox")` package).
The parameters get passed down to the `r ref("Graph")`, and finally to the `r ref("GraphLearner")` .
This makes it not only possible to easily change the behavior of a `r ref("Graph")`  / `r ref("GraphLearner")` and try different settings manually, but also to perform tuning using the `r mlr3book::mlr_pkg("mlr3tuning")` package.

```{r 05-pipelines-031}
glrn$param_set$values$variance.filter.frac = 0.25
cv3 = rsmp("cv", folds = 3)
resample(task, glrn, cv3)
```

### Tuning {#pipe-tuning}

If you are unfamiliar with tuning in `r mlr3book::mlr_pkg("mlr3")`, we recommend to take a look at the section about [tuning](#tuning) first.
Here we define a `r ref("ParamSet")` for the "rpart" learner and the "variance" filter which should be optimized during the tuning process.

```{r 05-pipelines-032}
library("paradox")
ps = ps(
  classif.rpart.cp = p_dbl(lower = 0, upper = 0.05),
  variance.filter.frac = p_dbl(lower = 0.25, upper = 1)
)
```

After having defined the `r ref("Tuner")`, a random search with 10 iterations is created.
For the inner resampling, we are simply using holdout (single split into train/test) to keep the runtimes reasonable.

```{r 05-pipelines-033}
library("mlr3tuning")
instance = TuningInstanceSingleCrit$new(
  task = task,
  learner = glrn,
  resampling = rsmp("holdout"),
  measure = msr("classif.ce"),
  search_space = ps,
  terminator = trm("evals", n_evals = 20)
)
```

```{r 05-pipelines-034}
tuner = tnr("random_search")
tuner$optimize(instance)
```

The tuning result can be found in the respective `result` slots.

```{r 05-pipelines-035}
instance$result_learner_param_vals
instance$result_y
```

## Non-Linear Graphs {#pipe-nonlinear}

```{r 05-pipelines-036, include = FALSE}
library(mlr3pipelines)
```

The Graphs seen so far all have a linear structure.
Some POs may have multiple input or output channels.
These channels make it possible to create non-linear Graphs with alternative paths taken by the data.

Possible types are:

- [Branching](#pipe-model-ensembles-branching-copying):
  Splitting of a node into several paths, e.g. useful when comparing multiple feature-selection methods (pca, filters).
  Only one path will be executed.
- [Copying](#pipe-model-ensembles-branching-copying):
  Splitting of a node into several paths, all paths will be executed (sequentially).
  Parallel execution is not yet supported.
- [Stacking](#pipe-model-ensembles-stacking):
  Single graphs are stacked onto each other, i.e. the output of one `r ref("Graph")` is the input for another.
  In machine learning this means that the prediction of one `r ref("Graph")` is used as input for another `r ref("Graph")`

### Branching & Copying {#pipe-model-ensembles-branching-copying}

The `r ref("PipeOpBranch")` and `r ref("PipeOpUnbranch")` POs make it possible to specify multiple alternative paths.
Only one path is actually executed, the others are ignored.
The active path is determined by a hyperparameter.
This concept makes it possible to tune alternative preprocessing paths (or learner models).

Below a conceptual visualization of branching:

```{r 05-pipelines-037, echo=FALSE, fig.align='center', out.width="98%"}
knitr::include_graphics("images/branching.svg")
```

`PipeOp(Un)Branch` is initialized either with the number of branches, or with a `character`-vector indicating the names of the branches.
If names are given, the "branch-choosing" hyperparameter becomes more readable.
In the following, we set three options:

1. Doing nothing ("nop")
1. Applying a PCA
1. Scaling the data

It is important to "unbranch" again after "branching", so that the outputs are merged into one result objects.

In the following we first create the branched graph and then show what happens if the "unbranching" is not applied:

```{r 05-pipelines-038, eval = TRUE}
graph = po("branch", c("nop", "pca", "scale")) %>>%
  gunion(list(
    po("nop", id = "null1"),
    po("pca"),
    po("scale")
  ))
```

Without "unbranching" one creates the following graph:

```{r 05-pipelines-039}
graph$plot(html = FALSE)
```

Now when "unbranching", we obtain the following results:

```{r 05-pipelines-040}
(graph %>>% po("unbranch", c("nop", "pca", "scale")))$plot(html = FALSE)
```

The same can be achieved using a shorter notation:

```{r 05-pipelines-041}
# List of pipeops
opts = list(po("nop", "no_op"), po("pca"), po("scale"))
# List of po ids
opt_ids = mlr3misc::map_chr(opts, `[[`, "id")
po("branch", options = opt_ids) %>>%
  gunion(opts) %>>%
  po("unbranch", options = opt_ids)
```

### Model Ensembles {#pipe-model-ensembles}

We can leverage the different operations presented to connect POs.
This allows us to form powerful graphs.

Before we go into details, we split the task into train and test indices.

```{r 05-pipelines-042}
task = tsk("iris")
train.idx = sample(seq_len(task$nrow), 120)
test.idx = setdiff(seq_len(task$nrow), train.idx)
```

#### Bagging {#pipe-model-ensembles-bagging}

We first examine Bagging introduced by [@Breiman1996].
The basic idea is to create multiple predictors and then aggregate those to a single, more powerful predictor.

> "... multiple versions are formed
> by making bootstrap replicates of the learning set
> and using these as new learning sets" [@Breiman1996]

Bagging then aggregates a set of predictors by averaging (regression) or majority vote (classification).
The idea behind bagging is, that a set of weak, but different predictors can be combined in order to arrive at a single, better predictor.

We can achieve this by downsampling our data before training a learner, repeating this e.g. 10 times and then performing a majority vote on the predictions.
Graphically, it may be summarized as follows:

```{r 05-pipelines-043, echo=FALSE}
knitr::include_graphics("images/nonlinear_pipeops.svg")
```

First, we create a simple pipeline, that uses `r ref("PipeOpSubsample")` before a `r ref("PipeOpLearner")` is trained:

```{r 05-pipelines-044}
single_pred = po("subsample", frac = 0.7) %>>%
  po("learner", lrn("classif.rpart"))
```

We can now copy this operation 10 times using `r ref("pipeline_greplicate")`.
The `r ref("pipeline_greplicate")` allows us to parallelize many copies of an operation by creating a Graph containing `n` copies of the input Graph.
We can also create it using  **syntactic sugar** via `r ref("ppl()")`:

```{r 05-pipelines-045}
pred_set = ppl("greplicate", single_pred, 10L)
```

Afterwards we need to aggregate the 10 pipelines to form a single model:

```{r 05-pipelines-046}
bagging = pred_set %>>%
  po("classifavg", innum = 10)
```

Now we can plot again to see what happens:

```{r 05-pipelines-047, fig.width=7.5}
bagging$plot(html = FALSE)
```

This pipeline can again be used in conjunction with `r ref("GraphLearner")` in order for Bagging to be used like a `r ref("Learner")`:

```{r 05-pipelines-048}
baglrn = as_learner(bagging)
baglrn$train(task, train.idx)
baglrn$predict(task, test.idx)
```

In conjunction with different `Backends`, this can be a very powerful tool.
In cases when the data does not fully fit in memory, one can obtain a fraction of the data for each learner from a `r ref("DataBackend")` and then aggregate predictions over all learners.

#### Stacking {#pipe-model-ensembles-stacking}

Stacking [@Wolpert1992] is another technique that can improve model performance.
The basic idea behind stacking is the use of predictions from one model as features for a subsequent model to possibly improve performance.

Below an conceptual illustration of stacking:

```{r 05-pipelines-049, echo=FALSE, fig.align='center', out.width="98%"}
knitr::include_graphics("images/stacking.svg")
```

As an example we can train a decision tree and use the predictions from this model in conjunction with the original features in order to train an additional model on top.

To limit overfitting, we additionally do not predict on the original predictions of the learner.
Instead, we predict on out-of-bag predictions.
To do all this, we can use `r ref("PipeOpLearnerCV")` .

`r ref("PipeOpLearnerCV")` performs nested cross-validation on the training data, fitting a model in each fold.
Each of the models is then used to predict on the out-of-fold data.
As a result, we obtain predictions for every data point in our input data.

We first create a "level 0" learner, which is used to extract a lower level prediction.
Additionally, we `$clone()` the learner object to obtain a copy of the learner.
Subsequently, one sets a custom id for the `r ref("PipeOp")` .

```{r 05-pipelines-050, eval = TRUE}
lrn = lrn("classif.rpart")
lrn_0 = po("learner_cv", lrn$clone())
lrn_0$id = "rpart_cv"
```

We use `r ref("PipeOpNOP")`  in combination with `r ref("gunion")`, in order to send the unchanged Task to the next level.
There it is combined with the predictions from our decision tree learner.

```{r 05-pipelines-051, eval = TRUE}
level_0 = gunion(list(lrn_0, po("nop")))
```

Afterwards, we want to concatenate the predictions from `r ref("PipeOpLearnerCV")` and the original Task using `r ref("PipeOpFeatureUnion")` :

```{r 05-pipelines-052, eval = TRUE}
combined = level_0 %>>% po("featureunion", 2)
```

Now we can train another learner on top of the combined features:

```{r 05-pipelines-053, fig.width=7.5, eval = TRUE}
stack = combined %>>% po("learner", lrn$clone())
stack$plot(html = FALSE)
```

```{r 05-pipelines-054, eval = TRUE}
stacklrn = as_learner(stack)
stacklrn$train(task, train.idx)
stacklrn$predict(task, test.idx)
```

In this vignette, we showed a very simple use-case for stacking.
In many real-world applications, stacking is done for multiple levels and on multiple representations of the dataset.
On a lower level, different preprocessing methods can be defined in conjunction with several learners.
On a higher level, we can then combine those predictions in order to form a very powerful model.

#### Multilevel Stacking

In order to showcase the power of `r mlr3book::mlr_pkg("mlr3pipelines")`, we will show a more complicated stacking example.

In this case, we train a `r mlr3book::cran_pkg("glmnet")` and 2 different `r mlr3book::cran_pkg("rpart")` models (some transform its inputs using `r ref("PipeOpPCA")`) on our task in the "level 0" and concatenate them with the original features (via `r ref("gunion")`).
The result is then passed on to "level 1", where we copy the concatenated features 3 times and put this task into an `r mlr3book::cran_pkg("rpart")` and a `r mlr3book::cran_pkg("glmnet")` model.
Additionally, we keep a version of the "level 0" output (via `r ref("PipeOpNOP")`) and pass this on to "level 2".
In "level 2" we simply concatenate all "level 1" outputs and train a final decision tree.

In the following examples, use `<lrn>$param_set$values$<param_name> = <param_value>` to set hyperparameters for the different learner.

```{r 05-pipelines-055}
library("magrittr")
library("mlr3learners") # for classif.glmnet

rprt = lrn("classif.rpart", predict_type = "prob")
glmn = lrn("classif.glmnet", predict_type = "prob")

#  Create Learner CV Operators
lrn_0 = po("learner_cv", rprt, id = "rpart_cv_1")
lrn_0$param_set$values$maxdepth = 5L
lrn_1 = po("pca", id = "pca1") %>>% po("learner_cv", rprt, id = "rpart_cv_2")
lrn_1$param_set$values$rpart_cv_2.maxdepth = 1L
lrn_2 = po("pca", id = "pca2") %>>% po("learner_cv", glmn)

# Union them with a PipeOpNULL to keep original features
level_0 = gunion(list(lrn_0, lrn_1, lrn_2, po("nop", id = "NOP1")))

# Cbind the output 3 times, train 2 learners but also keep level
# 0 predictions
level_1 = level_0 %>>%
  po("featureunion", 4) %>>%
  po("copy", 3) %>>%
  gunion(list(
    po("learner_cv", rprt, id = "rpart_cv_l1"),
    po("learner_cv", glmn, id = "glmnt_cv_l1"),
    po("nop", id = "NOP_l1")
  ))

# Cbind predictions, train a final learner
level_2 = level_1 %>>%
  po("featureunion", 3, id = "u2") %>>%
  po("learner", rprt, id = "rpart_l2")

# Plot the resulting graph
level_2$plot(html = FALSE)

task = tsk("iris")
lrn = as_learner(level_2)
```

And we can again call `.$train` and `.$predict`:

```{r 05-pipelines-056, warning=FALSE}
lrn$
  train(task, train.idx)$
  predict(task, test.idx)$
  score()
```

## Adding new PipeOps {#extending-pipeops}

This section showcases how the `r mlr_pkg("mlr3pipelines")` package can be extended to include custom `r ref("PipeOp")`s.
To run the following examples, we will need a `r ref("Task")`; we are using the well-known "Iris" task:

```{r 05-pipelines-057}
library("mlr3")
task = tsk("iris")
task$data()
```

`r mlr_pkg("mlr3pipelines")` is fundamentally built around [`R6`](https://r6.r-lib.org/).
When planning to create custom `r ref("PipeOp")` objects, it can only help to [familiarize yourself with it](https://adv-r.hadley.nz/r6.html).

In principle, all a `r ref("PipeOp")` must do is inherit from the `r ref("PipeOp")` R6 class and implement the `.train()` and `.predict()` functions.
There are, however, several auxiliary subclasses that can make the creation of *certain* operations much easier.

### General Case Example: `PipeOpCopy` {#ext-pipeopcopy}

A very simple yet useful `r ref("PipeOp")` is `PipeOpCopy`, which takes a single input and creates a variable number of output channels, all of which receive a copy of the input data.
It is a simple example that showcases the important steps in defining a custom `r ref("PipeOp")`.
We will show a simplified version here, **`PipeOpCopyTwo`**, that creates exactly two copies of its input data.

The following figure visualizes how our `r ref("PipeOp")` is situated in the `Pipeline` and the significant in- and outputs.

```{r 05-pipelines-058, echo=FALSE}
knitr::include_graphics("images/po_multi_viz.png")
```

#### First Steps: Inheriting from `r ref("PipeOp")`

The first part of creating a custom `r ref("PipeOp")` is inheriting from `r ref("PipeOp")`.
We make a mental note that we need to implement a `.train()` and a `.predict()` function, and that we probably want to have an `initialize()` as well:

```{r 05-pipelines-059, eval = FALSE, tidy = FALSE}
PipeOpCopyTwo = R6::R6Class("PipeOpCopyTwo",
  inherit = mlr3pipelines::PipeOp,
  public = list(
    initialize = function(id = "copy.two") {
      ....
    },
  ),
  private == list(
    .train = function(inputs) {
      ....
    },

    .predict = function(inputs) {
      ....
    }
  )
)
```

Note, that **private** methods, e.g. `.train` and `.predict` etc are prefixed with a `.`.

#### Channel Definitions

We need to tell the `r ref("PipeOp")` the layout of its channels: How many there are, what their names are going to be, and what types are acceptable.
This is done on initialization of the `r ref("PipeOp")` (using a `super$initialize` call) by giving the `input` and `output` `data.table` objects.
These must have three columns: a `"name"` column giving the names of input and output channels, and a `"train"` and `"predict"` column naming the class of objects we expect during training and prediction as input / output.
A special value for these classes is `"*"`, which indicates that any class will be accepted; our simple copy operator accepts any kind of input, so this will be useful. We have only one input, but two output channels.

By convention, we name a single channel `"input"` or `"output"`, and a group of channels [`"input1"`, `"input2"`, ...], unless there is a reason to give specific different names. Therefore, our `input` `data.table` will have a single row `<"input", "*", "*">`, and our `output` table will have two rows, `<"output1", "*", "*">` and `<"output2", "*", "*">`.

All of this is given to the `r ref("PipeOp")` creator. Our `initialize()` will thus look as follows:

```{r 05-pipelines-060, eval = FALSE}
initialize = function(id = "copy.two") {
  input = data.table::data.table(name = "input", train = "*", predict = "*")
  # the following will create two rows and automatically fill the `train`
  # and `predict` cols with "*"
  output = data.table::data.table(
    name = c("output1", "output2"),
    train = "*", predict = "*"
  )
  super$initialize(id,
    input = input,
    output = output
  )
}
```

#### Train and Predict

Both `.train()` and `.predict()` will receive a `list` as input and must give a `list` in return.
According to our `input` and `output` definitions, we will always get a list with a single element as input, and will need to return a list with two elements. Because all we want to do is create two copies, we will just create the copies using `c(inputs, inputs)`.

Two things to consider:

- The `.train()` function must always modify the `self$state` variable to something that is not `NULL` or `NO_OP`.
  This is because the `$state` slot is used as a signal that `r ref("PipeOp")`  has been trained on data, even if the state itself is not important to the `r ref("PipeOp")` (as in our case).
  Therefore, our `.train()` will set `self$state = list()`.

- It is not necessary to "clone" our input or make deep copies, because we don't modify the data.
  However, if we were changing a reference-passed object, for example by changing data in a `r ref("Task")`, we would have to make a deep copy first.
  This is because a `r ref("PipeOp")` may never modify its input object by reference.

Our `.train()` and `.predict()` functions are now:

```{r 05-pipelines-061, eval = FALSE}
.train = function(inputs) {
  self$state = list()
  c(inputs, inputs)
}
```
```{r 05-pipelines-062, eval = FALSE}
.predict = function(inputs) {
  c(inputs, inputs)
}
```

#### Putting it Together

The whole definition thus becomes

```{r 05-pipelines-063, tidy = FALSE}
PipeOpCopyTwo = R6::R6Class("PipeOpCopyTwo",
  inherit = mlr3pipelines::PipeOp,
  public = list(
    initialize = function(id = "copy.two") {
      super$initialize(id,
        input = data.table::data.table(name = "input", train = "*", predict = "*"),
        output = data.table::data.table(name = c("output1", "output2"),
                            train = "*", predict = "*")
      )
    }
  ),
  private = list(
    .train = function(inputs) {
      self$state = list()
      c(inputs, inputs)
    },

    .predict = function(inputs) {
      c(inputs, inputs)
    }
  )
)
```

We can create an instance of our `r ref("PipeOp")`, put it in a graph, and see what happens when we train it on something:

```{r 05-pipelines-064}
library("mlr3pipelines")
poct = PipeOpCopyTwo$new()
gr = Graph$new()
gr$add_pipeop(poct)

print(gr)

result = gr$train(task)

str(result)
```

### Special Case: Preprocessing {#ext-pipe-preproc}

Many `r ref("PipeOp")`s perform an operation on exactly one `r ref("Task")`, and return exactly one `r ref("Task")`. They may even not care about the "Target" / "Outcome" variable of that task, and only do some modification of some input data.
However, it is usually important to them that the `r ref("Task")` on which they perform prediction has the same data columns as the `r ref("Task")` on which they train.
For these cases, the auxiliary base class `r ref("PipeOpTaskPreproc")` exists.
It inherits from `r ref("PipeOp")` itself, and other `r ref("PipeOp")`s should use it if they fall in the kind of use-case named above.

When inheriting from `r ref("PipeOpTaskPreproc")`, one must either implement the private methods `.train_task()` and `.predict_task()`, or the methods `.train_dt()`, `.predict_dt()`, depending on whether wants to operate on a `r ref("Task")` object or on its data as `data.table`s.
In the second case, one can optionally also overload the `.select_cols()` method, which chooses which of the incoming `r ref("Task")`'s features are given to the `.train_dt()` / `.predict_dt()` functions.

The following will show two examples: `PipeOpDropNA`, which removes a `r ref("Task")`'s rows with missing values during training (and implements `.train_task()` and `.predict_task()`), and `r ref("PipeOpScale")`, which scales a `r ref("Task")`'s numeric columns (and implements `.train_dt()`, `.predict_dt()`, and `.select_cols()`).

#### Example: `PipeOpDropNA`

Dropping rows with missing values may be important when training a model that can not handle them.

Because `r mlr_pkg("mlr3")` `"Task", text = "Tasks")` only contain a view to the underlying data, it is not necessary to modify data to remove rows with missing values.
Instead, the rows can be removed using the `r ref("Task")`'s `$filter` method, which modifies the `r ref("Task")` in-place.
This is done in the private method `.train_task()`.
We take care that we also set the `$state` slot to signal that the `r ref("PipeOp")` was trained.

The private method `.predict_task()` does not need to do anything; removing missing values during prediction is not as useful, since learners that cannot handle them will just ignore the respective rows.
Furthermore, `r mlr_pkg("mlr3")` expects a `r ref("Learner")` to always return just as many predictions as it was given input rows, so a `r ref("PipeOp")` that removes `r ref("Task")` rows during training can not be used inside a `r ref("GraphLearner")`.

When we inherit from `r ref("PipeOpTaskPreproc")`, it sets the `input` and `output` `data.table`s for us to only accept a single `r ref("Task")`.
The only thing we do during `initialize()` is therefore to set an `id` (which can optionally be changed by the user).

The complete `PipeOpDropNA` can therefore be written as follows.
Note that it inherits from `r ref("PipeOpTaskPreproc")`, unlike the `PipeOpCopyTwo` example from above:

```{r 05-pipelines-065, tidy = FALSE}
PipeOpDropNA = R6::R6Class("PipeOpDropNA",
  inherit = mlr3pipelines::PipeOpTaskPreproc,
  public = list(
    initialize = function(id = "drop.na") {
      super$initialize(id)
    }
  ),

  private = list(
    .train_task = function(task) {
      self$state = list()
      featuredata = task$data(cols = task$feature_names)
      exclude = apply(is.na(featuredata), 1, any)
      task$filter(task$row_ids[!exclude])
    },

    .predict_task = function(task) {
      # nothing to be done
      task
    }
  )
)
```

To test this `r ref("PipeOp")`, we create a small task with missing values:

```{r 05-pipelines-066}
smalliris = iris[(1:5) * 30, ]
smalliris[1, 1] = NA
smalliris[2, 2] = NA
sitask = as_task_classif(smalliris, target = "Species")
print(sitask$data())
```

We test this by feeding it to a new `r ref("Graph")` that uses `PipeOpDropNA`.

```{r 05-pipelines-067}
gr = Graph$new()
gr$add_pipeop(PipeOpDropNA$new())

filtered_task = gr$train(sitask)[[1]]
print(filtered_task$data())
```

#### Example: `PipeOpScaleAlways`

An often-applied preprocessing step is to simply **center** and/or **scale** the data to mean $0$ and standard deviation $1$.
This fits the `r ref("PipeOpTaskPreproc")` pattern quite well.
Because it always replaces all columns that it operates on, and does not require any information about the task's target, it only needs to overload the `.train_dt()` and `.predict_dt()` functions.
This saves some boilerplate-code from getting the correct feature columns out of the task, and replacing them after modification.

Because scaling only makes sense on numeric features, we want to instruct `r ref("PipeOpTaskPreproc")` to give us only these numeric columns.
We do this by overloading the `.select_cols()` function: It is called by the class to determine which columns to pass to `.train_dt()` and `.predict_dt()`.
Its input is the `r ref("Task")` that is being transformed, and it should return a `character` vector of all features to work with.
When it is not overloaded, it uses all columns; instead, we will set it to only give us numeric columns.
Because the `levels()` of the data table given to `.train_dt()` and `.predict_dt()` may be different from the `r ref("Task")`'s levels, these functions must also take a `levels` argument that is a named list of column names indicating their levels.
When working with numeric data, this argument can be ignored, but it should be used instead of `levels(dt[[column]])` for factorial or character columns.

This is the first `r ref("PipeOp")` where we will be using the `$state` slot for something useful: We save the centering offset and scaling coefficient and use it in `$.predict()`!

For simplicity, we are not using hyperparameters and will always scale and center all data.
Compare this `PipeOpScaleAlways` operator to the one defined inside the `r mlr_pkg("mlr3pipelines")` package, `r ref("PipeOpScale")`.

```{r 05-pipelines-068, tidy = FALSE}
PipeOpScaleAlways = R6::R6Class("PipeOpScaleAlways",
  inherit = mlr3pipelines::PipeOpTaskPreproc,
  public = list(
    initialize = function(id = "scale.always") {
      super$initialize(id = id)
    }
  ),

  private = list(
    .select_cols = function(task) {
      task$feature_types[type == "numeric", id]
    },

    .train_dt = function(dt, levels, target) {
      sc = scale(as.matrix(dt))
      self$state = list(
        center = attr(sc, "scaled:center"),
        scale = attr(sc, "scaled:scale")
      )
      sc
    },

    .predict_dt = function(dt, levels) {
      t((t(dt) - self$state$center) / self$state$scale)
    }
  )
)
```

_(Note for the observant: If you check `PipeOpScale.R` from the `r mlr_pkg("mlr3pipelines")` package, you will notice that is uses "`get("type")`" and "`get("id")`" instead of "`type`" and "`id`", because the static code checker on CRAN would otherwise complain about references to undefined variables. This is a "problem" with `data.table` and not exclusive to `r mlr_pkg("mlr3pipelines")`.)_

We can, again, create a new `r ref("Graph")` that uses this `r ref("PipeOp")` to test it.
Compare the resulting data to the original "iris" `r ref("Task")` data printed at the beginning:

```{r 05-pipelines-069}
gr = Graph$new()
gr$add_pipeop(PipeOpScaleAlways$new())

result = gr$train(task)

result[[1]]$data()
```

### Special Case: Preprocessing with Simple Train

It is possible to make even further simplifications for many `r ref("PipeOp")`s that perform mostly the same operation during training and prediction.
The point of `r ref("Task")` preprocessing is often to modify the training data in mostly the same way as prediction data (but in a way that *may* depend on training data).

Consider constant feature removal, for example: The goal is to remove features that have no variance, or only a single factor level.
However, what features get removed must be decided during *training*, and may only depend on training data.
Furthermore, the actual process of removing features is the same during training and prediction.

A simplification to make is therefore to have a private method `.get_state(task)` which sets the `$state` slot during training, and a private method `.transform(task)`, which gets called both during training *and* prediction.
This is done in the `r ref("PipeOpTaskPreprocSimple")` class.
Just like `r ref("PipeOpTaskPreproc")`, one can inherit from this and overload these functions to get a `r ref("PipeOp")` that performs preprocessing with very little boilerplate code.

Just like `r ref("PipeOpTaskPreproc")`, `r ref("PipeOpTaskPreprocSimple")` offers the possibility to instead overload the `.get_state_dt(dt, levels)` and `.transform_dt(dt, levels)` methods (and optionally, again, the `.select_cols(task)` function) to operate on `data.table` feature data instead of the whole `r ref("Task")`.

Even some methods that do not use `r ref("PipeOpTaskPreprocSimple")` *could* work in a similar way: The `PipeOpScaleAlways` example from above will be shown to also work with this paradigm.

#### Example: `PipeOpDropConst`

A typical example of a preprocessing operation that does almost the same operation during training and prediction is an operation that drops features depending on a criterion that is evaluated during training.
One simple example of this is dropping constant features.
Because the `r mlr_pkg("mlr3")` `r ref("Task")` class offers a flexible view on underlying data, it is most efficient to drop columns from the task directly using its `$select()` function, so the `.get_state_dt(dt, levels)` / `.transform_dt(dt, levels)` functions will *not* get used; instead we overload the `.get_state(task)` and `.transform(task)` methods.

The `.get_state()` function's result is saved to the `$state` slot, so we want to return something that is useful for dropping features.
We choose to save the names of all the columns that have nonzero variance.
For brevity, we use `length(unique(column)) > 1` to check whether more than one distinct value is present; a more sophisticated version could have a tolerance parameter for numeric values that are very close to each other.

The `.transform()` method is evaluated both during training *and* prediction, and can rely on the `$state` slot being present.
All it does here is call the `Task$select` function with the columns we chose to keep.

The full `r ref("PipeOp")` could be written as follows:

```{r 05-pipelines-070, tidy = FALSE}
PipeOpDropConst = R6::R6Class("PipeOpDropConst",
  inherit = mlr3pipelines::PipeOpTaskPreprocSimple,
  public = list(
    initialize = function(id = "drop.const") {
      super$initialize(id = id)
    }
  ),

  private = list(
    .get_state = function(task) {
      data = task$data(cols = task$feature_names)
      nonconst = sapply(data, function(column) length(unique(column)) > 1)
      list(cnames = colnames(data)[nonconst])
    },

    .transform = function(task) {
      task$select(self$state$cnames)
    }
  )
)
```

This can be tested using the first five rows of the "Iris" `r ref("Task")`, for which one feature (`"Petal.Width"`) is constant:

```{r 05-pipelines-071}
irishead = task$clone()$filter(1:5)
irishead$data()
```

```{r 05-pipelines-072}
gr = Graph$new()$add_pipeop(PipeOpDropConst$new())
dropped_task = gr$train(irishead)[[1]]

dropped_task$data()
```

We can also see that the `$state` was correctly set.
Calling `$.predict()` with this graph, even with different data (the whole Iris `r ref("Task")`!) will still drop the `"Petal.Width"` column, as it should.

```{r 05-pipelines-073}
gr$pipeops$drop.const$state
```

```{r 05-pipelines-074}
dropped_predict = gr$predict(task)[[1]]

dropped_predict$data()
```

#### Example: `PipeOpScaleAlwaysSimple`

This example will show how a `PipeOpTaskPreprocSimple` can be used when only working on feature data in form of a `data.table`.
Instead of calling the `scale()` function, the `center` and `scale` values are calculated directly and saved to the `$state` slot.
The `.transform_dt()` function will then perform the same operation during both training and prediction: subtract the `center` and divide by the `scale` value.
As in the [`PipeOpScaleAlways` example above](#example-pipeopscalealways), we use `.select_cols()` so that we only work on numeric columns.

```{r 05-pipelines-075, tidy = FALSE}
PipeOpScaleAlwaysSimple = R6::R6Class("PipeOpScaleAlwaysSimple",
  inherit = mlr3pipelines::PipeOpTaskPreprocSimple,
  public = list(
    initialize = function(id = "scale.always.simple") {
      super$initialize(id = id)
    }
  ),

  private = list(
    .select_cols = function(task) {
      task$feature_types[type == "numeric", id]
    },

    .get_state_dt = function(dt, levels, target) {
      list(
        center = sapply(dt, mean),
        scale = sapply(dt, sd)
      )
    },

    .transform_dt = function(dt, levels) {
      t((t(dt) - self$state$center) / self$state$scale)
    }
  )
)
```

We can compare this `r ref("PipeOp")` to the one above to show that it behaves the same.

```{r 05-pipelines-076}
gr = Graph$new()$add_pipeop(PipeOpScaleAlways$new())
result_posa = gr$train(task)[[1]]

gr = Graph$new()$add_pipeop(PipeOpScaleAlwaysSimple$new())
result_posa_simple = gr$train(task)[[1]]
```

```{r 05-pipelines-077}
result_posa$data()
```

```{r 05-pipelines-078}
result_posa_simple$data()
```

### Hyperparameters {#ext-pipe-hyperpars}

`r mlr_pkg("mlr3pipelines")` uses the [`r mlr_pkg("paradox")`](https://paradox.mlr-org.com) package to define parameter spaces for `r ref("PipeOp")`s.
Parameters for `r ref("PipeOp")`s can modify their behavior in certain ways, e.g. switch centering or scaling off in the `r ref("PipeOpScale")` operator.
The unified interface makes it possible to have parameters for whole `r ref("Graph")`s that modify the individual `r ref("PipeOp")`'s behavior.
The `r ref("Graph")`s, when encapsulated in `r ref("GraphLearner")`s, can even be tuned using the tuning functionality in `r mlr_pkg("mlr3tuning")`.

Hyperparameters are declared during initialization, when calling the `r ref("PipeOp")`'s `$initialize()` function, by giving a `param_set` argument.
The `param_set` must be a `r ref("ParamSet")` from the `r mlr_pkg("paradox")` package; see [the tuning chapter](#searchspace) or the [in-depth `r mlr_pkg("paradox")` chapter](#paradox) for more information on how to define parameter spaces.
After construction, the `r ref("ParamSet")` can be accessed through the `$param_set` slot.
While it is *possible* to modify this `r ref("ParamSet")`, using e.g. the `$add()` and `$add_dep()` functions, *after* adding it to the `r ref("PipeOp")`, it is strongly advised against.

Hyperparameters can be set and queried through the `$values` slot.
When setting hyperparameters, they are automatically checked to satisfy all conditions set by the `$param_set`, so it is not necessary to type check them.
Be aware that it is always possible to *remove* hyperparameter values.

When a `r ref("PipeOp")` is initialized, it usually does not have any parameter values---`$values` takes the value `list()`.
It is possible to set initial parameter values in the `$initialize()` constructor; this must be done *after* the `super$initialize()` call where the corresponding `r ref("ParamSet")` must be supplied.
This is because setting `$values` checks against the current `$param_set`, which would fail if the `$param_set` was not set yet.

When using an underlying library function (the `scale` function in `r ref("PipeOpScale")`, say), then there is usually a "default" behaviour of that function when a parameter is not given.
It is good practice to use this default behaviour whenever a parameter is not set (or when it was removed).
This can easily be done when using the `r mlr_pkg("mlr3misc")` library's `r ref("mlr3misc::invoke()")` function, which has functionality similar to `"do.call()"`.

#### Hyperparameter Example: `r ref("PipeOpScale")`

How to use hyperparameters can best be shown through the example of `r ref("PipeOpScale")`, which is very similar to the example above, `PipeOpScaleAlways`.
The difference is made by the presence of hyperparameters.
`r ref("PipeOpScale")` constructs a `r ref("ParamSet")` in its `$initialize` function and passes this on to the `super$initialize` function:

```{r 05-pipelines-079}
PipeOpScale$public_methods$initialize
```

The user has access to this and can set and get parameters.
Types are automatically checked:

```{r 05-pipelines-080}
pss = po("scale")
print(pss$param_set)
```

```{r 05-pipelines-081}
pss$param_set$values$center = FALSE
print(pss$param_set$values)
```

```{r 05-pipelines-082, error = TRUE}
pss$param_set$values$scale = "TRUE" # bad input is checked!
```

How `r ref("PipeOpScale")` handles its parameters can be seen in its `$.train_dt` method: It gets the relevant parameters from its `$values` slot and uses them in the `r ref("mlr3misc::invoke()")` call.
This has the advantage over calling `scale()` directly that if a parameter is not given, its default value from the `"scale()"` function will be used.

```{r 05-pipelines-083}
PipeOpScale$private_methods$.train_dt
```

Another change that is necessary compared to `PipeOpScaleAlways` is that the attributes `"scaled:scale"` and `"scaled:center"` are not always present, depending on parameters, and possibly need to be set to default values $1$ or $0$, respectively.

It is now even possible (if a bit pointless) to call `r ref("PipeOpScale")` with both `scale` and `center` set to `FALSE`, which returns the original dataset, unchanged.

```{r 05-pipelines-084}
pss$param_set$values$scale = FALSE
pss$param_set$values$center = FALSE

gr = Graph$new()
gr$add_pipeop(pss)

result = gr$train(task)

result[[1]]$data()
```

## Special Operators {#pipe-special-ops}

```{r 05-pipelines-085, include = FALSE}
library(mlr3pipelines)
```

This section introduces some special operators, that might be useful in numerous further applications.

### Imputation: `PipeOpImpute`

Often you will be using data sets that have missing values.
There are many methods of dealing with this issue, from relatively simple imputation using either mean, median or histograms to way more involved methods including using machine learning algorithms in order to predict missing values.
These methods are called imputation.

The following `r ref("PipeOp")`s, `r ref("PipeOpImpute")`:

- Add an indicator column marking whether a value for a given feature was missing or not (numeric only)
- Impute numeric values from a histogram
- Impute categorical values using a learner
- We use `po("featureunion")` and `po("nop")` to cbind the missing indicator features. In other words to combine the indicator columns with the rest of the data.

```{r 05-pipelines-086}
# Imputation example
task = tsk("penguins")
task$missings()

# Add missing indicator columns ("dummy columns") to the Task
pom = po("missind")
# Simply pushes the input forward
nop = po("nop")
# Imputes numerical features by histogram.
pon = po("imputehist", id = "imputer_num")
# combines features (used here to add indicator columns to original data)
pou = po("featureunion")
# Impute categorical features by fitting a Learner ("classif.rpart") for each feature.
pof = po("imputelearner", lrn("classif.rpart"), id = "imputer_fct", affect_columns = selector_type("factor"))
```

Now we construct the graph.

```{r 05-pipelines-087}
impgraph = list(
  pom,
  nop
) %>>% pou %>>% pof %>>% pon

impgraph$plot()
```

Now we get the new task and we can see that all of the missing values have been imputed.

```{r 05-pipelines-088}
new_task = impgraph$train(task)[[1]]

new_task$missings()
```

A learner can thus be equipped with automatic imputation of missing values by adding an imputation Pipeop.

```{r 05-pipelines-089}
polrn = po("learner", lrn("classif.rpart"))
lrn = as_learner(impgraph %>>% polrn)
```

### Feature Engineering: `PipeOpMutate`

New features can be added or computed from a task using `r ref("PipeOpMutate")` .
The operator evaluates one or multiple expressions provided in an `alist`.
In this example, we compute some new features on top of the `iris` task.
Then we add them to the data as illustrated below:

`iris` dataset looks like this:

```{r 05-pipelines-090}
task = task = tsk("iris")
head(as.data.table(task))
```

Once we do the mutations, you can see the new columns:

```{r 05-pipelines-091}
pom = po("mutate")

# Define a set of mutations
mutations = list(
  Sepal.Sum = ~ Sepal.Length + Sepal.Width,
  Petal.Sum = ~ Petal.Length + Petal.Width,
  Sepal.Petal.Ratio = ~ (Sepal.Length / Petal.Length)
)
pom$param_set$values$mutation = mutations

new_task = pom$train(list(task))[[1]]
head(as.data.table(new_task))
```

If outside data is required, we can make use of the `env` parameter.
Moreover, we provide an environment, where expressions are evaluated (`env` defaults to `.GlobalEnv`).

### Training on data subsets: `PipeOpChunk`

In cases, where data is too big to fit into the machine's memory, an often-used technique is to split the data into several parts.
Subsequently, the parts are trained on each part of the data.

After undertaking these steps, we aggregate the models.
In this example, we split our data into 4 parts using `r ref("PipeOpChunk")` .
Additionally, we create 4 `r ref("PipeOpLearner")`  POS, which are then trained on each split of the data.

```{r 05-pipelines-092}
chks = po("chunk", 4)
lrns = ppl("greplicate", po("learner", lrn("classif.rpart")), 4)
```

Afterwards we can use `r ref("PipeOpClassifAvg")` to aggregate the predictions from the 4 different models into a new one.

```{r 05-pipelines-093}
mjv = po("classifavg", 4)
```

We can now connect the different operators and visualize the full graph:

```{r 05-pipelines-094, fig.width=7.5, fig.height = 9}
pipeline = chks %>>% lrns %>>% mjv
pipeline$plot(html = FALSE)
```

```{r 05-pipelines-095}
task = tsk("iris")
train.idx = sample(seq_len(task$nrow), 120)
test.idx = setdiff(seq_len(task$nrow), train.idx)

pipelrn = as_learner(pipeline)
pipelrn$train(task, train.idx)$
  predict(task, train.idx)$
  score()
```

### Feature Selection: `PipeOpFilter` and `PipeOpSelect`

The package `r mlr3book::mlr_pkg("mlr3filters")` contains many different `"mlr3filters::Filter")`s that can be used to select features for subsequent learners.
This is often required when the data has a large amount of features.

A `r ref("PipeOp")` for filters is `r ref("PipeOpFilter")`:

```{r 05-pipelines-096}
po("filter", mlr3filters::flt("information_gain"))
```

How many features to keep can be set using `filter_nfeat`, `filter_frac` and `filter_cutoff`.

Filters can be selected / de-selected by name using `r ref("PipeOpSelect")`.

## In-depth look into mlr3pipelines {#in-depth-pipelines}

```{r 05-pipelines-097, include = FALSE}
library(mlr3pipelines)
```

This vignette is an in-depth introduction to `r mlr3book::cran_pkg("mlr3pipelines")`, the dataflow programming toolkit for machine learning in `R` using `r mlr3book::mlr_pkg("mlr3")`.
It will go through basic concepts and then give a few examples that both show the simplicity as well as the power and versatility of using `r mlr3book::cran_pkg("mlr3pipelines")`.

### What's the Point

Machine learning toolkits often try to abstract away the processes happening inside machine learning algorithms.
This makes it easy for the user to switch out one algorithm for another without having to worry about what is happening inside it, what kind of data it is able to operate on etc.
The benefit of using `r mlr3book::mlr_pkg("mlr3")`, for example, is that one can create a `r ref("Learner")`, a `r ref("Task")`, a `r ref("Resampling")` etc. and use them for typical machine learning operations.
It is trivial to exchange individual components and therefore use, for example, a different `r ref("Learner")` in the same experiment for comparison.

```{r 05-pipelines-098}
task = as_task_classif(iris, target = "Species")
lrn = lrn("classif.rpart")
rsmp = rsmp("holdout")
resample(task, lrn, rsmp)
```

However, this modularity breaks down as soon as the learning algorithm encompasses more than just model fitting, like data preprocessing, ensembles or other meta models.
`r mlr3book::cran_pkg("mlr3pipelines")` takes modularity one step further than `r mlr3book::mlr_pkg("mlr3")`: it makes it possible to build individual steps within a `r ref("Learner")` out of building blocks called `r ref("PipeOp")`s.

### `r ref("PipeOp")`: Pipeline Operators

The most basic unit of functionality within `r mlr3book::cran_pkg("mlr3pipelines")` is the `r ref("PipeOp")`, short for "pipeline operator", which represents a trans-formative operation on input (for example a training dataset) leading to output.
It can therefore be seen as a generalized notion of a function, with a certain twist: `r ref("PipeOp")`s behave differently during a "training phase" and a "prediction phase".
The training phase will typically generate a certain model of the data that is saved as internal state.
The prediction phase will then operate on the input data depending on the trained model.

An example of this behavior is the *principal component analysis* operation ("`r ref("PipeOpPCA")`"):
During training, it will transform incoming data by rotating it in a way that leads to uncorrelated features ordered by their contribution to total variance.
It will *also* save the rotation matrix to be use for new data during the "prediction phase".
This makes it possible to perform "prediction" with single rows of new data, where a row's scores on each of the principal components (the components of the training data!) is computed.

```{r 05-pipelines-099}
po = po("pca")
po$train(list(task))[[1]]$data()
```

```{r 05-pipelines-100}
single_line_task = task$clone()$filter(1)
po$predict(list(single_line_task))[[1]]$data()
```

```{r 05-pipelines-101}
po$state
```

This shows the most important primitives incorporated in a `r ref("PipeOp")`:
* **`$train()`**, taking a list of input arguments, turning them into a list of outputs, meanwhile saving a state in `$state`
* **`$predict()`**, taking a list of input arguments, turning them into a list of outputs, making use of the saved `$state`
* **`$state`**, the "model" trained with `$train()` and utilized during `$predict()`.

Schematically we can represent the `r ref("PipeOp")` like so:

```{r 05-pipelines-102, echo = FALSE}
knitr::include_graphics("images/po_viz.png")
```

#### Why the `$state`

It is important to take a moment and notice the importance of a `$state` variable and the `$train()` / `$predict()` dichotomy in a `r ref("PipeOp")`.
There are many preprocessing methods, for example scaling of parameters or imputation, that could in theory just be applied to training data and prediction / validation data separately, or they could be applied to a task before resampling is performed.
This would, however, be fallacious:

* The preprocessing of each instance of prediction data should not depend on the remaining prediction dataset.
A prediction on a single instance of new data should give the same result as prediction performed on a whole dataset.
* If preprocessing is performed on a task *before* resampling is done, information about the test set can leak into the training set.
Resampling should evaluate the generalization performance of the *entire* machine learning method, therefore the behavior of this entire method must only depend only on the content of the *training* split during resampling.

#### Where to get `r ref("PipeOp")`s

Each `r ref("PipeOp")` is an instance of an "`R6`" class, many of which are provided by the `r mlr3book::cran_pkg("mlr3pipelines")` package itself.
They can be constructed explicitly ("`PipeOpPCA$new()`") or retrieved from the `r ref("mlr_pipeops")` dictionary: `po("pca")`.
The entire list of available `r ref("PipeOp")`s, and some meta-information, can be retrieved using `r ref("as.data.table()")`:

```{r 05-pipelines-103}
as.data.table(mlr_pipeops)[, c("key", "input.num", "output.num")]
```

When retrieving `r ref("PipeOp")`s from the `r ref("mlr_pipeops")` dictionary, it is also possible to give additional constructor arguments, such as an [id](#pipeop-ids-and-id-name-clashes) or [parameter values](#hyperparameters).

```{r 05-pipelines-104}
po("pca", rank. = 3)
```

### PipeOp Channels

#### Input Channels

Just like functions, `r ref("PipeOp")`s can take multiple inputs.
These multiple inputs are always given as elements in the input list.
For example, there is a `r ref("PipeOpFeatureUnion")` that combines multiple tasks with different features and "`cbind()`s" them together, creating one combined task.
When two halves of the `iris` task are given, for example, it recreates the original task:

```{r 05-pipelines-105}
iris_first_half = task$clone()$select(c("Petal.Length", "Petal.Width"))
iris_second_half = task$clone()$select(c("Sepal.Length", "Sepal.Width"))

pofu = po("featureunion", innum = 2)

pofu$train(list(iris_first_half, iris_second_half))[[1]]$data()
```

Because `r ref("PipeOpFeatureUnion")` effectively takes two input arguments here, we can say it has two **input channels**.
An input channel also carries information about the *type* of input that is acceptable.
The input channels of the `pofu` object constructed above, for example, each accept a `r ref("Task")` during training and prediction.
This information can be queried from the `$input` slot:

```{r 05-pipelines-106}
pofu$input
```

Other `r ref("PipeOp")`s may have channels that take different types during different phases.
The `backuplearner` `r ref("PipeOp")`, for example, takes a `NULL` and a `r ref("Task")` during training, and a `r ref("Prediction")` and a `r ref("Task")` during prediction:

```{r 05-pipelines-107}
# TODO this is an important case to handle here, do not delete unless there is a better example.
# po("backuplearner")$input
```

#### Output Channels

Unlike the typical notion of a function, `r ref("PipeOp")`s can also have multiple **output channels**.
`$train()` and `$predict()` always return a list, so certain `r ref("PipeOp")`s may return lists with more than one element.
Similar to input channels, the information about the number and type of outputs given by a `r ref("PipeOp")` is available in the `$output` slot.
The `chunk` PipeOp, for example, chunks a given `r ref("Task")` into subsets and consequently returns multiple `r ref("Task")` objects, both during training and prediction.
The number of output channels must be given during construction through the `outnum` argument.

```{r 05-pipelines-108}
po("chunk", outnum = 3)$output
```

Note that the number of output channels during training and prediction is the same.
A schema of a `r ref("PipeOp")` with two output channels:

```{r 05-pipelines-109, echo = FALSE}
knitr::include_graphics("images/po_multi_alone.png")
```

#### Channel Configuration

Most `r ref("PipeOp")`s have only one input channel (so they take a list with a single element), but there are a few with more than one;
In many cases, the number of input or output channels is determined during construction, e.g. through the `innum` / `outnum` arguments.
The `input.num` and `output.num` columns of the `r ref("mlr_pipeops")`-table [above](#where-to-get-pipeops) show the default number of channels, and `NA` if the number depends on a construction argument.

The default printer of a `r ref("PipeOp")` gives information about channel names and types:

```{r 05-pipelines-110, out.width="98%"}
# po("backuplearner")
```

### `r ref("Graph")`: Networks of `r ref("PipeOp")`s

#### Basics

What is the advantage of this tedious way of declaring input and output channels and handling in/output through lists?
Because each `r ref("PipeOp")` has a known number of input and output channels that always produce or accept data of a known type, it is possible to network them together in **`r ref("Graph")`**s.
A `r ref("Graph")` is a collection of `r ref("PipeOp")`s with "edges" that mandate that data should be flowing along them.
Edges always pass between `r ref("PipeOp")` *channels*, so it is not only possible to explicitly prescribe which position of an input or output list an edge refers to, it makes it possible to make different components of a `r ref("PipeOp")`'s output flow to multiple different other `r ref("PipeOp")`s, as well as to have a `r ref("PipeOp")` gather its input from multiple other `r ref("PipeOp")`s.

A schema of a simple graph of `r ref("PipeOp")`s:

```{r 05-pipelines-111, echo = FALSE}
knitr::include_graphics("images/po_multi_viz.png")
```

A `r ref("Graph")` is empty when first created, and `r ref("PipeOp")`s can be added using the **`$add_pipeop()`** method.
The **`$add_edge()`** method is used to create connections between them.
While the printer of a `r ref("Graph")` gives some information about its layout, the most intuitive way of visualizing it is using the `$plot()` function.

```{r 05-pipelines-112}
gr = Graph$new()
gr$add_pipeop(po("scale"))
gr$add_pipeop(po("subsample", frac = 0.1))
gr$add_edge("scale", "subsample")
```

```{r 05-pipelines-113}
print(gr)
```

```{r 05-pipelines-114, fig.width = 8, fig.height = 8}
gr$plot(html = FALSE)
```

A `r ref("Graph")` itself has a **`$train()`** and a **`$predict()`** method that accept some data and propagate this data through the network of `r ref("PipeOp")`s.
The return value corresponds to the output of the `r ref("PipeOp")` output channels that are not connected to other `r ref("PipeOp")`s.

```{r 05-pipelines-115}
gr$train(task)[[1]]$data()
```

```{r 05-pipelines-116}
gr$predict(single_line_task)[[1]]$data()
```

The collection of `r ref("PipeOp")`s inside a `r ref("Graph")` can be accessed through the **`$pipeops`** slot.
The set of edges in the Graph can be inspected through the **`$edges`** slot.
It is possible to modify individual `PipeOps` and edges in a Graph through these slots, but this is not recommended because no error checking is performed and it may put the `r ref("Graph")` in an unsupported state.

#### Networks

The example above showed a linear preprocessing pipeline, but it is in fact possible to build true "graphs" of operations, as long as no loops are introduced^[It is tempting to denote this as a "directed acyclic graph", but this would not be entirely correct because edges run between channels of `r ref("PipeOp")`s, not `r ref("PipeOp")`s themselves.].
`r ref("PipeOp")`s with multiple output channels can feed their data to multiple different subsequent `r ref("PipeOp")`s, and `r ref("PipeOp")`s with multiple input channels can take results from different `r ref("PipeOp")`s.
When a `r ref("PipeOp")` has more than one input / output channel, then the `r ref("Graph")`'s `$add_edge()` method needs an additional argument that indicates which channel to connect to.
This argument can be given in the form of an integer, or as the name of the channel.

The following constructs a `r ref("Graph")` that copies the input and gives one copy each to a "scale" and a "pca" `r ref("PipeOp")`.
The resulting columns of each operation are put next to each other by "featureunion".

```{r 05-pipelines-117, tidy = FALSE}
gr = Graph$new()$
  add_pipeop(po("copy", outnum = 2))$
  add_pipeop(po("scale"))$
  add_pipeop(po("pca"))$
  add_pipeop(po("featureunion", innum = 2))

gr$
  add_edge("copy", "scale", src_channel = 1)$        # designating channel by index
  add_edge("copy", "pca", src_channel = "output2")$  # designating channel by name
  add_edge("scale", "featureunion", dst_channel = 1)$
  add_edge("pca", "featureunion", dst_channel = 2)

gr$plot(html = FALSE)
```
```{r 05-pipelines-118}
gr$train(iris_first_half)[[1]]$data()
```

#### Syntactic Sugar

Although it is possible to create intricate `r ref("Graph")`s with edges going all over the place (as long as no loops are introduced), there is usually a clear direction of flow between "layers" in the `r ref("Graph")`.
It is therefore convenient to build up a `r ref("Graph")` from layers, which can be done using the **`%>>%`** ("double-arrow") operator.
It takes either a `r ref("PipeOp")` or a `r ref("Graph")` on each of its sides and connects all of the outputs of its left-hand side to one of the inputs each of its right-hand side--the number of inputs therefore must match the number of outputs.
Together with the `r ref("gunion()")` operation, which takes `r ref("PipeOp")`s or `r ref("Graph")`s and arranges them next to each other akin to a (disjoint) graph union, the above network can more easily be constructed as follows:

```{r 05-pipelines-119}
gr = po("copy", outnum = 2) %>>%
  gunion(list(po("scale"), po("pca"))) %>>%
  po("featureunion", innum = 2)

gr$plot(html = FALSE)
```

#### `r ref("PipeOp")` IDs and ID Name Clashes

`r ref("PipeOp")`s within a graph are addressed by their **`$id`**-slot.
It is therefore necessary for all `r ref("PipeOp")`s within a `r ref("Graph")` to have a unique `$id`.
The `$id` can be set during or after construction, but it should not directly be changed after a `r ref("PipeOp")` was inserted in a `r ref("Graph")`.
At that point, the **`$set_names()`**-method can be used to change `r ref("PipeOp")` ids.

```{r 05-pipelines-120, error = TRUE}
po1 = po("scale")
po2 = po("scale")
po1 %>>% po2 # name clash
```

```{r 05-pipelines-121}
po2$id = "scale2"
gr = po1 %>>% po2
gr
```

```{r 05-pipelines-122}
# Alternative ways of getting new ids:
po("scale", id = "scale2")
```

```{r 05-pipelines-123, error = TRUE}
# sometimes names of PipeOps within a Graph need to be changed
gr2 = po("scale") %>>% po("pca")
gr %>>% gr2
```

```{r 05-pipelines-124}
gr2$set_names("scale", "scale3")
gr %>>% gr2
```

### Learners in Graphs, Graphs in Learners

The true power of `r mlr3book::cran_pkg("mlr3pipelines")` derives from the fact that it can be integrated seamlessly with `r mlr3book::mlr_pkg("mlr3")`.
Two components are mainly responsible for this:

* `r ref("PipeOpLearner")`, a `r ref("PipeOp")` that encapsulates a `r mlr3book::mlr_pkg("mlr3")` `r ref("Learner")` and creates a `r ref("PredictionData")` object in its `$predict()` phase
* `r ref("GraphLearner")`, a `r mlr3book::mlr_pkg("mlr3")` `r ref("Learner")` that can be used in place of any other `r mlr3book::mlr_pkg("mlr3")` `r ref("Learner")`, but which does prediction using a `r ref("Graph")` given to it

Note that these are dual to each other: One takes a `r ref("Learner")` and produces a `r ref("PipeOp")` (and by extension a `r ref("Graph")`); the other takes a `r ref("Graph")` and produces a `r ref("Learner")`.

#### `r ref("PipeOpLearner")`

The `r ref("PipeOpLearner")` is constructed using a `r mlr3book::mlr_pkg("mlr3")` `r ref("Learner")` and will use it to create `r ref("PredictionData")` in the `$predict()` phase.
The output during `$train()` is `NULL`.
It can be used after a preprocessing pipeline, and it is even possible to perform operations on the `r ref("PredictionData")`, for example by averaging multiple predictions or by using the `PipeOpBackupLearner`" operator to impute predictions that a given model failed to create.

The following is a very simple `r ref("Graph")` that performs training and prediction on data after performing principal component analysis.

```{r 05-pipelines-125}
gr = po("pca") %>>% po("learner",
  lrn("classif.rpart"))
```
```{r 05-pipelines-126}
gr$train(task)
gr$predict(task)
```

#### `r ref("GraphLearner")`

Although a `r ref("Graph")` has `$train()` and `$predict()` functions, it can not be used directly in places where `r mlr3book::mlr_pkg("mlr3")` `Learners` can be used like resampling or benchmarks.
For this, it needs to be wrapped in a `r ref("GraphLearner")` object, which is a thin wrapper that enables this functionality.
The resulting `r ref("Learner")` is extremely versatile, because every part of it can be modified, replaced, parameterized and optimized over.
Resampling the graph above can be done the same way that resampling of the `r ref("Learner")` was performed in the [introductory example](#whats-the-point).

```{r 05-pipelines-127}
lrngrph = as_learner(gr)
resample(task, lrngrph, rsmp)
```

### Hyperparameters

`r mlr3book::cran_pkg("mlr3pipelines")` relies on the `r mlr3book::mlr_pkg("paradox")` package to provide parameters that can modify each `r ref("PipeOp")`'s behavior.
`r mlr3book::mlr_pkg("paradox")` parameters provide information about the parameters that can be changed, as well as their types and ranges.
They provide a unified interface for benchmarks and parameter optimization ("tuning").
For a deep dive into `r mlr3book::mlr_pkg("paradox")`, see [the tuning chapter](#searchspace) or the [in-depth `paradox` chapter](#paradox).

The `r ref("ParamSet")`, representing the space of possible parameter configurations of a `r ref("PipeOp")`, can be inspected by accessing the **`$param_set`** slot of a `r ref("PipeOp")` or a `r ref("Graph")`.

```{r 05-pipelines-128}
op_pca = po("pca")
op_pca$param_set
```

To set or retrieve a parameter, the **`$param_set$values`** slot can be accessed.
Alternatively, the `param_vals` value can be given during construction.

```{r 05-pipelines-129}
op_pca$param_set$values$center = FALSE
op_pca$param_set$values
```

```{r 05-pipelines-130}
op_pca = po("pca", center = TRUE)
op_pca$param_set$values
```

Each `r ref("PipeOp")` can bring its own individual parameters which are collected together in the `r ref("Graph")`'s `$param_set`.
A `r ref("PipeOp")`'s parameter names are prefixed with its `$id` to prevent parameter name clashes.

```{r 05-pipelines-131}
gr = op_pca %>>% po("scale")
gr$param_set
```

```{r 05-pipelines-132}
gr$param_set$values
```

Both `r ref("PipeOpLearner")` and `r ref("GraphLearner")` preserve parameters of the objects they encapsulate.

```{r 05-pipelines-133}
op_rpart = po("learner", lrn("classif.rpart"))
op_rpart$param_set
```

```{r 05-pipelines-134}
glrn = as_learner(gr %>>% op_rpart)
glrn$param_set
```
