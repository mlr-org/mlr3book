<!--
## Progress Bars {#progress-bars}

Progress bars are a handy tool to visualize the progression of long running computations.
The `r mlr3verse` packages support progress bars via the package `r ref_pkg("progressr")`.
The package gives the user full control of how and when progress is presented.
It is a framework for progress updates which means that it is not limited to progress bars.
For example, progress updates can be also reported with beeping sounds (`r ref_pkg("beepr")`).

We deactivate logging messages so that only progress bars are visible.

```{r 06-technical-075}
lgr::get_logger("mlr3")$set_threshold("warn")
lgr::get_logger("bbotk")$set_threshold("warn")
```

We activate a progress handler with the `"progressr::handlers()"` function.
The progress handler states how progress is presented.
We recommend the `"progress"` handler which is provided by the package `r ref_pkg("progress")`.

```{r 06-technical-076}
progressr::handlers("progress")
```

Finally, we wrap the `r ref("resample()")` function  with `"progressr::with_progress()"` to run the resample experiment with a progress bar.

```{r 06-technical-077}
library("mlr3verse")

task = tsk("pima")
learner = lrn("classif.rpart")
resampling = rsmp("repeated_cv", folds = 3, repeats = 100)

progressr::with_progress({
  resample(task, learner, resampling)
})
```

Alternatively, we can activate progress bars globally.

```{r 06-technical-078}
progressr::handlers(global = TRUE)

design = benchmark_grid(tsks(c("pima", "iris")), learner, resampling)
benchmark(design)
```

The packages `r mlr3tuning` and `r mlr3fselect` support progress updates.
We display the tuning progress with a progress bar.

```{r 06-technical-079}
progressr::handlers("progress")

progressr::with_progress({
  tune(
    method = "random_search",
    task = tsk("pima"),
    learner = lrn("classif.rpart", cp = to_tune(1e-04, 1e-1, logscale = TRUE)),
    resampling = rsmp("cv", folds = 3),
    measure = msr("classif.ce"),
    term_evals = 100,
    batch_size = 10)
})
```

Progress is supported by `"TerminatorClockTime")`, `"TerminatorEvals")` and `"TerminatorRunTime")` and combinations of terminators with `"TerminatorCombo")`. -->
