# Non-sequential Pipelines and Tuning {#sec-pipelines-nonseq}

```{r, include = FALSE, cache = FALSE}
## Adds chapter authors to TOC and chapter header
##  x - Named list, names are author name, entries are affiliations
authors = function(chaptitle) {
  authors = unlist(strsplit(data.table::fread("../../common/chap_auths.csv")[Title == chaptitle, Authors], ", "))
  if (is.null(authors)) stop(sprintf("Chapter %s not found", chaptitle))
  affils = data.table::fread("../../common/authors.csv")[authors, on = "Author", Affiliations]

  quarto_fmt = "**%s** \\newline <br>  *%s* \n "
  latex_fmt = "\\addtocontents{toc}{\\textit{%s}}"

  quarto_out = paste0(sprintf(quarto_fmt, authors, affils), collapse = "\n ")
  if (length(authors) == 1) {
    latex_out = sprintf(latex_fmt, authors)
  } else {
    latex_out = paste0(authors, collapse = ", ")
    ind = tail(gregexpr(",", latex_out)[[1]], 1)
    latex_out = paste(substr(latex_out, 1, ind - 1), "and", substr(latex_out, ind + 2, nchar(latex_out)))
    latex_out = sprintf(latex_fmt, latex_out)
  }

  paste0("\\vspace{-15mm}", latex_out, quarto_out, "\\newline \\newline <br><br> ", collapse = " ")
}

citeas = function(chaptitle) {
  authors = unlist(strsplit(data.table::fread("../../common/chap_auths.csv")[Title == chaptitle, Authors], ", "))
  if (is.null(authors)) stop(sprintf("Chapter %s not found", chaptitle))
  authors = paste0(vapply(strsplit(authors, " "), function(.x) {
    paste(.x[[length(.x)]], paste(substr(.x[seq(1, length(.x) - 1)], 1, 1), collapse = ""))
  }, character(1)), collapse = ", ")
  chaphtml = paste0(paste0(tolower(strsplit(chaptitle, " ")[[1]]), collapse = "_"), ".html")
  sprintf("## Citation
  Please cite this chapter as:

  %s. (2024). %s. In Bischl B, Sonabend R, Kotthoff L, Lang M, (Eds.), *Applied Machine Learning Using mlr3 in R*. CRC Press. https://mlr3book.mlr-org.com/%s.", authors, chaptitle, chaphtml)
}
```



```{r, include = FALSE, cache = FALSE}
library("data.table")
library("mlr3")
library("mlr3book")
library("bbotk")
library("mlr3verse")

lgr::get_logger("mlr3")$set_threshold("warn")
lgr::get_logger("bbotk")$set_threshold("warn")
lgr::get_logger("mlr3tuning")$set_threshold("warn")
lgr::get_logger("mlr3oml")$set_threshold("warn")

igraph::igraph_options(vertex.label.color = "black")

options(width = 73, digits = 4)

# https://github.com/mlr-org/miesmuschel/blob/master/R/zzz.R
`[[.R6` = function(x, i, ...) {
  if (exists(i, envir = x, inherits = FALSE) || i == "context_available")
    return(get0(i, envir = x))
  stop("R6 class ", paste0(class(x), collapse = "/") ," does not have slot '", i, "'!")
}


`$.R6` = function(x, name) {
  if (exists(name, envir = x, inherits = FALSE) || name == "context_available")
    return(get0(name, envir = x))
  stop("R6 class ", paste0(class(x), collapse = "/") ," does not have slot '", name, "'!")
}

include_multi_graphics = function(html_path, latex_path) {
  path = if (knitr::is_latex_output()) latex_path else html_path
  knitr::include_graphics(path)
}

set.seed(123)
```



`r chapter = "Non-sequential Pipelines and Tuning"`
`r authors(chapter)`


```{r pipelines-setup, include = FALSE, cache = FALSE}
library("mlr3oml")
dir.create(here::here("book", "openml"), showWarnings = FALSE, recursive = TRUE)
options(mlr3oml.cache = here::here("book", "openml", "cache"))
```


In @sec-pipelines we looked at simple sequential pipelines that can be built using the `Graph` class and a few `PipeOp` objects.
In this chapter we will take this further and look at non-sequential pipelines that can perform more complex operations.
We will then look at tuning pipelines by combining methods in `r mlr3tuning` and `r mlr3pipelines` and will consider some concrete examples using multi-fidelity tuning (@sec-hyperband) and feature selection (@sec-feature-selection).

We saw the power of the `%>>%`-operator in @sec-pipelines to assemble graphs from combinations of multiple `PipeOp`s and `Learner`s.
Given a single `PipeOp` or `Learner`, the `%>>%`-operator will arrange these objects into a linear `Graph` with each `PipeOp` acting in sequence.
However, by using the `r ref("gunion()")` function, we can instead combine multiple `PipeOp`s, `Graph`s, or a mixture of both, into a parallel `Graph` (@fig-non-sequential).


```{r fig.align='center'}
#| label: fig-non-sequential
#| fig-cap: PipeOp.
#| fig-alt: PipeOp.
#| echo: false
include_multi_graphics("Figures/mlr3book_figures-21.svg", "Figures/mlr3book_figures-21.png")
```


In the following example, we create a `Graph` that centers its inputs and then copies the scaled data to two parallel streams: one replaces the data with columns that indicate whether data is missing, the other imputes missing data using the median (we will return to this in @sec-preprocessing-missing).
The outputs of both streams are then combined into a single dataset using `po("featureunion")`.


```{r 05-pipelines-modeling-003-evalF, eval = FALSE}
library(mlr3pipelines)

gr = po("scale", center = TRUE, scale = FALSE) %>>%
  gunion(list(
    po("missind"),
    po("imputemedian")
  )) %>>%
  po("featureunion")
gr$plot(horizontal = TRUE)
```

```{r 05-pipelines-modeling-003-evalT, fig.width = 8, eval = TRUE, echo = FALSE}
#| label: fig-pipelines-parallel-plot
#| fig-cap: 'Simple parallel pipeline plot showing a common data source being scaled then the same data being passed to two `PipeOp`s in parallel whose outputs are then combined and returned to the user.'
#| fig-alt: 'Six boxes where first two are "<INPUT> -> scale", then "scale" has two arrows to "missind" and "imputemedian" which both have an arrow to "featureunion -> <OUTPUT>".'
library(mlr3pipelines)

gr = po("scale", center = TRUE, scale = FALSE) %>>%
  gunion(list(
    po("missind"),
    po("imputemedian")
  )) %>>%
  po("featureunion")
fig = magick::image_graph(width = 1500, height = 1000, res = 100, pointsize = 24)
gr$plot(horizontal = TRUE)
invisible(dev.off())
magick::image_trim(fig)
```


When applied to the first three rows of the `pima` task we can see how this imputes missing data and adds a column indicating where values were missing.


```{r 05-pipelines-modeling-004, eval = TRUE}
pima_head = tsk("pima")$filter(1:3)
pima_head$data(cols = c("diabetes", "insulin", "triceps"))
result = gr$train(pima_head)[[1]]
result$data(cols = c("diabetes", "insulin", "missing_insulin", "triceps",
  "missing_triceps"))
```


## Selectors and Parallel Pipelines

It is common in `Graph`s for an operation to be applied to a subset of features.
In `r mlr3pipelines` this can either (@fig-pipelines-select-affect) be achieved by passing the column subset to the `affect_columns` hyperparameter of a `PipeOp` (assuming it has that hyperparameter), which controls which columns should be affected by the `PipeOp`.
Alternatively, one can use the `r ref("PipeOpSelect", aside = TRUE)` operator to create operations in parallel on specified feature subsets, and uniting the result using `r ref("PipeOpFeatureUnion", aside = TRUE)`.


```{r eval = TRUE}
#| label: fig-pipelines-select-affect
#| layout-nrow: 2
#| fig-cap: "Two methods of setting up `PipeOp`s (`po(op1)` and `po(op2)`) that operate on complementary features (X and ¬X) of an input task."
#| fig-alt: 'Top plot shows the sequential pipeline "po(op1, affected_columns: ¬X") -> po(op2, affected_columns: X"). Bottom plot shows the parallel pipeline that starts with an arrow splitting and then pointing to both  po("select", ¬X) and po("select", X). These respectively point to po(op1) and po(op2), which then both point to the same po("featureunion").'
#| fig-subcap:
#|   - 'The `affect_columns` hyperparameter can be used to restrict operations to a subset of features. When used, pipelines may still be run in sequence.'
#|   - 'Operating on subsets of tasks using concurrent paths by first splitting the inputs with `po("select")` and then combining outputs with `po("featureunion")`.'
#| out.width: "70%"
#| echo: false
include_multi_graphics("Figures/mlr3book_figures-28.svg", "Figures/mlr3book_figures-28.png")
include_multi_graphics("Figures/mlr3book_figures-29.svg", "Figures/mlr3book_figures-29.png")
```


Both methods make use of `r ref("Selector", aside = TRUE)`-functions.
These are helper-functions that indicate to a `PipeOp` which features it should apply to.
`Selectors` may match column names by regular expressions `r ref("selector_grep()")`, or by column type `r ref("selector_type()")`.
`Selectors` can also be used to join variables (`r ref("selector_union()")`), return their set difference (`r ref("selector_setdiff()")`), or select the complement of features from another `Selector` (`r ref("selector_invert()")`).

For example, in @sec-pipelines-pipeops we applied PCA to the bill length and depth of penguins from `penguins_simple` by first selecting these columns using the `Task` method `$select()` and then applying the `PipeOp`.
We can now do this more simply with `selector_grep`, and could go on to use `selector_invert` to apply some other `PipeOp` to other features, below we use `po("scale")` and make use of the `affect_columns` method:


```{r 05-pipelines-multicol-1, eval = TRUE}
sel_bill = selector_grep("^bill")
sel_not_bill = selector_invert(sel_bill)

gr = po("scale", affect_columns = sel_not_bill) %>>%
  po("pca", affect_columns = sel_bill)

result = gr$train(tsk("penguins_simple"))
result[[1]]$data()[1:3, 1:5]
```


The biggest advantage of this method is that it creates a very simple, sequential `Graph`.
However, one disadvantage of the `affect_columns` method is that it is relatively easy to have unexpected results if the ordering of `PipeOp`s is mixed up.
For example, if we had reversed the order of `po("pca")` and `po("scale")` above then we would have first created columns `"PC1"` and `"PC2"` and then scaled these as they would match the pattern in `sel_not_bill`.
Creating parallel paths with `po("select")` can help mitigate such errors by selecting features given by the `Selector` and creating an independent data processing streams with the given feature subset.
Below we pass the parallel pipelines to `gunion` as a `list` to ensure they receive the same input, and then combine the outputs with `po("featureunion")`.


```{r 05-pipelines-multicol-3-evalF, eval = FALSE}
path_pca = po("select", id = "s_bill", selector = sel_bill) %>>% po("pca")
path_scale = po("select", id = "s_not_bill", selector = sel_not_bill) %>>% po("scale")

gr = gunion(list(path_pca, path_scale)) %>>% po("featureunion")
gr$plot(horizontal = TRUE)
```

```{r 05-pipelines-multicol-3-evalT, fig.width = 8, eval = TRUE, echo = FALSE}
#| label: fig-pipelines-pcascale
#| fig-cap: Visualization of a `Graph` where features are split into two paths, one with PCA and one with scaling, then combined and returned.
#| fig-alt: 'Seven boxes where first is "<INPUT>" which points to "s_bill -> pca" and "s_not_bill" -> scale", then both "pca" and "scale" point to "featureunion -> <OUTPUT>".'
po_select_bill = po("select", id = "s_bill", selector = sel_bill)
po_select_not_bill = po("select", id = "s_not_bill", selector = sel_not_bill)

path_pca =  po_select_bill %>>% po("pca")
path_scale = po_select_not_bill %>>% po("scale")

gr = gunion(list(path_pca, path_scale)) %>>% po("featureunion")
fig = magick::image_graph(width = 1500, height = 1000, res = 100, pointsize = 24)
gr$plot(horizontal = TRUE)
invisible(dev.off())
magick::image_trim(fig)
```


The `po("select")` method also has the significant advantage that it allows the same set of features to be used on multiple operations and also allows some features to remain untransformed (`affect_columns` effectively filters out any columns not included in a `Selector`).
`r ref("PipeOpNOP")` performs no operation on its inputs and is thus useful when you only want to perform a transformation on a subset of features and leave the others untouched:


```{r 05-pipelines-multicol-5-evalF, eval = FALSE}
gr = gunion(list(
  po_select_bill %>>% po("scale"),
  po_select_not_bill %>>% po("nop")
)) %>>% po("featureunion")
gr$plot(horizontal = TRUE)
```

```{r 05-pipelines-multicol-5-evalT, fig.width = 8, eval = TRUE, echo = FALSE}
#| label: fig-pipelines-selectnop
#| fig-cap: Visualization of our `Graph` where features are split into two paths, features that start with 'bill' are scaled and the rest are untransformed.
#| fig-alt: 'Six boxes where first is "<INPUT>" which points to "s_bill -> scale" and "s_not_bill -> nop", then both "scale" and "nop" point to "featureunion -> <OUTPUT>".'
gr = gunion(list(
  po_select_bill %>>% po("scale"),
  po_select_not_bill %>>% po("nop")
)) %>>% po("featureunion")
fig = magick::image_graph(width = 1500, height = 1000, res = 100, pointsize = 24)
gr$plot(horizontal = TRUE)
invisible(dev.off())
magick::image_trim(fig)
```

```{r 05-pipelines-multicol-6, eval = TRUE}
gr$train(tsk("penguins_simple"))[[1]]$data()[1:3, 1:5]
```


##  Common Patterns and ppl() {#sec-pipelines-ppl}

Now you have the tools to create sequential and non-sequential pipelines, you can now create an infinite number of transformations on `Task`, `Learner`, and `Prediction` objects.
In @sec-pipelines-bagging and @sec-pipelines-stack we will work through two complex examples to demonstrate how you can make complex and powerful graphs using the methods and classes we have already looked at.
However, there are many common problems in ML that can be well solved by the same pipelines, and so to make your life easier we have implemented and saved these pipelines in the `r ref("mlr_graphs", aside = TRUE)` dictionary; pipelines in the dictionary can be accessed with the `r ref("ppl()", aside = TRUE)` sugar function.

At the time of writing, this dictionary includes seven `Graph`s (required arguments included):

* `ppl("bagging", graph)`: In `r mlr3pipelines`, `r index('bagging')`, described in detail in @sec-pipelines-bagging, is the process of running a `graph` multiple times on different data samples and then averaging the results. The `iterations` argument controls the number of bagging iterations, `frac` controls the sampling fraction, the averaging method can also be adjusted through the `averager` parameter.
* `ppl("branch", graphs)`: Uses `r ref("PipeOpBranch")` to create different path branches from the given `graphs` where only one branch is evaluated. This is returned to in more detail in @sec-pipelines-branch.
* `ppl("greplicate", graph, n)`: Create a `Graph` that replicates `graph` (which can also be a single `PipeOp`) `n` times. The pipeline avoids ID clashes by adding a suffix to each `PipeOp`, we will see this pipeline in use in @sec-pipelines-bagging.
* `ppl("ovr", graph)`: `r index('One-versus-rest classification')` for converting `r index('multiclass classification')` tasks into several binary classification tasks with one task for each class in the original task. These tasks are then evaluated by the given `graph`, which should be a learner (or a pipeline containing a learner that emits a prediction). The predictions made on the binary tasks are combined into the multiclass prediction needed for the original task.
* `ppl("robustify")`: Perform common preprocessing steps to make any `Task` compatible with a given `Learner`. Optional arguments are the `r ref("Task")` and `r ref("Learner")` in question, as well as individual switches that decide which kind of preprocessing should be done. The "robustify" Graph element queries the metadata provided by the respective objects and performs only the necessary preprocessing. This pipeline is returned to in more detail in @sec-prepro-robustify.
* `ppl("stacking", base_learners, super_learner)`: `r index('Stacking')`, returned to in detail in @sec-pipelines-stack, is the process of using predictions from one or more models (`base_learners`) as features in a subsequent model (`super_learner`)
* `ppl("targettrafo", graph)`: Create a `Graph` that transforms the prediction target of a task and ensures that any transformations applied during training (using the function passed to the `targetmutate.trafo` hyperparameter) are inverted in the resulting predictions (using the function passed to the `targetmutate.inverter` hyperparameter); an example is given in @sec-prepro-scale.

## Practical Pipelines by Example

In this section we will now put pipelines into practice by demonstrating how to turn weak learners into powerful machine learning models using bagging and stacking.

### Bagging with "greplicate" and "subsample" {#sec-pipelines-bagging}

The basic idea of `r index('bagging')` (from **b**ootstrapp **agg**regat**ing**), introduced by @Breiman1996, is to aggregate create multiple predictors into a single, more powerful predictor (@fig-pipelines-bagging).
Predictions are usually aggregated by the arithmetic mean for regression tasks or majority vote for classification.
The underlying intuition behind bagging is that averaging a set of weak, but diverse (i.e., only weakly correlated) predictors can reduce the variance of the overall prediction.
Each learner is trained on a different random sample of the original data.

Although we have already seen that a pre-constructed bagging pipeline is available with `ppl("bagging")`, in this section we will build our own pipeline from scratch to showcase how to construct a complex `Graph`, which will look something like @fig-pipelines-bagging.


```{r, echo = FALSE}
#| label: fig-pipelines-bagging
#| fig-cap: "Graph that performs Bagging by independently subsampling data and fitting individual decision tree learners. The resulting predictions are aggregated by a majority vote `PipeOp`."
#| fig-alt: 'Graph shows "Dtrain" with arrows to four separate po("subsample") boxes that each have a separate arrow to four more po("classif.rpart") boxes that each have an arrow to the same one po("classif.avg") box.'
#| out.width: "70%"
include_multi_graphics("Figures/mlr3book_figures-26.svg", "Figures/mlr3book_figures-26.png")
```


To begin, we use `po("subsample")` to sample a fraction of the data (here 70%), which is then passed to a classification tree.


```{r 05-pipelines-non-sequential-009, eval = TRUE}
single_pred = po("subsample", frac = 0.7) %>>% lrn("classif.rpart")
```


Next we use `r ref("pipeline_greplicate")` to copy the graph `single_pred` 10 times (`n = 10`) and finally `po("classifavg")` to take the majority vote of all predictions, note that we pass `innum = 10` to `"classifavg"` to tell the `PipeOp` to expect 10 inputs.


```{r 05-pipelines-non-sequential-010-evalT, eval = FALSE}
pred_set = ppl("greplicate", graph = single_pred, n = 10)
bagging = pred_set %>>% po("classifavg", innum = 10)
bagging$plot()
```

```{r 05-pipelines-non-sequential-010-evalF, echo = FALSE}
#| label: fig-pipelines-bagginggraph
#| fig-cap: Constructed bagging `Graph` with one input being sampled many times for 10 different learners.
#| fig-alt: 'Parallel pipeline showing "<INPUT>" pointing to ten PipeOps "subsample_1",...,"subsample_10" that each separately point to "classif.rpart_1",...,"classif.rpart_10" respectively, which all point to the same "classifavg -> <OUTPUT>".'
pred_set = ppl("greplicate", graph = single_pred, n = 10)
bagging = pred_set %>>% po("classifavg", innum = 10)
fig = magick::image_graph(width = 2000, height = 1000, res = 100, pointsize = 17)
bagging$plot()
invisible(dev.off())
magick::image_trim(fig)
```


Now let us see how well our bagging pipeline compares to the single decision tree and to a random forest, we will test this on the `sonar` task.


```{r 05-pipelines-non-sequential-013}
l_bag = as_learner(bagging)
l_bag$id = "bagging"
learner_rpart = lrn("classif.rpart")
grid = benchmark_grid(tsk("sonar"),
  c(l_bag, learner_rpart, lrn("classif.ranger")), rsmp("cv", folds = 3))
bmr = benchmark(grid)
bmr$aggregate()[, .(learner_id, classif.ce)]
```


The bagged learner performs noticeably better than the decision tree but worse than the random forest.
The steps above are saved as an accessible graph in `r ref("pipeline_bagging()")`, to construct the above we would simply construct the `"bagging"` pipeline specifying the learner to 'bag', number of iterations, fraction of data to sample, and the `PipeOp` to average the predictions, note we set `collect_multiplicity = TRUE` which collects the predictions across paths, which technically use the `r ref("Multiplicity")` method that we will not discuss here but refer the reader to the documentation.


```{r, eval = FALSE}
ppl("bagging", lrn("classif.rpart"),
  iterations = 10, frac = 0.7,
  averager = po("classifavg", collect_multiplicity = TRUE))
```


The main difference between our pipeline and a random forest is that the latter also performs feature subsampling, where only a random subset of available features is considered at each split point.
While we cannot implement this directly with `r mlr3pipelines`, we can use a custom `Selector` method to approximate this method.
For efficiency we will now use `ppl("bagging")` to recreate the steps above, we also create a custom `Selector` by passing a function that takes as input the task and returns a sample of the features, we sample the square root of the number of features to mimic the implementation in `r ref("ranger::ranger")`.


```{r 05-bagging-ex}
# custom selector
selector_subsample = function(task) {
  sample(task$feature_names, sqrt(length(task$feature_names)))
}

# bagging pipeline with our selector
bagging_quasi_rf = ppl("bagging",
  graph = po("select", selector = selector_subsample) %>>%
    lrn("classif.rpart", minsplit = 1),
  iterations = 100,
  averager = po("classifavg", collect_multiplicity = TRUE)
)

# bootstrap resampling
bagging_quasi_rf$param_set$values$subsample.replace = TRUE

# convert to learner
l_quasi_rf = as_learner(bagging_quasi_rf)
l_quasi_rf$id = "quasi.rf"

# benchmark
grid = benchmark_grid(tsks("sonar"),
  c(l_quasi_rf, lrn("classif.ranger", num.trees = 100)),
  rsmp("cv", folds = 5)
)
bmr = benchmark(grid)
bmr$aggregate()[, .(learner_id, classif.ce)]
```


In only a few lines of code, we took a weak learner and turned it into a powerful model that we can see is comparable to the implementation in `r ref("ranger::ranger")`.
In the next section we will look at a second example, which makes use of cross-validation within pipelines.

### Stacking with "learner_cv" {#sec-pipelines-stack}

`r index('Stacking')` [@Wolpert1992] is another technique that can significantly improve model performance.
The basic idea behind stacking is to use predictions from one model as features for a subsequent model to try to improve performance (@fig-pipelines-stacking).
As with bagging, we will demonstrate how to create a stacking pipeline manually, although a pre-constructed pipeline is available with `ppl("stacking")`.


```{r eval=TRUE, fig.align='center', echo = FALSE}
#| label: fig-pipelines-stacking
#| fig-cap: "Graph that performs Stacking by fitting three models and using their outputs as features for another model after combining with `PipeOpFeatureUnion`."
#| fig-alt: 'Graph shows "Dtrain" with arrows to three boxes: "Decision Tree", "KNN", and "Lasso Regression". Each of these points to the same "Feature Union -> Logistic Regression".'
#| out.width: 70%
include_multi_graphics("Figures/mlr3book_figures-27.svg", "Figures/mlr3book_figures-27.png")
```


Stacking depends on the predictions of models that are trained on the same data.
Therefore, analogously to nested resampling when tuning (@sec-nested-resampling), we must limit overfitting by stacking features from cross-validated data, this is possible in pipelines with `r ref("PipeOpLearnerCV", aside = TRUE)`.
Each of the models is then trained on a subset of folds and makes predictions on the out-of-fold data, obtaining predictions for all data points in our input data without 'leaking' information into the prediction stage.

We first create various learners that produce the predictions that will be used as features, known as the "level 0" learners.
Like bagging, stacking also often uses 'weak' learners that might not perform well on their own, in this example we use a classification tree, `r index('k-nearest-neighbors')` (KNN)\index{KNN|see{K-nearest-neighbors}}, and a regularized GLM.
Each learner is wrapped in `po("learner_cv")` which trains and predicts with the given learner, returning the model predictions in a new `Task` as its output.


```{r 05-pipelines-non-sequential-015}
learner_rpart = lrn("classif.rpart", predict_type = "prob")
po_rpart_cv = po("learner_cv", learner = learner_rpart,
  resampling.folds = 2, id = "rpart_cv"
)

learner_knn = lrn("classif.kknn", predict_type = "prob")
po_knn_cv = po("learner_cv",
  learner = learner_knn,
  resampling.folds = 2, id = "knn_cv"
)

learner_glmnet = lrn("classif.glmnet", predict_type = "prob")
po_glmnet_cv = po("learner_cv",
  learner = learner_glmnet,
  resampling.folds = 2, id = "glmnet_cv"
)
```


These learners are combined using `r ref("gunion()")`, and `po("featureunion")` is used to merge their predictions.
This is demonstrated in the output of `$train()`:


```{r 05-pipelines-non-sequential-016, warning = FALSE}
level_0 = gunion(list(po_rpart_cv, po_knn_cv, po_glmnet_cv))
combined = level_0 %>>% po("featureunion")

combined$train(tsk("sonar"))[[1]]$head()
```


:::{.callout-tip}

## Retaining features

In this example the original features were removed as each `PipeOp` only returns the predictions made by the respective learners.
To retain the original features, simply include `po("nop")` in the list passed to `r ref("gunion()")`.
:::

The resulting task contains the predicted probabilities for both classes made from each of the level 0 learners.
However as the probabilities always add up to 1 we only need the predictions for one of the classes (as this is a binary classification task), so we can use `po("select")` to only keep predictions for one class (we choose `"M"` in this example).



```{r 05-pipelines-non-sequential-017}
stack = combined %>>%
  po("select", selector = selector_grep("\\.M"))
```


Finally we can combine our pipeline with the final model that will take these predictions as its input.


```{r 05-pipelines-non-sequential-018-evalF, eval = FALSE}
stack = stack %>>% po("learner", lrn("classif.log_reg"))
stack$plot(horizontal = TRUE)
```

```{r 05-pipelines-non-sequential-018-evalT, fig.width = 10, echo = FALSE}
#| label: fig-pipelines-stackinggraph
#| fig-cap: 'Constructed stacking Graph with one input being passed to three weak learners whose predictions pass the logistic regression.'
#| fig-alt: 'Graph with "<INPUT>" in the first box with arrows to three boxes: "rpart_cv", "knn_cv", "glmnet_cv", which all have arrows pointing to the same boxes: "featureunion -> select -> classif.log_reg -> <OUTPUT>".'
stack = stack %>>% po("learner", lrn("classif.log_reg"))
fig = magick::image_graph(width = 2000, height = 1000, res = 100, pointsize = 24)
stack$plot(horizontal = TRUE)
invisible(dev.off())
magick::image_trim(fig)
```


As we used logistic regression as the final model, we can inspect the weights of the level 0 learners by looking at the final trained model:


```{r 05-pipelines-non-sequential-019-x, warning = FALSE}
learner_stack = as_learner(stack)
learner_stack$train(tsk("sonar"))
learner_stack$base_learner()$model
```


The model weights suggest that `r c("rpart", "knn", "glmnet")[which.max(learner_stack$base_learner()$model$coefficients[-1])]` influences the predictions the most with the largest coefficient.
To confirm this we can benchmark the individual models alongside the stacking pipeline.


```{r 05-pipelines-non-sequential-019-1-background, warning = FALSE}
learner_stack$id = "stacking"
grid = benchmark_grid(
  tsks("sonar"),
  list(learner_rpart, learner_knn, learner_glmnet, learner_stack),
  rsmp("repeated_cv")
)
bmr = benchmark(grid)
bmr$aggregate()[, .(learner_id, classif.ce)]
```


This experiment confirms that of the individual models, the KNN learner performs the best, however our stacking pipeline outperforms them all.
Now that we have seen the inner workings of this pipeline, next time you might want to more efficiently create it using `r ref("pipeline_stacking")`, to copy the example above you would run:


```{r, eval = FALSE}
ppl("stacking",
  base_learners = lrns(c("classif.rpart", "classif.kknn", "classif.glmnet")),
    super_learner = lrn("classif.log_reg")
)
```


Having covered the building blocks of `r mlr3pipelines` and seen these in practice, we will now turn to more advanced functionality, combining pipelines with tuning.

## `r index('Tuning')` Graphs {#sec-pipelines-tuning}

By making use of `GraphLearner`, it is possible to tune a `Graph` of arbitrary complexity using `r mlr3tuning`.
However, tuning pipelines is not straightforward as not only do you have to choose which `Learner` hyperparameters to tune, but you also have to consider which `PipeOp`s to include in the pipeline and which of their hyperparameters to tune.
For example we saw how to create different complexities of bagging pipelines in @sec-pipelines-bagging, if we wanted to tune this we would have to decide: 1) which `Learner` to use as our weak learner; 2) the hyperparameters to tune for the weak learner and their ranges; 3) if we should tune the replications of `"greplicate"`; 4) if we should tune or select the averaging method; 5) should we add a custom feature selection and tune this; 6) what sampling method should we use and should the fraction be tuned?
This gets even more complicated with stacking if we have many weak learners we might want to tune.
And yet more complicated if we also want to decide if further preprocessing steps improve model performance.
To consider these questions, in @sec-pipelines-combined we will look at how to tune `Learner` and `PipeOp` hyperparameters and then in @sec-pipelines-branch and @sec-pipelines-proxy we will takes this a step further to see how we can also tune the choice of which operations to include in the pipeline, known as "`r index('Combined Algorithm Selection and Hyperparameter optimization')`"\index{CASH|see{Combined Algorithm Selection and Hyperparameter optimization}}[@Thornton2013].

### Tuning Graph Hyperparameters {#sec-pipelines-combined}

Let us consider a simple, sequential pipeline using `po("pca")` followed by `lrn("classif.kknn")`:


```{r}
graph_learner = as_learner(po("pca") %>>%
  lrn("classif.kknn"))
```


Now if we wanted to tune the `k` parameter of the KNN model we *could* use an `AutoTuner` and pass this to the graph as a `Learner`:


```{r}
tuned_knn = auto_tuner(tnr("random_search"),
  lrn("classif.kknn", k = to_tune(1, 32)), rsmp("holdout"),
  term_evals = 10)

pipe = as_learner(po("pca") %>>% tuned_knn)
resample(tsk("sonar"), pipe, rsmp("holdout"))$aggregate()
```


However, if we also wanted to tune the `rank.` parameter of our PCA `PipeOp` then this would be inefficient as the optimal hyperparameters may depend on each other.
Instead we would should tune the graph directly by tuning `PipeOp`s in the exact same way as `Learner`s:


```{r}
knn = lrn("classif.kknn", k = to_tune(1, 32))
pca = po("pca", rank. = to_tune(2, 20))
pipe = as_learner(pca %>>% knn)
pipe$param_set$values
```


We can see how the pipelines `$param_set` includes the tune tokens for all elements of the pipeline so when we tune the pipeline these are combined into different hyperparameter configurations.
We can compare the tuned and untuned pipeline in a benchmark experiment by using an `AutoTuner`:


```{r}
tuned_pipe = auto_tuner(tnr("random_search"), pipe, rsmp("holdout"),
  term_evals = 10)
untuned_pipe = po("pca") %>>% lrn("classif.kknn")
design = benchmark_grid(tsk("sonar"), c(tuned_pipe, untuned_pipe),
  rsmp("cv", folds = 5))
benchmark(design)$aggregate()[, .(learner_id, classif.ce)]
```


Using the same syntax as we have learnt in @sec-optimization, you can now tune hyperparameters for fixed pipelines.
Tuning pipelines will usually take longer than tuning individual learners as training steps are often more complex and the search space may be much larger, therefore parallelization is often required in practice (@sec-parallelization) and/or more efficient tuning methods for searching large search spaces such as Bayesian Optimization (@sec-bayesian-optimization.)

### Tuning Alternative Paths with po("branch") {#sec-pipelines-branch}

In the previous section we tuned the KKNN and decision tree in the stacking pipeline, as well as tuning the rank of the PCA.
However, we tuned the PCA without asking if it was beneficial at all, in this section we will answer that question by making use of `r ref("PipeOpBranch", aside = TRUE)` and `r ref("PipeOpUnbranch", aside = TRUE)`, which make it possible to specify multiple alternative paths.
`po("branch")` creates multiple paths such that data can only flow through *one* of these as determined by the `selection` hyperparameter (@fig-pipelines-alternatives).
This concept makes it possible to tune alternative preprocessing methods or alternative learner models.


```{r, echo = FALSE}
#| label: fig-pipelines-branching
#| fig-cap: 'Figure demonstrates the `po("branch")` and `po("unbranch")` operators where three separate branches are created and data only flows through the PCA, which is specified with the argument to `selection`.'
#| fig-alt: 'Graph with "Dtrain" on the left with an arrow to `po("branch", selection = "pca")` which then has a dark shaded arrow to a box that says "PCA". Above this box is a transparent box that says "PipeOpNoop" and below the "PCA" box is another transparent box that says "YeoJohnson", the implication is that only the "PCA" box is active. The "PCA" box then has an arrow to `po("unbranch")` -> "Learner".'
#| out.width: "70%"
include_multi_graphics("Figures/mlr3book_figures-24.svg", "Figures/mlr3book_figures-24.png")
```


To demonstrate alternative paths we will make use of the MNIST [@lecun1998gradient] data, which is useful for demonstrating preprocessing.
The data is loaded from OpenML, which is described in @sec-openml, we subset the data to 5% of its original size for efficiency.


```{r}
library(mlr3oml)
mnist_task = otsk(id = 3573)
mnist_task = as_task(mnist_task)$
  filter(sample(70000, 1000))$
  select(mnist_task$feature_names[sample(700, 100)])
```


`po("branch")` is initialized either with the number of branches, or with a `character`-vector indicating the names of the branches, the latter makes the `selection` hyperparameter (discussed below) more readable.
Below we create three branches: do nothing (`po("nop")`), apply PCA (`po("pca")`), remove constant features (`po("removeconstants")`) then apply the `r index('Yeo-Johnson')` transform (`po("yeojohnson")`).
It is important to use `po("unbranch")` (with same arguments as `"branch"`) to ensure that the outputs are merged into one result objects.


```{r 05-pipelines-non-sequential-003, eval = TRUE}
paths = c("nop", "pca", "yeojohnson")

graph = po("branch", paths, id = "branch_PO") %>>%
  gunion(list(
    po("nop"),
    po("pca"),
    po("removeconstants") %>>% po("yeojohnson")
  )) %>>% po("unbranch", paths, id = "unbranch_PO")
```


The resulting `Graph` then looks as follows:


```{r 05-pipelines-non-sequential-004-evalF, eval = FALSE}
graph$plot(horizontal = TRUE)
```

```{r 05-pipelines-non-sequential-004-evalT, fig.width = 11, echo = FALSE}
#| label: fig-pipelines-branchone
#| fig-cap: 'Graph with branching to three different paths that are split with `po("branch")` and combined with `po("unbranch")`.'
#| fig-alt: 'Graph starting with "<INPUT> -> branch_po" which has three arrows to "removeconstants -> yeojohnson", "nop", and "pca", which all then point to "unbranch_po -> <OUTPUT>".'
fig = magick::image_graph(width = 2000, height = 1000, res = 100, pointsize = 24)
graph$plot(horizontal = TRUE)
invisible(dev.off())
magick::image_trim(fig)
```


The output of this `Graph` depends on the setting of the `branch.selection` hyperparameter:


```{r 05-pipelines-branch-01}
graph$param_set$values$branch_PO.selection = "pca"  # use the "PCA" path
head(graph$train(mnist_task)[[1]]$feature_names)
graph$param_set$values$branch_PO.selection = "nop"  # use the "No-Op" path
head(graph$train(mnist_task)[[1]]$feature_names)
```


`ppl("branch")` simplifies the above by allowing you to just pass the different paths to the `graphs` argument:


```{r, eval = FALSE}
ppl("branch", graphs = pos(c("nop", "pca", "yeojohnson")))
```


Tuning the `selection` hyperparameter can help determine which of the possible options works best in combination with a given learner:


```{r}
graph_rpart = as_learner(graph %>>% lrn("classif.rpart"))
graph_rpart$param_set$values$branch_PO.selection = to_tune(paths)
instance = tune(tnr("random_search"), mnist_task, graph_rpart,
  rsmp("holdout"), msr("classif.ce"), term_evals = 10)
instance$result
```


Here we see that in combination with the decision tree, `pca` was the best performing `PipeOp`.
Branching can even be used to tune which of several learners is most appropriate for a given dataset.
We now extend this example to add the choice between a decision tree and KKNN:


```{r 05-pipelines-branch-02-evalF, eval = FALSE}
graph_learner = graph %>>%
  ppl("branch", lrns(c("classif.rpart", "classif.kknn")))
graph_learner$plot()
```

```{r 05-pipelines-branch-02-evalT, fig.width = 11, echo = FALSE}
#| label: fig-pipelines-branchtwo
#| fig-cap: 'Graph with branching to three different paths that are split with `po("branch")` and combined with `po("unbranch")`.'
#| fig-alt: 'Graph starts with "<INPUT> -> branch_po" which has three arrows to "removeconstants -> yeojohnson", "nop", and "pca", which all then point to "unbranch_po -> branch", which then has two arrows to "classif.rpart" and "classif.kknn" which then both point to "unbranch -> <OUTPUT>".'
graph_learner = graph %>>%
  ppl("branch", lrns(c("classif.rpart", "classif.kknn")))
fig = magick::image_graph(width = 2000, height = 1000, res = 100, pointsize = 18)
graph_learner$plot()
invisible(dev.off())
magick::image_trim(fig)
```


Now we can see why we added those IDs earlier to avoid name clashes.

Finally, we will additionally tune the `k` hyperparameter of the KNN learner, as it may depend on the type of preprocessing performed.
However, this hyperparameter is only active when the "`classif.kknn`" path is chosen and so we set a dependency (@sec-optimization-depends):


```{r 05-pipelines-branch-03}
graph_learner = as_learner(graph_learner)

graph_learner$param_set$set_values(
  branch_PO.selection = to_tune(paths),
  branch.selection = to_tune(c("classif.rpart", "classif.kknn")),
  classif.kknn.k = to_tune(p_int(1, 32, depends = branch.selection == "classif.kknn"))
)

instance = tune(
  tuner = tnr("random_search"),
  task = mnist_task,
  learner = graph_learner,
  resampling = rsmp("cv", folds = 3),
  measure = msr("classif.ce"),
  term_evals = 10
)

instance$result[, .(branch_PO.selection, classif.kknn.k, branch.selection, classif.ce)]
```


By tuning the pipeline hyperparameters and the decision of which operations and learners to include, we were able to achieve good model performance using the KNN learner with the Yeo-Johnson transform.

### Tuning with po("proxy") {#sec-pipelines-proxy}

:::{.callout-note appearance="simple"}
## This section covers advanced ML or technical details.
:::



`po("proxy")` is a meta-operator that performs the operation that is stored in its `content` hyperparameter, which could be another `PipeOp` or `Graph`, it can therefore be used to tune over and select different `PipeOp`s or `Graph`s that could be passed to this hyperparameter (@fig-pipelines-alternatives).


```{r, echo = FALSE}
#| label: fig-pipelines-alternatives
#| fig-cap: 'Figure demonstrates the `po("proxy")` operator with a `PipeOp` as its argument.'
#| fig-alt: 'Graph with "Dtrain -> po("proxy", content = PCA) -> Learner", the "PCA" is represented as a box that implies a PipeOp.'
#| out.width: "70%"
include_multi_graphics("Figures/mlr3book_figures-25.svg", "Figures/mlr3book_figures-25.png")
```


To recreate the example above with `po("proxy")`, the first step is to create placeholder `PipeOpProxy` operators to stand in for the operations (i.e., different paths) that should be tuned.


```{r}
graph_learner = po("proxy", id = "preproc") %>>%
  po("proxy", id = "learner")
graph_learner = as_learner(graph_learner)
```


The tuning space for the `content` hyperparameters should be a discrete set of possibilities to be evaluated, passed as a `r ref("p_fct")` (@sec-tune-ps).
For the `"preproc"` proxy operator this would simply be the different `PipeOp`s that we want to consider:


```{r}
# define content for the preprocessing proxy operator
preproc.content = p_fct(list(
  nop = po("nop"),
  pca = po("pca"),
  yeojohnson = po("removeconstants") %>>% po("yeojohnson")
))
```


For the `"learner"` proxy, this is more complicated as the selection of the learner depends on more than one search space component:
The choice of the learner itself (`classif.rpart` or `classif.kknn`) and the tuned `k` hyperparameter of the KNN learner.
To enable this we pass a transformation to `.extra_trafo` (@sec-tune-trafo).
Note that inside this transformation we clone `learner.content` otherwise we would end up modifying the original `r ref("Learner")` object inside the search space by reference (@sec-r6).


```{r}
# define content for the learner proxy operator
learner.content = p_fct(list(
    classif.rpart = lrn("classif.rpart"),
    classif.kknn = lrn("classif.kknn")
))

# define transformation to set the content values
trafo = function(x, param_set) {
    if (!is.null(x$classif.kknn.k)) {
      x$learner.content = x$learner.content$clone(deep = TRUE)
      x$learner.content$param_set$values$k = x$classif.kknn.k
      x$classif.kknn.k = NULL
    }
    x
}
```


We can now put this all together, add the KNN tuning, and run the experiment.


```{r}
search_space = ps(
  preproc.content = preproc.content,
  learner.content = learner.content,
  # tune KKNN parameter as normal
  classif.kknn.k = p_int(1, 32, depends = learner.content == "classif.kknn"),
  .extra_trafo = trafo
)

instance = tune(
  tuner = tnr("random_search"),
  task = mnist_task,
  learner = graph_learner,
  resampling = rsmp("cv", folds = 3),
  measure = msr("classif.ce"),
  search_space = search_space,
  term_evals = 10
)

as.data.table(instance$result)[,
  .(preproc.content,
    classif.kknn.k = x_domain[[1]]$learner.content$param_set$values$k,
    learner.content, classif.ce)
]
```


Once again, the best configuration is a KNN learner with the Yeo-Johnson transform.
In practice `"proxy"` offers complete flexibility and may be more useful for more complicated use-cases, whereas `ppl("branch")` is more efficient in more straightforward scenarios.

### Putting Everything Together with Hyperband {#sec-hyperband-example-svm}

:::{.callout-note appearance="simple"}
## This section covers advanced ML or technical details.
:::



In @sec-hyperband-tuner we learnt about the `r index('Hyperband')` tuner and how it can make use of `r index('fidelity parameters')` to efficiently tune learners.
Now that you have learnt about pipelines and how to tune them, in this short section we will briefly return to Hyperband to showcase how we can put together everything we have learnt in this chapter to allow Hyperband to be used with any `Learner`.

We previously saw how some learners have hyperparameters that can 'natively' be fidelity parameters, such as the number of trees in a random forest.
However, using pipelines, we can now create a fidelity parameter for any model using `po("subsample")`.
The `frac` parameter of `po("subsample")` controls the amount of data fed into the subsequent `Learner`.
In general, feeding less data to a `Learner` results in quicker model training but poorer quality predictions compared to when more training data is supplied; thus making the fraction of data to subsample the perfect candidate for a fidelity parameter.

In the code below we will demonstrate how to use the `frac` hyperparameter of `po("subsample")` as a fidelity parameter for any `Learner`.
This works as subsampling can be used to reduce the data size and thus speed up the

As we saw earlier, `po("subsample")`\index{subsampling} samples the data and passes the subset to the next `PipeOp` in a `Graph`, the `frac` parameter controls how much data to sample.
In this example we will optimize the SVM\index{SVM|see{Support Vector Machine}} hyperparameters, `cost` and `gamma`, on the `sonar` dataset:


```{r optimization-070}
learner = lrn("classif.svm", id = "svm", type = "C-classification",
  kernel = "radial", cost  = to_tune(1e-5, 1e5, logscale = TRUE),
  gamma = to_tune(1e-5, 1e5, logscale = TRUE))
```


We then construct `po("subsample")` and specify that we want to use the `frac` parameter between $[3^{-3}, 1]$ as our fidelity parameter and set the `"budget"` tag to pass this information to Hyperband.
We add this to our SVM and create a `GraphLearner`.


```{r}
graph_learner = as_learner(
  po("subsample", frac = to_tune(p_dbl(3^-3, 1, tags = "budget"))) %>>%
  learner
)
```


As good practice we encapsulate our learner and add a fallback to prevent fatal errors (@sec-tuning-errors).


```{r}
graph_learner$encapsulate = c(train = "evaluate", predict = "evaluate")
graph_learner$timeout = c(train = 30, predict = 30)
graph_learner$fallback = lrn("classif.featureless")
```


Now we can tune our SVM by tuning our `GraphLearner` as normal, below we set `eta = 3` for Hyperband.


```{r optimization-076}
instance = tune(
  tuner = tnr("hyperband", eta = 3),
  task = tsk("sonar"),
  learner = graph_learner,
  resampling = rsmp("cv", folds = 3),
  measures = msr("classif.ce")
)

unlist(instance$result$x_domain[[1]][2:3])
```


<!-- TODO: ADD FEATURE SELECTION EXAMPLES THAT USE GRAPHS AND TUNING -->

## Conclusion

In this chapter, we built on what we learnt in @sec-pipelines to develop complex non-sequential `Graph`s.
We saw how to build our own graphs, as well as how to make use of `ppl()` to load `Graph`s that are available in `r mlr3pipelines`.
We then looked at different ways to tune pipelines, including joint tuning of hyperparameters and tuning the selection of `PipeOp`s in a `Graph`.
In @sec-preprocessing we will put all of this into practice as we look at pipelines for data preprocessing.

@tbl-api-pipelines-nonseq provides an overview of the most important methods and classes discussed in this chapter.

| Underlying R6 Class | Constructor (if applicable) | Important methods |
| ----- | ------ | --- |
| `r ref("Graph")` | `r ref("ppl()")` | `$train()`/`$predict()` |
| `r ref("PipeOpSelect")` | `r ref("selector_grep()")`/`r ref("selector_type()")`/`r ref("selector_invert()")` |  |
| `r ref("PipeOpBranch")`/`r ref("PipeOpUnbranch")` | `po("branch")`/`po("unbranch")` |  |
| `r ref("PipeOpProxy")` | `po("proxy")` |  |

: Important classes and functions covered in this chapter with underlying `R6` class (if applicable), constructor to create an object of the class, and important class methods. {#tbl-api-pipelines-nonseq}

## Exercises

1. Consider the `r ref("PipeOpSelect", "po(\"select\")")` in @sec-pipelines-stack that is used to only keep the columns ending in "`M`".
  If the classification task had more than two classes, it would be more appropriate to list the single class we *do not* want to keep, instead of listing all the classes we do want to keep.
  How would you do this, using the `r ref("Selector")` functions provided by `r ref_pkg("mlr3pipelines")`?
  (Note: The `"classif.log_reg"` learner used in @sec-pipelines-stack cannot handle more than two classes. To build the entire stack, you will need to use a different learner).
2. How would you solve the previous exercise without explicitly naming the class you want to exclude, so that your Graph works for any classification task?   Hint: look at the `selector_subsample` in @sec-pipelines-bagging.
3. Use the `r ref("PipeOpImputeLearner", "po(\"imputelearner\")")` PipeOp to impute missing values in the `r ref("mlr_tasks_penguins", "tsk(\"penguins\")")` task using learners based on `r ref("ranger::ranger")`.
  Hint 1: you will need to use `r ref("PipeOpImputeLearner", "po(\"imputelearner\")")` twice, once for numeric features with `r ref("LearnerRegrRanger", "lrn(\"regr.ranger\")")`, and once for categorical features with `r ref("LearnerClassifRanger", "lrn(\"classif.ranger\")")`.
  Using the `affect_columns` argument of `r ref("PipeOpImputeLearner", "po(\"imputelearner\")")` will help you here.
  Hint 2: `r ref("ranger::ranger")` itself does not support missing values, but it is trained on all the features of `r ref("mlr_tasks_penguins", "tsk(\"penguins\")")` that it is not currently imputing, some of which will also contain missings.
  A simple way to avoid problems here is to use `r ref("pipeline_robustify", "ppl(\"robustify\")")` *inside* `r ref("PipeOpImputeLearner", "po(\"imputelearner\")")` next to the `r ref("ranger::ranger")` learner.

::: {.content-visible when-format="html"}
`r citeas(chapter)`
:::

