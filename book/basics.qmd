# Fundamentals {#sec-basics}

{{< include _setup.qmd >}}

`r authors("Fundamentals")`

In this chapter, we will introduce the `r mlr3` objects and corresponding `r ref_pkg("R6")` classes that implement the essential building blocks of `r index("machine learning")` (ML).
These building blocks include the data (and the methods of creating training and test sets), the ML `r index('algorithm')` (and its training and prediction process), the configuration of a ML algorithm through its `r index('hyperparameters')`, and evaluation measures to assess the quality of predictions.

In the simplest definition, `r index('machine learning', aside = TRUE)` is the process of using computer models to learn relationships from data.
`r index('Supervised learning', aside = TRUE)` is a subfield of ML in which datasets consist of observations (rows in tabular data) that are labeled, which means that each data point includes `r index('features')` (columns in tabular data) and a quantity that we are trying to predict, also called a `r index('target')`.
A classic example might be trying to predict a car's miles per gallon (the target) based on properties (the features) such as horsepower and the number of gears (we will return to this particular example later).
In `r mlr3`, we refer to datasets, and their associated metadata as `r index('tasks')` (@sec-tasks).
The term 'tasks' is used to refer to the ML task (i.e., mathematical problem) that we are trying to solve.
Tasks are defined by the features used for prediction and the targets to predict, so there can be multiple tasks associated with any given dataset.
For example, predicting miles per gallon (mpg) from horsepower is one task, predicting horsepower from miles per gallon is another task, and predicting number of gears from model is yet another task, and so on.

Supervised learning can be further divided into `r index('regression', aside = TRUE)` -- which is prediction of numeric target values, e.g. predicting a car's mpg -- and `r index('classification', aside = TRUE)` -- which is prediction of categorical values/labels, e.g., predicting a car's model.
Other tasks are also encompassed by supervised learning, and these are returned to in @sec-special, we will also consider `r index('unsupervised learning')` tasks in that chapter.
For any supervised learning task, the goal is to build a `r index('model')` that captures the relationship between features and target and often to `r index('train')` a model to be able to make predictions for new and previously unseen data.
A `r index('model', aside = TRUE)` is formally a mapping from a feature vector to predictions, such models are induced by passing `r index('training data')` to `r index('machine learning algorithms')`, including `r index('decision trees')`, `r index('support vector machines')`, `r index('neural networks')`, and many more.
ML algorithms are called `r index('learners', aside = TRUE)` in `r mlr3` (@sec-learners) as given data, they learn models.
Each learner has a parameterized space that potential models are drawn from and during the training process, these parameters are fitted to best match the data.
For example, the parameters could be the weights given to individual features when training a linear regression model.
During training, all ML algorithms are `r index('fitted', aside = TRUE)`/`r index('trained', aside = TRUE)` by optimizing a loss-function that quantifies the mismatch between ground truth target values in the training data and the predictions of the model.

For a model to be most useful, it should generalize beyond the training data to make 'good' predictions (@sec-predicting) on new and previously 'unseen' (by the model) data.
The simplest way to determine if a model will generalize to make 'good' predictions for new data, is to split data into `r index('training data', aside = TRUE)` and `r index('test data', aside = TRUE)` -- where the model is trained on the training data and then the separate test data is used to evaluate models in an unbiased way by assessing to what extent the model has learned the true relationships that underlie the data (@sec-performance).
This evaluation procedure estimates a model's `r index('generalization error', aside = TRUE)`, i.e., how well we expect the model to perform in general.
There are many ways to evaluate models (@sec-performance) and to split data for estimating generalization error (@sec-resampling).

This brief overview of ML provides the basic knowledge required to use software in `mlr3` and is summarized in @fig-ml-abstraction-basics.
In the rest of this book we will also provide introductions to methodology when relevant and in @sec-special we will also provide introduction to applications in other tasks.
For texts about ML, including detailed methodology and underpinnings of different algorithms, we recommend @hastie2001, @james_introduction_2014, and @bishop_2006.

In the next few sections we will look at the building blocks of `r mlr3` using regression as an example, we will then consider how to extend this to classification in @sec-classif, for other tasks see @sec-special.

```{r basics-fig-1, echo=FALSE}
#| label: fig-ml-abstraction-basics
#| fig-cap: "General overview of the machine learning process."
#| fig-align: "center"
#| fig-alt: "A flowchart starting with the task (data), which splits into training- and test sets. The training set is used with the learner to fit a model, which is then used with the test set to make predictions. A performance measure is applied to the predictions and results in a performance estimate. Resampling refers to the repeated application of this process."
knitr::include_graphics("Figures/ml_abstraction.svg")
```

## Tasks {#sec-tasks}

`r index('Tasks')` are objects that contain the (usually tabular) data and additional metadata that define a ML problem.
The `r index('metadata')` contain, for example, the name of the target feature for supervised ML problems.
This information is used automatically by operations that can be performed on a task so that for example the user does not have to specify the prediction target every time a model is trained.

### Constructing Tasks {#sec-tasks-built-in}

`r mlr3` includes a few predefined ML tasks in the `r ref("mlr_tasks", aside = TRUE, index = TRUE)` `Dictionary`.

```{r basics-001}
mlr_tasks
```

To get a task from the dictionary, use the `r ref("tsk()", index = TRUE, aside = TRUE)` function and assign the return value to a new variable.
Below we retrieve the task `r ref("mlr_tasks_mtcars")`, which uses the `r ref("datasets::mtcars")` dataset:

```{r basics-002}
task_mtcars = tsk("mtcars")
task_mtcars
```

:::{.callout-tip}
## Help pages

Usually in R, the help pages of functions can be queried with `?`.
The same is true of R6 classes, so if you want to find the help page of the `mtcars` task you could use `?mlr_tasks_mtcars`.
We have also added a `$help()` method to many of our classes, which allows you to access the help page of a class from any instance of that class, for example: `tsk("mtcars")$help()`.
:::

:::{.callout-tip}
## Class naming conventions

Many object names in `mlr3` are standardized according to the convention: `mlr_<types>_<key>`.
Where `<types>` will be `tasks`, `learners`, `measures`, and others to be covered later in the book; and `<key>` refers to the ID of the object.
To simplify the process of constructing objects, you only need to know the object key and the sugar function for construction.

For example: `mlr_tasks_mtcars` becomes `tsk("mtcars")`;`mlr_learners_regr.rpart` becomes `lrn("regr.rpart")`; and `mlr_measures_regr.mse` becomes `msr("regr.mse")`.
:::

To create your own regression task, you will need to construct a new instance of the `r ref("TaskRegr", aside = TRUE, index = TRUE)`.
The simplest way to do this is with the function `r ref("as_task_regr()", aside = TRUE, index = TRUE)` to convert a `data.frame` type object to a regression task, specifying the target feature by passing this to the `target` argument.
By example, we will imagine that `mtcars` was not already available as a predefined task in `r mlr3`.
In the code below we load the `datasets::mtcars` dataset, print its properties, subset the data to only include columns `"mpg"`, `"cyl"`, `"disp"`, print the modified data's properties, and then setup a regression task called `"cars"` (`id = "cars"`) in which we will try to predict miles per gallon (`target = "mpg"`) from number of cylinders (`"cyl"`) and displacement (`"disp"`):

```{r basics-006}
library(mlr3)
data("mtcars", package = "datasets")
mtcars_subset = subset(mtcars, select = c("mpg", "cyl", "disp"))
str(mtcars_subset)
task_mtcars = as_task_regr(mtcars_subset, target = "mpg", id = "cars")
```

The data can be in any tabular format, e.g. a `data.frame()`, `data.table()`, or `tibble()`.
The `target` argument specifies the prediction target column.
The `id` argument is optional and specifies an identifier for the task that is used in plots and summaries; if omitted the variable name of the data will be used as the `id`.

:::{.callout-tip}
As many ML models do not work properly with arbitrary `r link("https://en.wikipedia.org/wiki/UTF-8", "UTF8 names")`, `r mlr3` defaults to throw an error if any of the column names passed to `r ref("as_task_regr()")` (and other task constructors) contain a non-ASCII character or do not comply with R's variable naming scheme.
Therefore, we recommend converting names with `r ref("make.names()")` if possible, but if not then you can bypass this check in` r mlr3` by setting `options(mlr3.allow_utf8_names = TRUE)` (but do not be surprised if an underlying package implementation throws up a related error).
:::

Printing a task provides a short summary, in this case we can see the task has `r task_mtcars$nrow` observations and `r task_mtcars$ncol` columns (32 x 3), of which `mpg` is the target, there are no special properties, and there are `r length(task_mtcars$feature_names)` features stored in double-precision floating point format.

```{r}
task_mtcars
```

We can plot the task using the `r mlr3viz` package, which gives a graphical summary of the distribution of the target and feature values:

```{r basics-008, message=FALSE}
#| fig-cap: "Overview of the mtcars dataset."
#| fig-alt: Diagram shows six plots, three are line plots showing the relationship between continuous variables, and three are scatter plots showing relationships between other variables.
library("mlr3viz")
autoplot(task_mtcars, type = "pairs")
```

### Retrieving Data {#sec-retrieve-data}

We have looked at how to create tasks to store data and metadata, now we will look at how to retrieve the stored data.

Various fields can be used to retrieve metadata about a task. The dimensions, for example, can be retrieved using `$nrow` and `$ncol`:

```{r basics-009}
c(task_mtcars$nrow, task_mtcars$ncol)
```

The names of the feature and target columns are stored in the `$feature_names` and `$target_names` slots, respectively.

```{r basics-010}
c(Features = task_mtcars$feature_names, Target = task_mtcars$target_names)
```

While the columns of a task have unique `character`-valued names, their rows are identified by unique natural numbers, called row IDs.
They can be accessed through the `$row_ids` field:

```{r basics-011}
head(task_mtcars$row_ids)
```

Row IDs are not used as features when training or predicting but are metadata that allows to access individual observations.
Note that row IDs are not the same as row numbers.
This is best demonstrated by example, below we create a regression task from random data, print the original row IDs, which correspond to row numbers 1-5, then we filter three rows (we will return to this method just below) and print the new row IDs, which no longer correspond to the row numbers.

```{r}
task = as_task_regr(data.frame(x = runif(5), y = runif(5)), target = "y")
task$row_ids
task$filter(c(4, 1, 3))
task$row_ids
```

This design decision allows tasks and learners to transparently operate on real database management systems, where uniqueness is the only requirement for primary keys (and not the actual row ID value).

The data contained in a task can be accessed through `$data()`, which returns a `r ref("data.table")` object.
This method has optional `rows` and `cols` arguments to specify subsets of the data to retrieve.

```{r basics-012}
# retrieve all data
task_mtcars$data()
# retrieve data for rows with IDs 1, 5, and 10 and feature columns
task_mtcars$data(rows = c(1, 5, 10), cols = task_mtcars$feature_names)
```

:::{.callout-tip}
You can work with row numbers instead of row IDs by adding a step to extract the corresponding row ID:

```{r basics-016, eval = FALSE}
# select the 2nd row of the task by extracting the second row_id:
task$data(rows = task$row_ids[2])
```
:::

You can always use 'standard' R methods to extract summary data from a task, for example to summarize the underlying data:

```{r basics-013}
summary(as.data.table(task_mtcars))
```

### Task Mutators {#sec-tasks-mutators}

After a task has been created, you may want to perform operations on the task such as filtering down to subsets of rows and columns, which is often useful for manually creating train and test splits or to fit models on a subset of given features.
Above we saw how to access subsets of the underlying dataset using `$data()`, however this will not change the underlying task.
Therefore, we provide `r index('mutators', aside = TRUE)`, which modify the given `Task` in place, this can be seen in examples below.

Subsetting by features (columns) is possible with `$select()` with the desired feature names passed as a character vector and subsetting by observations (rows) is performed with `$filter()` by passing the row IDs as a numeric vector \index{\$select()}\index{\$filter()} [`$select()`/`$filter()`]{.aside}:

```{r}
task_mtcars_small = tsk("mtcars") # initialize with the full task
task_mtcars_small$select(c("am", "carb")) # keep only these features
task_mtcars_small$filter(2:4) # keep only these rows
task_mtcars_small$data()
```

As `R6` uses reference semantics (@sec-r6), you need to use `$clone()` if you want to copy a task and then mutate it further:

```{r basics-015}
# the wrong way
task_mtcars_small = tsk("mtcars")$filter(1:2)$select("cyl")
task_mtcars_wrong = task_mtcars_small
task_mtcars_wrong$data()
task_mtcars_wrong$filter(1)
# original data affected
task_mtcars_small$data()

# the right way
task_mtcars_small = tsk("mtcars")$filter(1:2)$select("cyl")
task_mtcars_right = task_mtcars_small$clone()
task_mtcars_right$data()
task_mtcars_right$filter(1)
# original data unaffected
task_mtcars_small$data()
```

To add extra rows and columns to a task, you can use `$rbind()` and `$cbind()` respectively \index{\$cbind()}\index{\$rbind()} [`$rbind()`/`$cbind()`]{.aside}:

```{r basics-017}
task_mtcars_small$cbind( # add another column
  data.frame(disp = c(150, 160))
)
task_mtcars_small$rbind( # add another row
  data.frame(mpg = 23, cyl = 5, disp = 170)
)
task_mtcars_small$data()
```

## Learners {#sec-learners}

Objects of class `r ref("Learner", index = TRUE, aside = TRUE)` provide a unified interface to many popular ML algorithms in R.
The `r ref("mlr_learners", index = TRUE, aside = TRUE)` dictionary contains all the learners available in `mlr3`, we will discuss the available learners in @sec-lrns-add, for now we will just use a regression tree learner as an example to discuss the `Learner` interface.
As with tasks, you can access learners from the dictionary with a single sugar function, in this case `r ref("lrn()", index = TRUE, aside = TRUE)`.

```{r basics-023}
lrn("regr.rpart")
```

All `Learner` objects include the following metadata, which can be seen in the output above:

* `$feature_types`: the type of features the learner can handle.
* `$packages`: the packages required to be installed to use the learner.
* `$properties`: special properties the model can handle, for example the "missings" properties means a model can handle missing data, and "importance" means it can compute the relative importance of each feature.
* `$predict_types`: the types of prediction that the model can make (@sec-predicting).
* `$param_set`: the set of available hyperparameters (@sec-param-set).

To run an ML experiment, learners pass through two stages (@fig-basics-learner):

* `r index('Training', aside = TRUE)`: A training `Task` is passed to the learner's `$train()`  function which trains and stores a `r index('model')`, i.e., the learned relationship of the features to the target.
* `r index('Predicting', aside = TRUE)`: New data, often a different partition of the original dataset, is passed to the `$predict()` method of the trained learner to predict the target values.

```{r basics-022, echo=FALSE, fig.align="center"}
#| label: fig-basics-learner
#| fig-cap: Overview of the different stages of a learner. Top -- data (split into features and a target) is passed to an (untrained learner). Bottom -- new data is passed to the trained model which makes predictions for the 'missing' target column.
#| fig-alt: Diagram shows two boxes, the first is labelled "$train()" and shows data being passed to a Learner. The second is labelled "$predict()" and shows "Inference Data" being passed to the "Learner" which now include a "$model", an arrow then shows predictions being made.
knitr::include_graphics("Figures/learner.svg")
```

### Training {#sec-training}

In the simplest use-case, models are trained by passing a task to a learner with the `r index("$train()", aside = TRUE, code = TRUE)` method:

```{r}
# load mtcars task
task = tsk("mtcars")
# load a regression tree
learner_rpart = lrn("regr.rpart")
# pass the task to the learner via $train()
learner_rpart$train(task)
```

After training, the fitted model is stored in the `r index("$model", aside = TRUE, code = TRUE)` field for future inspection and prediction:

```{r}
# inspect the trained model
learner_rpart$model
```

We see that the regression tree has identified features in the task that are predictive of the target (`mpg`) and used them to partition observations.
The textual representation of the model depends on the type of learner.
For more information on any model see the learner help page, which can be accessed in the same way as tasks with the `help()` field, e.g., `learner_rpart$help()`.

#### Partitioning data

When performing simple examples to assess the quality of a model's predictions, you will likely want to partition your dataset to get a fair and unbiased estimate of a model's generalization error.
In @sec-performance we will look at resampling and benchmark experiments, which will go into more detail about performance estimation, for now we will just discuss the simplest method of splitting data using the `r ref("partition()", aside = TRUE, index = TRUE)` function.
This function randomly splits the given task into two disjoint sets: a training set (67% of the total data, the default) and a test set (33% of the total data, the data not part of the training set).

```{r basics-025}
# changing default to a 70:30 train:test split
splits = partition(task_mtcars, ratio = 0.7)
splits
```

Now when training we will tell the model to only use the training data by passing the row IDs from `partition` to the `row_ids` argument of `$train()`:

```{r basics-025-1}
learner_rpart$train(task_mtcars, row_ids = splits$train)
```

Now we can use our trained learner to make predictions on new data.

### Predicting {#sec-predicting}

Predicting from trained models is as simple as passing your data to the `r index("$predict()", aside = TRUE, code = TRUE)` method of the trained `Learner`.

Carrying straight on from our last example, we will call the `$predict()` method from our trained learner and again will use the `row_ids` argument, but this time to pass the IDs of our `r index("test set")`:

```{r basics-030}
predictions = learner_rpart$predict(task_mtcars, row_ids = splits$test)
```

The `$predict()` method returns an object inheriting from `r ref("Prediction", index = TRUE, aside = TRUE)`, in this case `r ref("PredictionRegr", index = TRUE, aside = TRUE)` as this is a regression task.

```{r}
predictions
```

The `row_ids` column corresponds to the row IDs of the predicted observations.
The `truth` column contains the ground truth data, which the object extracts from the task, in this case: `task_mtcars$truth(splits$test)`.
Finally, the `response` column contains the values predicted by the model.
The `r ref("Prediction")` object can easily be converted into a `data.table` or `data.frame` using `as.data.table()`/`as.data.frame()` respectively.

All data in the above columns can be accessed directly, for example to get the first two predicted responses:

```{r basics-access-pred}
predictions$response[1:2]
```

Similarly to plotting `Task`s, `r mlr3viz` provides an `r ref("ggplot2::autoplot()", text = "autoplot()")` method for `r ref("Prediction")` objects.

```{r basics-035, message = FALSE, warning = FALSE}
#| fig-cap: "Comparing predicted and ground truth values for the mtcars dataset."
#| fig-alt: "A scatter plot of predicted values on one axis and ground truth values on the other. A trend line is fit to show that in general there is good agreement between predicted and ground truth values."
library(mlr3viz)
predictions = learner_rpart$predict(task_mtcars, splits$test)
autoplot(predictions)
```

In the examples above we made predictions by passing a task to `$predict()`, instead if you would rather pass a `data.frame` type object directly then you can use `r index("$predict_newdata()", aside = TRUE, code = TRUE)`:

```{r basics-032}
mtcars_new = data.table(cyl = c(5, 6), disp = c(100, 120),
  hp = c(100, 150), drat = c(4, 3.9), wt = c(3.8, 4.1),
  qsec = c(18, 19.5), vs = c(1, 0), am = c(1, 1),
  gear = c(6, 4), carb = c(3, 5))
predictions = learner_rpart$predict_newdata(mtcars_new)
predictions
```


#### Changing the Prediction Type {.unnumbered .unlisted}

Whilst predicting a single numeric quantity is the most common prediction type in regression, it is not the only prediction type.
Several regression models can also predict standard errors, which are computed during training.
To predict these, the `r index('$predict_type', aside = TRUE, code = TRUE)` field of a `r ref("LearnerRegr")` must be changed from "response" (the default) to "se" before training, and most simply during construction.
The `rpart` learner we used above does not support predicting standard errors, so in the example below we will use a linear regression model implemented in `r ref("mlr3learners::LearnerRegrLm")`, note how the output now includes standard errors.

```{r basics-033}
library(mlr3learners)
learner_lm = lrn("regr.lm", predict_type = "se")
learner_lm$train(task_mtcars, splits$train)
learner_lm$predict(task_mtcars, splits$test)
```

We will see prediction types playing an even bigger part in classification in @sec-basics-classif-learner.

The final step of the basic ML workflow (@fig-ml-abstraction-basics) is to evaluate the quality of predictions to see if our trained model is any 'good'.
We will cover basic evaluation in @sec-eval and then more advanced evaluation for data resampling and model comparison in @sec-performance.
But first we will cover the final element that makes ML models powerful predictive tools, which is their hyperparameters, which give users control over the fitting and predicting process and when set correctly can result in more accurate models.

### Hyperparameters {#sec-param-set}

`Learner`s encapsulate an ML algorithm and its `r index('hyperparameters')`, which are free parameters that can be set by the user to affect *how* the algorithm is run.
Hyperparameters may affect how a model is trained or how it makes predictions and deciding which hyperparameters to set can require expert knowledge though often there is an element of trial and error.
Hyperparameters are hugely important to a model performing well and therefore setting hyperparameters manually is rarely a good idea.
In practice, automated hyperparameter optimization is more common, which we will return to in @sec-optimization.
For this chapter we will refer to manual setting of hyperparameters for the sake of brevity.
We will first look at `r ref_pkg("paradox")` and `r ref("ParamSet")` objects which are used to store learner hyperparameters, and then we will look at getting and setting these values.

#### Paradox and parameter sets

We will continue our running example with a regression tree learner.
To access the hyperparameters in the decision tree, we use `r index("$param_set", aside = TRUE, code = TRUE)`:

```{r basics}
learner_rpart$param_set
```

The output above is a `r ref("paradox::ParamSet", index = TRUE, aside = TRUE)` object from the package `r ref_pkg("paradox")`.
These objects provide information on hyperparameters including their name (`id`), data types (`class`), acceptable ranges for hyperparameter values (`lower`, `upper`), the number of levels possible if the data type is categorical (`nlevels`), the default value from the underlying package (`default`), and finally the set value if different from the default (`value`).
The second column references classes defined in `r ref_pkg("paradox")` that determine the class of the parameter and the possible values it can take.
@tbl-parameters-classes lists the possible hyperparameter types, all of which inherit from `r ref("paradox::Param", index = TRUE, aside = TRUE)`.

| Hyperparameter Class | Description                          |
| :-----------------:  | :----------------------------------: |
| `r ref("ParamDbl", index = TRUE)`  | Real-valued (Numeric) Parameters     |
| `r ref("ParamInt", index = TRUE)`  | Integer Parameters                   |
| `r ref("ParamFct", index = TRUE)`  | Categorical (Factor) Parameters      |
| `r ref("ParamLgl", index = TRUE)`  | Logical / Boolean Parameters         |
| `r ref("ParamUty", index = TRUE)`  | Untyped Parameters                   |

: Hyperparameter classes and the type of hyperparameter they represent. {#tbl-parameters-classes}

Let's carry on the example above and consider some specific hyperparameters.
From the decision tree `ParamSet` output we can infer the following:

* `cp` must be a "double" (`ParamDbl`) taking values between 0 (`lower`) and 1 (`upper`) with a default of 0.01 (`default`).
* `keep_model` must be a "logical" (`ParamLgl`) taking values `TRUE` or `FALSE` with default `FALSE`
* `xval` must be an "integer" (`ParamInt`) taking values between 0 and `Inf` with a default of 10 and a set value of `0`.

In rare cases (we try to minimize it as much as possible), we alter hyperparameter values in construction.
When we do this the reason will always be given in the learner help page.
In the case of `regr.rpart`, we change the `xval` default to `0` because `xval` controls internal cross-validations and if a user accidentally leaves this at 10 then model training can take a long time.

#### Getting and setting hyperparameter values

Now we have looked at how parameter sets are stored, we can now think about getting and setting parameters.
Returning to our decision tree, say we are interested in growing a tree with depth 1, which means a tree where data is split once into two terminal nodes.
From the parameter set output, we know that the `maxdepth` parameter has a default of 30 and that it takes integer values.

There are a few different ways we could change this hyperparameter.
The simplest way to set a hyperparameter is in construction of the learner by simply passing the hyperparameter name and new value to `lrn()`:

```{r}
learner_rpart = lrn("regr.rpart", maxdepth = 1)
```

We can view the set of non-default hyperparameters (i.e., those changed by the user) by using `$param_set$values`:

```{r basics-027}
learner_rpart$param_set$values
# depth 1
learner_rpart$train(tsk("mtcars"))$model
```

Now we can see that `maxdepth = 1` (as we discussed above `xval = 0` is changed in construction) and the constructed regression tree reflects this.

This `values` field simply returns a `list` of set hyperparameters, so another way to update hyperparameters is by updating an element in the list:

```{r}
learner_rpart$param_set$values$maxdepth = 2
learner_rpart$param_set$values
# depth 2
learner_rpart$train(tsk("mtcars"))$model
```

Finally, to set multiple values at once we recommend either setting these in construction or using `$set_values`.

```{r}
learner_rpart = lrn("regr.rpart", maxdepth = 3, xval = 1)
learner_rpart$param_set$values
# or with set_values
learner_rpart$param_set$set_values(xval = 2, cp = 0.5)
learner_rpart$param_set$values
```

:::{.callout-warning}
As `learner_rpart$param_set$values` returns a `list`, some users may be tempted to set hyperparameters by passing a new `list` to `$values` -- this would work but **we do not recommend it**.
This is because passing a `list` will wipe any existing hyperparameter values if they are not included in the list.
So by example:
```{r}
rpart_params = lrn("regr.rpart")
# values at construction
rpart_params$param_set$values
# passing maxdepth the wrong way
rpart_params$param_set$values = list(maxdepth = 1)
# we have removed xval by mistake
rpart_params$param_set$values
# now with set_values
rpart_params = lrn("regr.rpart")
rpart_params$param_set$set_values(maxdepth = 1)
rpart_params$param_set$values
```
:::

All methods have safety checks to ensure your new values fall within the allowed parameter range:

```{r, error=TRUE}
lrn("regr.rpart", cp = 2, maxdepth = 2)
```

#### Parameter dependencies

{{< include _optional.qmd >}}

More complex hyperparameter spaces may include parameter dependencies, which occur when setting a hyperparameter is conditional on the value of another hyperparameter, this is most important in the context of model tuning (@sec-optimization).
One such example is an SVM classifier, implemented in `r ref("mlr3learners::LearnerClassifSVM")`.
The parameter set of this model has an additional column called 'parents', which tells us there are parameter dependencies in the learner.

```{r}
lrn("classif.svm")$param_set
```

To view exactly what the dependency is we can use `$deps`, this returns a `data.table` which can queried in the usual way.
So to see the dependencies of the SVM and to inspect the conditions we could do the following:

```{r}
lrn("classif.svm")$param_set$deps
lrn("classif.svm")$param_set$deps[1, cond]
lrn("classif.svm")$param_set$deps[4, cond]
```

This tells us that the parameter `cost` should only be set if the `type` parameter is set to `"C-classification"`.
Similarly, the `coef0` parameter should be set only if `"polynomial"`, `"radial"`, or `"sigmoid"`.

```{r, error=TRUE}
# errors as type is not C-classification
lrn("classif.svm", type = "eps-classification", cost = 0.5)
# works because type is C-classification
lrn("classif.svm", type = "C-classification", cost = 0.5)
```

### Baseline learners

{{< include _optional.qmd >}}

Before we move onto learner evaluation, we will first highlight one particularly important class of learners that are useful in many aspects of ML.
Contrary to expectations, these are actually the 'bad' or 'weak' learners known as `r index('baselines', aside = TRUE)`.
Baselines are useful in model comparison (@sec-performance), as fallback learners (@sec-encapsulation-fallback, @sec-fallback), to be 'composed' into more complex models (@sec-surv-comp), and can be used by sophisticated models (e.g., random forests) during training and/or prediction.
For regression, we have implemented the baseline `regr.featureless`, which always predicts the mean of the target of the training data:

```{r}
# generate data
df = as_task_regr(data.frame(x = runif(1000), y = rnorm(1000, 2, 1)), target = "y")
lrn("regr.featureless")$train(df, 1:995)$predict(df, 996:1000)
```

It is good practice to test all new models against a baseline, and also to include baselines in experiments with multiple other models.
In general, a model that does not outperform a baseline is a 'bad' model, on the other hand a model is not necessarily 'good' if it outperforms the baseline.

## Evaluation {#sec-eval}

Perhaps *the most* important  step of the ML workflow is evaluating model performance.
Without this step, we would have no way to know if our trained model makes very accurate predictions, is worse than randomly guessing, or somewhere in between.
We will continue with our decision tree example to establish if the quality of our predictions is 'good', first we will rerun the above code so it is easier to follow along.

```{r}
learner_rpart = lrn("regr.rpart")
task_mtcars = tsk("mtcars")
splits = partition(task_mtcars)
learner_rpart$train(task_mtcars, splits$train)
predictions = learner_rpart$predict(task_mtcars, splits$test)
```

### Measures

Analogously to `Task`s and `Learner`s, the available measures in `mlr3` are stored in a dictionary called `r ref("mlr_measures", index = TRUE, aside = TRUE)`, which can be converted to a `data.table` to view all available measures; we have a sugar function `r index("msr()", aside = TRUE, code = TRUE)` to simplify retrieving a measure for you and again you can use the `$help()` method to find documentation for any measure.

```{r}
as.data.table(mlr_measures)
```

All measures implemented in `mlr3` are defined primarily by three components: 1) the function that defines the measure; 2) whether a lower or higher value is consider 'good'; and 3) the range of possible values the measure can take.
As well as these defining elements, other metadata are important to consider when selecting and using a `Measure`, including if the measure has any special properties (e.g., requires training data), the type of predictions the measure can evaluate, and whether the measure has any 'control parameters'.
All this information is encapsulated in the `r ref("Measure", index = TRUE, aside = TRUE)` object.
By example let's consider the mean absolute error (`regr.mae`).

```{r}
measure = msr("regr.mae")
measure
```

This measure compares the absolute difference ('error') between true and predicted values: $f(y, \hat{y}) = | y - \hat{y} |$.
Lower values are considered better (`Minimize = TRUE`), which is intuitive as we would like the true values, $y$, to be identical (or as close as possible) in value to the predicted values, $\hat{y}$.
Finally we can see that the range of possible values the learner can take is from $0$ to $\infty$ (`Range: [0, Inf]`).
The measure has no special properties (`Properties: -`), it evaluates `response` type predictions for regression models (`Predict type: response`), and it has no control parameters (`Parameters: list()`).

### Scoring `Prediction`s

All supervised learning measures compare the difference between predicted values and the ground truth.
`mlr3` simplifies the process of bringing these quantities together by storing the predictions and true outcomes in the `r ref("Prediction", index = TRUE)` object as we have already seen.

```{r}
predictions
```

To actually calculate model performance, we simply call the `r index("$score()", aside = TRUE, code = TRUE)` method of a `r ref("Prediction")` object and pass as a single argument the measure (or measures passed as a list) that we want to compute.
Less abstractly:

```{r}
predictions$score(measure)
```

Note that all task types have default measures that are used if the argument to `$score()` is omitted, for regression this is the mean squared error (`regr.mse`), which is the squared difference between true and predicted values: $f(y, \hat{y}) = (y - \hat{y})^2$.

It is possible to calculate multiple measures at the same time by passing multiple measures to `$score()`.
For example, below we compute performance for mean squared error (`regr.mse`) and mean absolute error (`regr.mae`) -- note we use `r index("msrs()", aside = TRUE, code = TRUE)` to load multiple measures at once.

```{r basics-039}
measures = msrs(c("regr.mse", "regr.mae"))
predictions$score(measures)
```

### Technical measures

{{< include _optional.qmd >}}

`r mlr3` also provides measures that do not quantify the quality of the predictions of a model, but instead provide 'meta' information about the model, in particular we have implemented:

* `r ref("mlr_measures_time_train")` -- The time taken to train a model
* `r ref("mlr_measures_time_predict")` -- The time taken for the model to make predictions
* `r ref("mlr_measures_time_both")` -- The total time taken to train the model and then make predictions
* `r ref("mlr_measures_selected_features")` -- The features selected by a model, which can only be used if the model has the 'selected_features' property.

So we can now score our decision tree to see how long it takes to train the model and then make predictions:

```{r}
measures = msrs(c("time_train", "time_predict", "time_both"))
predictions$score(measures, learner = learner_rpart)
```

Notice a few key properties of these measures:

1) `time_both` is simply the sum of `time_train` and `time_predict`
2) We had to pass `learner = learner_rpart` to `$score()` as these measures have the `requires_learner` property:

```{r}
msr("time_train")$properties
```

3) These can be used after model training and predicting because we automatically store model run times whenever `$train()` and `$test()` are called, so the measures above are equivalent to:

```{r}
c(learner_rpart$timings, both = sum(learner_rpart$timings))
```

The `selected_features` measure calculates how many features were selected as important by the learner.

```{r}
measure_sf = msr("selected_features")
measure_sf
```

We can see that this measure contains `r index('control parameters', aside = TRUE)` (`Parameters: normalize=FALSE`), which are parameters that control how the measure is computed.
As with hyperparameters these can be viewed with `r index("$param_set", code = TRUE)`:

```{r}
measure_sf = msr("selected_features")
measure_sf$param_set
```

The `normalize` hyperparameter specifies whether the returned number of selected features should be normalized by the total number of features, this is useful if you are comparing this value across tasks with differing number of features, so let's change the default to `TRUE` and see how many (normalized) features our decision tree selected:

```{r basics-measures-hp}
measure_sf$param_set$values$normalize = TRUE
predictions$score(measure_sf, task = task_mtcars, learner = learner_rpart)
```

Note that we passed the task and learner as the measure has the `requires_task` and `requires_learner` property.

## Our first regression experiment {#sec-basics-regr-experiment}

Before we go on to look at how the building blocks of `mlr3` extend to classification, we will take a brief pause to put together everything above in a short experiment.
In this experiment we will compare the performance of a featureless regression learner to a decision tree with changed parameters.

```{r}
library(mlr3)
set.seed(349)
# load and partition our task
task_bh = tsk("mtcars")
splits = partition(task)
# load featureless learner
featureless = lrn("regr.featureless")
# load decision tree with different hyperparameters
rpart = lrn("regr.rpart", cp = 0.2, maxdepth = 5)
# load MSE and MAE measures, and calculate time
measures = msrs(c("regr.mse", "regr.mae"))
# train learners
featureless$train(task, splits$train)
rpart$train(task, splits$train)
# make and score predictions
featureless$predict(task, splits$test)$score(measures)
rpart$predict(task, splits$test)$score(measures)
```

Before starting the experiment we load the `r mlr3` library and set a seed (in an exercise below you will be asked to think about why setting a seed is essential for reproducibility in this experiment).
In this experiment we loaded the regression task `mtcars` with `tsk()` and then split this using `partition` with the default 70/30 split.
Next we loaded a featureless baseline learner (`regr.featureless`) with the `lrn()` function.
Then loaded a decision tree (`regr.rpart`) but changed the complexity parameter and max tree depth from their defaults.
We then used `msrs()` to load multiple measures at once, the mean squared error (MSE) (`regr.mse`) and the mean absolute error (MAE) (`regr.mae`).
With all objects loaded we then train our models, passing the same training data to both.
Finally we made predictions from our trained models and scored these, note how we use 'method chaining', which is an R6 technique to combine multiple methods (called with `$()`) in a row on the same line.
For both MSE and MAE, lower values are 'better' (`Minimize: TRUE`) therefore we can conclude that the decision tree performs better than the featureless baseline as its MSE and MAE are both lower.
In @sec-benchmarking we will see how to formalize comparison between models in a more efficient way using `r ref("benchmark()", index = TRUE)`.

Now we have put everything together you may notice that our learners and measures both have the `"regr."` prefix, which is a handy way of reminding us that we are working with a regression task and therefore must make use of learners and measures built for regression.
In the next section, we will extend the building block of `r mlr3` to consider classification tasks, which make use of learners and measures with the `"classif."` prefix.

## Classification {#sec-classif}

`r index('Classification')` problems are ones in which a model tries to predict a discrete, categorical target, as opposed to a continuous, numeric quantity.
For example, predicting the species of penguin from its physical characteristics would be a classification problem as there are only a finite number of species.
`mlr3` ensures that the interface for all tasks is as similar as possible (if not identical) and therefore we will not repeat any content from the previous section but will just focus on differences that make classification a unique ML problem.
We will first demonstrate the similarities between regression and classification by performing an experiment very similar to the one in @sec-basics-regr-experiment using code that will now be familiar to you.
We will then move to differences in tasks, learners and predictions, before looking at `r index('thresholding')`, which is a method specific to classification.

### Our first classification experiment {#sec-basics-classif-experiment}

The interface for classification tasks, learners, and measures, is identical to the regression setting, except the underlying objects inherit from `r ref("TaskClassif")`, `r ref("LearnerClassif")`, and `r ref("MeasureClassif")`, respectively.

We can therefore run a very similar experiment to the one above.

```{r}
library(mlr3)
set.seed(349)
# load and partition our task
task_pen = tsk("penguins")
splits = partition(task_pen)
# load featureless learner
featureless = lrn("classif.featureless")
# load decision tree with different hyperparameters
rpart = lrn("classif.rpart", cp = 0.2, maxdepth = 5)
# load accuracy measure
measure = msr("classif.acc")
# train learners
featureless$train(task_pen, splits$train)
rpart$train(task_pen, splits$train)
# make and score predictions
featureless$predict(task_pen, splits$test)$score(measure)
rpart$predict(task_pen, splits$test)$score(measure)
```

In this experiment we loaded the predefined task `r ref("mlr_tasks_penguins")`, which is based on the `r ref("palmerpenguins::penguins")` dataset, then partitioned the data into training and test splits.
We loaded the featureless classification baseline (which always predicts the most common class in the training data) and a classification decision tree, then the accuracy measure (sum of correct predictions divided by total number of predictions), trained our models then made predictions and scored them.
In this experiment the decision tree is clearly the better performing model as it is vastly more accurate.

Now we have seen the similarities between classification and regression, we can turn to some key differences.

### `TaskClassif`

Classification tasks, objects inheriting from `r ref("TaskClassif", aside = TRUE, index = TRUE)`, are very similar to regression tasks, except the target variable  is of type factor and will have a limited number of possible classes/categories that observations can fall into.

You can view the predefined classification tasks in `mlr3` by filtering the `mlr_tasks` dictionary, and you can create your own with `r ref("as_task_classif", aside = TRUE, index = TRUE)`.

```{r}
as.data.table(mlr_tasks)[task_type == "classif"]
as_task_classif(palmerpenguins::penguins, target = "species")
```

There are two types of classification task supported in `r mlr3`: `r index('binary classification', aside = TRUE)`, in which the outcome can be one of two categories, and `r index('multiclass classification', aside = TRUE)`, where the outcome can be one of three or more categories.

The `sonar` task (`r ref('mlr_tasks_sonar')`) is an example of a binary classification problem, as it has two targets, in `mlr3` terminology it has the "twoclass" property:

```{r}
task_sonar = tsk("sonar")
task_sonar
task_sonar$class_names
```

In contrast, `penguins` (`r ref('mlr_tasks_penguins')`) is a multiclass problem as there are more than two species of penguins, in `mlr3` terminology it has the "multiclass" property:

```{r basics-041}
task_penguins = tsk("penguins")
task_penguins
task_penguins$class_names
```

In `mlr3`, the only difference between these is that binary classification tasks have an extra field called `r index('$positive', aside = TRUE, code = TRUE)`, which defines the 'positive' class.
In binary classification, as there are only two possible class types, by convention one of these is known as the `r index('positive class', aside = TRUE)` and the other as the `r index('negative class', aside = TRUE)`; it is arbitrary which is which, though often the more 'important' class is set as the positive class.
You can set the positive class during or after construction, if no positive class is specified then `r mlr3` assumes the first level in the `target` column is the positive class, which can lead to misleading results, as shown in the example below.

```{r}
# create a dataset with factor target
data = data.frame(x = runif(5), y = factor(c("neg", "pos", "neg", "neg", "pos")))
# specifying the positive class:
as_task_classif(data, target = "y", positive = "pos")$positive

# default is first class, which here is "neg"
classif_task = as_task_classif(data, target = "y")
classif_task$positive

# changing after construction
classif_task$positive = "pos"
classif_task$positive
```

Whilst the choice of positive and negative class is arbitrary, it is essential to ensuring results from models and performance measures are interpreted as expected -- this is best demonstrated when we discuss thresholding (@sec-classif-prediction) and ROC metrics (@sec-roc).

Finally, plotting is possible with `r ref("mlr3viz::autoplot.TaskClassif")`, below we plot a comparison between the target column and features.

```{r basics-043, warning = FALSE, message = FALSE}
#| fig-cap: Overview of part of the penguins dataset.
#| fig-alt: Diagram showing the distribution of target and feature values for a subset of the penguins data.
library(mlr3verse)
autoplot(tsk("penguins"), type = "duo") +
  ggplot2::theme(strip.text.y = ggplot2::element_text(angle = -45, size = 8))
```

### `LearnerClassif` and `MeasureClassif` {#sec-basics-classif-learner}

Classification learners, which inherit from `r ref("LearnerClassif", aside = TRUE, index = TRUE)` have the same interface as regression learners.
However, a key difference is that the possible prediction types in classification are either `"response"` -- predicting an observation's class (a penguins Species in our example) -- or `"prob"` -- predicting the probability of an observation belonging to each class.
In classification, the latter is more informative as it provides more information about the confidence of the predictions:

```{r basics-044}
learner_rpart = lrn("classif.rpart", predict_type = "prob")
learner_rpart$train(task_penguins, splits$train)
predictions = learner_rpart$predict(task_penguins, splits$test)
predictions
```

Notice how the predictions include the predicted probabilities for all three classes, as well as the `response`, which (by default) is the class with the highest predicted probability.

The interface for classification measures, which are of class `r ref('MeasureClassif', aside = TRUE, index = TRUE)`, is identical to regression measures.
The key difference in usage is that predict types are more important to be aware of, to ensure you are evaluating the 'correct' predictions.
To evaluate `"response"` predictions, you will need measures with `predict_type = "response"`, or to evaluate probability predictions you will require `predict_type = "prob"`.
The easiest way to find these measures is by filtering the `r ref("mlr_measures")` dictionary:

```{r}
as.data.table(mlr_measures)[task_type == "classif" & predict_type == "prob" & task_properties != "twoclass"]
```

We also filtered to remove any measures that have the "twoclass" property as this would conflict with our "multiclass" task.
Now we can evaluate the quality of our probability predictions and response predictions simultaneously:

```{r}
measures = msrs(c("classif.mbrier", "classif.logloss", "classif.acc"))
predictions$score(measures)
```

The accuracy measure evaluates the `"response"` predictions whereas the brier score (`classif.mbrier`) (squared difference between predicted probabilities and the truth) and logloss (`classif.logloss`) (negative logarithm of the predicted probability for the true class) are evaluating the probability predictions.

If no measure is passed to `$score()`, the default classification error (`classif.ce`) is calculated, which is the number of misclassifications divided by the number of predictions, i.e., 1 - `classif.acc`.

### `PredictionClassif`, Confusion Matrix, and Thresholding {#sec-classif-prediction}

`r ref("PredictionClassif", index = TRUE, aside = TRUE)` objects have two important differences from the regression case.
Firstly, the added field `r index('$confusion', code = TRUE)`, and secondly the added method `r index('$set_threshold()', code = TRUE)`.

#### Confusion matrix {.unnumbered .unlisted}

A `r index('confusion matrix', aside = TRUE)` is a popular way to show the quality of classification (response) predictions in a more detailed fashion by seeing if a model is good at (mis)classifying observations in a particular class.
For binary and multiclass classification, the confusion matrix is stored in the `r index('$confusion', code = TRUE, aside = TRUE)` field of the `r ref("PredictionClassif")` object:

```{r basics-049}
predictions$confusion
```

The rows in a confusion matrix are the predicted class and the columns are the true class.
All off-diagonal entries are incorrectly classified observations, and all diagonal entries are correctly classified.
In this case, the classifier does fairly well classifying all penguins, but we could have found that it only classifies the Adelie species well but often conflates Chinstrap and Gentoo.
You can visualize a confusion matrix with `r ref('autoplot.PredictionClassif', index = TRUE, aside = TRUE)`.

```{r}
autoplot(predictions)
```

If we take `task_sonar$positive` (``r task_sonar$positive``) to be the positive class then the confusion matrix corresponds to `r index('true positives')` (top left), `r index('false positives')` (top right), `r index('false negatives')` (bottom left), and `r index('true negatives')` (bottom right) (see @fig-confusion):

```{r}
splits = partition(task_sonar)
learner_rpart$
  train(task_sonar, splits$train)$
  predict(task_sonar, splits$test)$
  confusion
```

We will return to the concept of binary (mis)classification in greater detail in @sec-roc.

#### Thresholding {.unnumbered .unlisted}

The final big difference to discuss is `r index('thresholding', aside = TRUE)`.
We saw previously that the `response` prediction type by default is calculated as the class that has the highest predicted probability.
For `n` classes, with predicted probabilities $p_1,...,p_n$, this is the same as saying `response` = argmax$\{p_1,...,p_n\}$.
If the maximum probability is not unique, i.e., multiple classes are predicted to have the highest probability, then the response is chosen randomly from these.
In binary classification this means that the positive class will be selected if the predicted class is greater than 50%, and the negative class otherwise.

This 50% value is known as the `r index('threshold', aside = TRUE)` and it can be useful to change this threshold if there is class imbalance (when one class is over- or under-represented in a dataset), or if there are different costs associated with classes, or simply if there is a preference to 'over'-predict one class.
As an example, let's take the `german_credit` task in which 700 customers have good credit and 300 have bad.
Now we could easily build a model with 70% accuracy simply by always predicting a customer will have good credit:

```{r}
library(mlr3viz)
task_credit = tsk("german_credit")
learn_featureless = lrn("classif.featureless", predict_type = "prob")
split = partition(task_credit)
learn_featureless$train(task_credit, split$train)
preds = learn_featureless$predict(task_credit, split$test)
preds$score(msr("classif.acc"))
autoplot(preds)

```

Whilst this model may appear 'good' on the surface, in fact it just ignores all 'bad' customers -- this can create very big problems in healthcare and other settings where there are data biases, as well as for the insurance company if false positives cost more than false negatives (see @sec-cost-sens for cost-sensitive classification).

Thresholding allows classes to be selected with a lower probability threshold, so instead of predicting a customer has bad credit if P(good) < 50%, instead we might predict bad credit if P(good) < 70% -- notice how we write this in terms of the positive class, which in this task is 'good'.
Let's see this in practice:

```{r}
preds$set_threshold(0.7)
preds$score(msr("classif.acc"))
autoplot(preds)
```

Whilst our model performs 'worse' overall, i.e. with lower accuracy, it is still a 'better' model as it more accurately captures the relationship between classes.

In the binary classification setting, `$set_threshold` only requires one numeric argument, which corresponds with the threshold for the positive class -- hence why it is essential to ensure the positive class is correctly set in your task.

In multiclass classification, thresholding works by first assigning a threshold to each of the `n` classes, dividing the predicted probabilities for each class by these thresholds to return `n` ratios, and then the class with the highest ratio is selected.
By example say we are predicting if a new observation will be of class A, B, C, or D and we have predicted $P(A = 0.2), P(B = 0.4), P(C = 0.1), P(D = 0.3)$.
For now we will assume that the threshold for all classes is identical, note that it is arbitrary what thresholds are chosen if they are all identical so below we just use `1`:

```{r}
probs = c(0.2, 0.4, 0.1, 0.3)
thresholds = c(A = 1, B = 1, C = 1, D = 1)
probs/thresholds
```

We would therefore predict our observation is of class B as this is the highest ratio.
However, we could change our thresholds so that D has the lowest threshold and is therefore most likely to be predicted, A has the highest threshold, and B and C are equal:

```{r}
thresholds = c(A = 0.5, B = 0.25, C = 0.25, D = 0.1)
probs/thresholds
```

Now our observation will be predicted to be in class D.

In `r mlr3`, the same principle is followed with `$set_threshold` by passing a named list.
This is demonstrated below with `r ref('mlr_tasks_zoo')`.
Before changing the thresholds, some classes are never predicted and some are overpredicted.

```{r basics-thresholding-3}
#| fig-cap: "Comparing predicted and ground truth values for the zoo dataset."
#| fig-alt: "A stacked bar plot of predicted values in one bar and ground truth values in the other. Some classes are predicted more often than in the ground truth data, some less often."
library(ggplot2)
library(patchwork)

task = tsk("zoo")
splits = partition(task)
learner = lrn("classif.rpart", predict_type = "prob")
learner$train(task, splits$train)
preds = learner$predict(task, splits$test)
before = autoplot(preds) + ggtitle("Default thresholds")
new_thresh = proportions(table(task$truth(splits$train)))
new_thresh
preds$set_threshold(new_thresh)
after = autoplot(preds) + ggtitle("Inverse weighting thresholds")
before + after + plot_layout(guides = "collect")
```

Again we see that the model better represents all classes after thresholding.
In this example we set the new thresholds to be the proportions of each class in the training set, doing so, known as `r index('inverse weighting')`, effectively sets the thresholds as the inverse probability of occurring, this means that more common classes are will have higher thresholds and vice versa.

In @sec-pipelines we will return to thresholding to see how to automatically choose and set thresholds,§ and in @sec-cost-sens we will look at `r index('cost-sensitive classification')` where each class has a different associated cost.


## Task Column Roles {#sec-row-col-roles}

{{< include _optional.qmd >}}

Now we have covered regression and classification, we can briefly return to tasks and in particular to `r index('column roles')`, which are used to customize tasks further.
Column roles are used by `Task` objects to define important metadata that can be used by learners and other objects to interact with the task.
We have already seen some of these in action with targets and features.
There are seven column roles available:

1. `"feature"`: Features used for prediction.
2. `"target"`: Target variable to predict.
3. `"name"`: Row names/observation labels, for `mtcars` this is the `"model"` column.
4. `"order"`: Variable(s) used to order data returned by `$data()`; must be sortable with `order()`.
5. `"group"`: Variable used to keep observations together during resampling.
6. `"stratum"`: Variable(s) to stratify during resampling.
7. `"weight"`: Observation weights. Not more than one numeric column may have this role.

We have already seen how feature and targets work in @sec-tasks, these are the only required column roles.
In @sec-strat-group we will have a look at the `stratum` and `group` column roles.
So for now we will only look at `order`, and `weight`.
We will not go into detail about `name`, which is primarily used by plotting and will almost always be the `rownames()` of the underlying data.

Column roles are updated using the `r index('$set_col_roles()', aside = TRUE, code = TRUE)` method.
When we set the `order` column role, the data is ordered according to that column(s), as in the following example.

```{r}
df = data.frame(mtcars[1:2, ], idx = 2:1)
task_mtcars_order = as_task_regr(df, target = "mpg")
task_mtcars_order$data(ordered = TRUE)
# order by "idx" column
task_mtcars_order$set_col_roles("idx", roles = "order")
task_mtcars_order$data(ordered = TRUE)
```

In this example we can see that by setting `"idx"` to have the `order` column role, it is no longer displayed when we run `$data()` but instead is used to order the observations according to its value.
This demonstrates how the `r ref("Task")` object can hold metadata that is not passed to the learner.

The `weights` column role is used to weight data points differently.
One example of why we would do this is in classification tasks with severe class imbalance, weighting the minority class rows more heavily may improve the model's performance on that class.
For example in the `breast_cancer` dataset, there are more instances of the benign tumors than malignant tumors, so if we want to better predict malignant tumors we could weight the data in favour of this class:

```{r}
cancer_unweighted = tsk("breast_cancer")
summary(cancer_unweighted$data()$class)
df = cancer_unweighted$data()
# adding a column where the weight is 2 when the class == "malignant", and 1 otherwise
df$weights = ifelse(df$class == "malignant", 2, 1)
cancer_weighted = as_task_classif(df, target = "class")
cancer_weighted$set_col_roles("weights", roles = "weight")
# compare weighted and unweighted predictions
split = partition(cancer_unweighted)
lrn_rf = lrn("classif.ranger")
lrn_rf$train(cancer_unweighted, split$train)$predict(cancer_unweighted, split$test)$score()
lrn_rf$train(cancer_weighted, split$train)$predict(cancer_weighted, split$test)$score()
```

In this example, weighting *may* marginally improve the model performance (see @sec-performance for more thorough comparison methods).
Not all models can handle weights in the data so it's important to check a learner's properties to make sure this column role is being used as expected.
Furthermore, algorithms will make use of weights in different ways so it's important to read the implementation's documentation to understand how weights are being used.

## Supported Algorithms {#sec-lrns-add}

`mlr3` supports many algorithms (some through multiple implementations) as `Learner`s.
These are primarily accessed through `r mlr3`, `r mlr3learners` and `r mlr3extralearners` package, however all packages that implement new tasks (@sec-special) also include a handful of simple algorithms.

The list of learners included in `r mlr3` is deliberately small to avoid large sets of dependencies:

* Featureless learner (`regr.featureless`/`classif.featureless`), which are implemented in `r mlr3` and are baseline learners used for model comparison or as `r index('fallback learners')` (@sec-fallback). The former predicts the mean of the target values in the training set for all new observations, the latter predicts the most frequent label.
* Debug learners (`regr.debug`/`classif.debug`), which are implemented in `r mlr3` and used only to debug code (@sec-error-handling).
* Classification and regression trees (CART) (`regr.rpart`/`classif.rpart`).

The `r mlr3learners` package contains a selection of algorithms (and select implementations) chosen by the mlr team that we recommend as a good starting point for most experiments:

* Linear (`regr.lm`) and logistic (`classif.log_reg`) regression.
* Penalized Generalized Linear Models (`regr.glmnet`/`classif.glmnet`) and with built-in optimization of the penalization parameter (`regr.cv_glmnet`/classif.cv_glmnet`).
* Weighted $k$-Nearest Neighbors regression (`regr.kknn`/`classif.kknn`).
* Kriging / Gaussian Process Regression (`regr.km`).
* Linear (`classif.lda`) and Quadratic (`classif.qda`) Discriminant Analysis.
* Naïve Bayes Classification (`classif.naive_bayes`).
* Support-Vector machines (`regr.svm`/`classif.svm`).
* Gradient Boosting (`regr.xgboost`/`classif.xgboost`).
* Random Forests for regression and classification (`regr.ranger`/`classif.ranger`).

The majority of other learners are all in `r mlr3extralearners`.
You can find an up-to-date list of learners here: `r link("https://mlr-org.com/learners.html")`.

The dictionary `r ref("mlr_learners", index = TRUE)` contains learners that are supported in loaded packages.
You can list all learners by converting the `r ref("mlr_learners")` dictionary into a `data.table`:

```{r basics-learners-list}
as.data.table(mlr_learners)
```

The resulting `data.table` contains a lot of metadata that is useful for identifying learners with particular properties.
For example, we can list all learners that support regression problems:

```{r basics-learners-list-regr}
as.data.table(mlr_learners)[task_type == "classif"]
```

We can filter by multiple conditions, for example to list all regression learners that and can predict standard errors:

```{r basics-learners-regr-se}
as.data.table(mlr_learners)[task_type == "regr" &
    sapply(predict_types, function(x) "se" %in% x)]
```

## Conclusion

In this chapter we covered the building blocks of `mlr3`.
We first introduced basic ML methodology and then showed how this is implemented in `r mlr3`
We began by looking at the `r ref("Task")` class, which is used to define ML tasks or problems to solve.
We then looked at the `r ref("Learner")` class, which encapsulates ML algorithms, hyperparameters, and other metainformation.
Finally we consider how to evaluate ML models with objects from the `r ref("Measure")` class.
After looking at regression implementations, we extended all the above to the classification setting, before finally looking at some extra details about tasks and the algorithms that are implemented across `mlr3`.
The rest of this book will build on the basic elements seen in this chapter, starting with more advanced model comparison methods in @sec-performance before moving to improving model performance with automated hyperparameter tuning in @sec-optimization.
@tbl-basics-api summarizes the most important functions and methods seen in this chapter.

| Underlying R6 Class | Constructor (if applicable) | Important methods |
| --------------------------- | --------------------- | -------------------------------------------- |
| `r ref("Task")` | `r ref("tsk()")`/`r ref("tsks()")`/`as_task_X` | `$filter()`/`$data()` |
| `r ref("Learner")` | `r ref("lrn()")`/`r ref("lrns()")` | `$train()`/`$predict()` |
| `r ref("Prediction")` | `some_learner$predict()` | `$score()` |
| `r ref("Measure")` | `r ref("msr()")`/`r ref("msrs()")` | |

: Important classes and functions covered in this chapter with underlying `R6` class (if applicable), constructor to create an object of the class, and important class methods. {#tbl-basics-api}

## Exercises

1. Set the seed to `124` then train a classification tree model with `classif.rpart` and default hyperparameters on 80% of the data in the predefined `sonar` task. Evaluate the model's performance with the classification error measure on the remaining data. Also think about why we need to set the seed in this example.
2. Calculate the true positive, false positive, true negative, and false negative rates of the predictions made by the model in exercise 1.
3. Change the threshold of the model from exercise 1 such that the false positive rate is lower than the false negative rate.
What is one reason you might do this in practice?
