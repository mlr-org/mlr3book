# Model Optimization {#optimization}

{{< include _setup.qmd >}}

In machine learning, when you are dissatisfied with the performance of a model, you might ask yourself how to best improve the model:

* Can it be improved by tweaking the hyperparameters of the learner, i.e. the configuration options that affect its behavior?
* Or, should you just use a completely different learner for this particular task?

This chapter might help answer this question.

**Model Tuning**

Machine learning algorithms have default values set for their hyperparameters.
In many cases, these hyperparameters need to be changed by the user to achieve optimal performance on the given dataset.
While you can certainly search for hyperparameter settings that improve performance manually, we do not recommend this approach as it is tedious and rarely leads to the best performance.
Fortunately, the `r mlr_pkg("mlr3")` ecosystem provides packages and tools for automated tuning.
To tune a machine learning algorithm, you have to specify

1. the [search space](#tuning-optimization),
1. the [optimization algorithm](#tuning-algorithms) (i.e. tuning method),
1. an evaluation method (i.e., a resampling strategy), and
1. a performance measure.

In the [tuning](#tuning) part, we will have a look at:

* empirically sound [hyperparameter tuning](#tuning),
* selecting the [optimizing algorithm](#tuning-optimization),
* defining [search spaces concisely](#searchspace),
* [triggering](#tuning-triggering) the tuning, and
* [automating](#autotuner) tuning.

We will use the `r mlr_pkg("mlr3tuning")` package, which supports common tuning operations.

**Feature Selection**

Tuning the hyperparameters is only one way of improving the performance of your model.
The second part of this chapter explains [feature selection](#fs), also known as variable or descriptor selection.
[Feature selection](#fs) is the process of finding the feature subset that is most relevant with respect to the prediction or for which the learner fits a model with the highest performance.
Apart from improving model performance, there are additional reasons to perform feature selection:

* enhance the interpretability of the model,
* speed up model fitting, or
* eliminate the need to collect lots of expensive features.

Here, we mostly focus on feature selection as a means of improving model performance.

There are different approaches to identifying the relevant features.
In the [feature selection](#fs) part, we describe three methods:

* [Filter](#fs-filter) algorithms select features independently of the learner by scoring the different features.
* [Variable importance filters](#fs-var-imp-filters) select features that are important according to the model induced by a learner.
* [Wrapper methods](#fs-wrapper) iteratively select features to optimize a performance measure, each time fitting and evaluating a model with a different subset of features.

Note that filters operate independently of learners.
Variable importance filters rely on the learner to extract information on feature importance from a trained model, for example, by inspecting a learned decision tree and returning the features that are used in the first few levels.
The obtained importance values can be used to subset the data, which can then be used to train a learner.
Wrapper methods can be used with any learner but need to train the learner potentially many times, making this the most expensive method.

**Nested Resampling**

For hyperparameter tuning, a normal resampling (e.g. a cross-validation) is no longer sufficient to ensure an unbiased evaluation.
Consider the following thought experiment to gain intuition for why this is the case.
Suppose a learner has a hyperparameter that has no real effect on the fitted model, but only introduces random noise into the predictions.
Evaluating different values for this hyperparameter, one will show the best performance (purely randomly).
This is the hyperparameter value that will be chosen as the best, although the hyperparameter has no real effect.
To discover this, another separate validation set is required -- it will reveal that the "optimized" setting really does not perform better than anything else.

We need a nested resampling to ensure unbiased estimates of the generalization error during hyperparameter optimization.
We discuss the following aspects in this part:

* [Inner and outer resampling strategies](#nested-resampling) in nested resampling.
* The [execution](#nested-resamp-exec) of nested resampling.
* The [evaluation](#nested-resamp-eval) of resampling iterations.

## Hyperparameter Tuning {#tuning}

```{r optimization-001, include = F}
library(mlr3)
library(mlr3book)
```

Hyperparameters are the parameters of the learners that control how a model is fit to the data.
They are sometimes called second-level or second-order parameters of machine learning -- the parameters of the *models* are the first-order parameters and "fit" to the data during model training.
The hyperparameters of a learner can have a major impact on the performance of a learned model, but are often only optimized in an ad-hoc manner or not at all.
This process is often called model 'tuning'.

Hyperparameter tuning is supported via the `r mlr3book::mlr_pkg("mlr3tuning")` extension package.
Below you can find an illustration of the general process:

```{r optimization-002, echo = FALSE}
knitr::include_graphics("images/tuning_process.svg")
```

At the heart of `r mlr3book::mlr_pkg("mlr3tuning")` are the R6 classes

* `r ref("TuningInstanceSingleCrit")`, `r ref("TuningInstanceMultiCrit")` to describe the tuning problem and store the results, and
* `r ref("Tuner")` as the base class for implementations of tuning algorithms.

### The `TuningInstance*` Classes {#tuning-optimization}

We will examine the optimization of a simple classification tree on the `r ref("mlr_tasks_pima", text = "Pima Indian Diabetes")` data set as an introductory example here.

```{r optimization-003}
library("mlr3verse")
task = tsk("pima")
print(task)
```

We use the `r mlr3book::cran_pkg("rpart")` classification tree and choose a subset of the hyperparameters we want to tune.
This is often referred to as the "tuning space".
First, let's look at all the hyperparameters that are available.
Information on what they do can be found in `r ref("rpart::rpart.control", text = "the documentation of the learner")`.

```{r optimization-004}
learner = lrn("classif.rpart")
learner$param_set
```

Here, we opt to tune two hyperparameters:

* The complexity hyperparameter `cp` that controls when the learner considers introducing another branch.
* The `minsplit` hyperparameter that controls how many observations must be present in a leaf for another split to be attempted.

The tuning space needs to be bounded with lower and upper bounds for the values of the hyperparameters:

```{r optimization-005}
search_space = ps(
  cp = p_dbl(lower = 0.001, upper = 0.1),
  minsplit = p_int(lower = 1, upper = 10)
)
search_space
```

The bounds are usually set based on experience.

Next, we need to specify how to evaluate the performance of a trained model.
For this, we need to choose a `r ref("Resampling", text = "resampling strategy")` and a `r ref("Measure", text = "performance measure")`.

```{r optimization-006}
hout = rsmp("holdout")
measure = msr("classif.ce")
```

Finally, we have to specify the budget available for tuning.
This is a crucial step, as exhaustively evaluating all possible hyperparameter configurations is usually not feasible.
`r mlr3book::mlr_pkg("mlr3")` allows to specify complex termination criteria by selecting one of the available `r ref("Terminator", text = "Terminators")`:

* Terminate after a given time (`r ref("TerminatorClockTime")`).
* Terminate after a given number of iterations (`r ref("TerminatorEvals")`).
* Terminate after a specific performance has been reached (`r ref("TerminatorPerfReached")`).
* Terminate when tuning does find a better configuration for a given number of iterations (`r ref("TerminatorStagnation")`).
* A combination of the above in an *ALL* or *ANY* fashion (`r ref("TerminatorCombo")`).

For this short introduction, we specify a budget of 20 iterations and then put everything together into a `r ref("TuningInstanceSingleCrit")`:

```{r optimization-007}
library("mlr3tuning")

evals20 = trm("evals", n_evals = 20)

instance = TuningInstanceSingleCrit$new(
  task = task,
  learner = learner,
  resampling = hout,
  measure = measure,
  search_space = search_space,
  terminator = evals20
)
instance
```

To start the tuning, we still need to select how the optimization should take place.
In other words, we need to choose the **optimization algorithm** via the `r ref("Tuner")` class.

### The `Tuner` Class {#tuning-algorithms}

The following algorithms are currently implemented in `r mlr3book::mlr_pkg("mlr3tuning")`:

* Grid Search (`r ref("TunerGridSearch")`)
* Random Search (`r ref("TunerRandomSearch")`) [@bergstra2012]
* Generalized Simulated Annealing (`r ref("TunerGenSA")`)
* Non-Linear Optimization (`r ref("TunerNLoptr")`)

If you're interested in learning more about these approaches, the [Wikipedia page on hyperparameter optimization](https://en.wikipedia.org/wiki/Hyperparameter_optimization) is a good place to start.

In this example, we will use a simple grid search with a grid resolution of 5.

```{r optimization-008}
tuner = tnr("grid_search", resolution = 5)
```

As we have only numeric parameters, `r ref("TunerGridSearch")` will create an equidistant grid between the respective upper and lower bounds.
Our two-dimensional grid of resolution 5 consists of $5^2 = 25$ configurations.
Each configuration is a distinct setting of hyperparameter values for the previously defined `r ref("Learner")` which is then fitted to the task and evaluated using the provided `r ref("Resampling")`.
All configurations will be examined by the tuner (in a random order), until either all configurations are evaluated or the `r ref("Terminator")` signals that the budget is exhausted, i.e. here the tuner will stop after evaluating 20 of the 25 total configurations.

### Triggering the Tuning {#tuning-triggering}

To start the tuning, we simply pass the `r ref("TuningInstanceSingleCrit")` to the `$optimize()` method of the initialized `r ref("Tuner")`.
The tuner proceeds as follows:

1. The `r ref("Tuner")` proposes at least one hyperparameter configuration to evaluate (the `r ref("Tuner")` may propose multiple points to be able to evaluate them in parallel, which can be controlled via the setting `batch_size`).
1. For each configuration, the given `r ref("Learner")` is fitted on the `r ref("Task")` and evaluated using the provided `r ref("Resampling")`.
1  All evaluations are stored in the archive of the `r ref("TuningInstanceSingleCrit")`.
1. The `r ref("Terminator")` is queried if the budget is exhausted.
1  If the budget is not exhausted, go back to 1), else terminate.
1. Determine the configurations with the best observed performance from the archive.
1. Store the best configurations as result in the tuning instance object.
   The best hyperparameter settings (`$result_learner_param_vals`) and the corresponding measured performance (`$result_y`) can be retrieved from the tuning instance.

```{r optimization-009}
tuner$optimize(instance)
instance$result_learner_param_vals
instance$result_y
```

You can investigate all of the evaluations that were performed; they are stored in the archive of the `r ref("TuningInstanceSingleCrit")` and can be accessed by using `r ref("as.data.table()")`:

```{r optimization-010}
as.data.table(instance$archive)
```

Altogether, the grid search evaluated 20/25 different hyperparameter configurations in a random order before the `r ref("Terminator")` stopped the tuning.
In this example there were multiple configurations with the same best classification error, and without other criteria, the first one was returned.
You may want to choose the configuration with the lowest classification error as well as time to train the model or some other combination of criteria for hyper parameter selection.
You can do this with r ref(`"TuningInstanceMultiCrit")`, see [Tuning with Multiple Performance Measures](#mult-measures-tuning).

The associated resampling iterations can be accessed in the `"BenchmarkResult")` of the tuning instance:

```{r optimization-011}
instance$archive$benchmark_result
```

The `uhash` column links the resampling iterations to the evaluated configurations stored in `instance$archive$data`.
This allows e.g. to score the included `r ref("ResampleResult")`s on a different performance measure.

```{r optimization-012}
instance$archive$benchmark_result$score(msr("classif.acc"))
```

Now we can take the optimized hyperparameters, set them for the previously-created `r ref("Learner")`, and train it on the full dataset.

```{r optimization-013}
learner$param_set$values = instance$result_learner_param_vals
learner$train(task)
```

The trained model can now be used to make a prediction on new, external data.
Note that predicting on observations present in the `r ref("Task")` should be avoided because the model has seen these observations already during tuning and training and therefore performance values would be statistically biased -- the resulting performance measure would be over-optimistic.
To get statistically unbiased performance estimates for a given task, [nested resampling](#nested-resampling) is required.

### Tuning with Multiple Performance Measures {#mult-measures-tuning}

When tuning, you might want to use multiple criteria to find the best configuration of hyperparameters.
For example, you might want the configuration with the lowest classification error and lowest time to train the model.
The full list of performance measures can be found [here](https://mlr3.mlr-org.com/reference/mlr_measures.html).

Continuing the above example and tuning the same hyperparameters:

* The complexity hyperparameter `cp` that controls when the learner considers introducing another branch.
* The `minsplit` hyperparameter that controls how many observations must be present in a leaf for another split to be attempted.

The tuning process is identical to the previous example, however, this time we will specify two `r ref("Measure", text = "performance measures")`, classification error and time to train the model (`time_train`).

```{r optimization-014}
measures = msrs(c("classif.ce", "time_train"))
```

Instead of creating a new `r ref("TuningInstanceSingleCrit")` with a single measure, we create a new `r ref("TuningInstanceMultiCrit")` with the two measures we are interested in here.
Otherwise, it is the same as above.

```{r optimization-015}
library("mlr3tuning")

evals20 = trm("evals", n_evals = 20)

instance = TuningInstanceMultiCrit$new(
  task = task,
  learner = learner,
  resampling = hout,
  measures = measures,
  search_space = search_space,
  terminator = evals20
)
instance
```

After triggering the tuning, we will have the configuration with the best classification error and time to train the model.

```{r optimization-016}
tuner$optimize(instance)
instance$result_learner_param_vals
instance$result_y
```

### Automating the Tuning {#autotuner}

We can automate this entire process in `r mlr3book::mlr_pkg("mlr3")` so that learners are tuned transparently, without the need to extract information on the best hyperparameter settings at the end.
The `r ref("AutoTuner")` wraps a learner and augments it with an automatic tuning process for a given set of hyperparameters.
Because the `r ref("AutoTuner")` itself inherits from the `r ref("Learner")` base class, it can be used like any other learner.
In keeping with our example above, we create a classification learner that tunes itself automatically.
This classification tree learner tunes the parameters `cp` and `minsplit` using an inner resampling (holdout).
We create a terminator which allows 10 evaluations, and use a simple random search as tuning algorithm:

```{r optimization-017}
learner = lrn("classif.rpart")
search_space = ps(
  cp = p_dbl(lower = 0.001, upper = 0.1),
  minsplit = p_int(lower = 1, upper = 10)
)
terminator = trm("evals", n_evals = 10)
tuner = tnr("random_search")

at = AutoTuner$new(
  learner = learner,
  resampling = rsmp("holdout"),
  measure = msr("classif.ce"),
  search_space = search_space,
  terminator = terminator,
  tuner = tuner
)
at
```

We can now use the learner like any other learner, calling the `$train()` and `$predict()` method. The differnce to a normal learner is that `$train()` runs the tuning, which will take longer than a normal training process.

```{r optimization-018}
at$train(task)
```

We can also pass it to `r ref("resample()")` and `r ref("benchmark()")`, just like any other learner.
This would result in a [nested resampling](#nested-resampling).

## Tuning Search Spaces {#searchspace}

When running an optimization, it is important to inform the tuning algorithm about what hyperparameters are valid.
Here the names, types, and valid ranges of each hyperparameter are important.
All this information is communicated with objects of the class `r ref("ParamSet")`, which is defined in `r mlr_pkg("paradox")`.
While it is possible to create `r ref("ParamSet")`-objects using its `$new`-constructor, it is much shorter and readable to use the `r ref("ps")`-shortcut, which will be presented here.
For an in-depth description of `r mlr_pkg("paradox")` and its classes, see the [`r mlr_pkg("paradox")` chapter](#paradox).

Note, that `r ref("ParamSet")` objects exist in two contexts.
First, `r ref("ParamSet")`-objects are used to define the space of valid parameter settings for a learner (and other objects).
Second, they are used to define a search space for tuning.
We are mainly interested in the latter.
For example we can consider the `minsplit` parameter of the `r ref("mlr_learners_classif.rpart", "classif.rpart Learner")`.
The `r ref("ParamSet")` associated with the learner has a lower but *no* upper bound.
However, for tuning the value, a lower *and* upper bound must be given because tuning search spaces need to be bounded.
For `r ref("Learner")` or `r ref("PipeOp")` objects, typically "unbounded" `r ref("ParamSet", text = "ParamSets")` are used.
Here, however, we will mainly focus on creating "bounded" `r ref("ParamSet", text = "ParamSets")` that can be used for tuning.
See the [in-depth `r mlr_pkg("paradox")` chapter](#paradox) for more details on using `r ref("ParamSet", text = "ParamSets")` to  define parameter ranges for use-cases besides tuning.

### Creating `r ref("ParamSet")`s

An empty `"ParamSet")` -- not yet very useful -- can be constructed using just the `"ps")` call:

```{r optimization-019}
library("mlr3verse")

search_space = ps()
print(search_space)
```

`r ref("ps")` takes named `r ref("Domain")` arguments that are turned into parameters.
A possible search space for the `"classif.svm"` learner could for example be:

```{r optimization-020}
search_space = ps(
  cost = p_dbl(lower = 0.1, upper = 10),
  kernel = p_fct(levels = c("polynomial", "radial"))
)
print(search_space)
```

There are five domain constructors that produce a parameters when given to `r ref("ps")`:

| Constructor               | Description                          | Is bounded?                        | Underlying Class    |
| :-----------------------: | :----------------------------------: | :--------------------------------: | :-----------------: |
| `r ref("p_dbl")`                   | Real valued parameter ("double")     | When `upper` and `lower` are given | `r ref("ParamDbl")` |
| `r ref("p_int")`                  | Integer parameter                    | When `upper` and `lower` are given | `r ref("ParamInt")` |
| `r ref("p_fct")`                   | Discrete valued parameter ("factor") | Always                             | `r ref("ParamFct")` |
| `r ref("p_lgl")`                 | Logical / Boolean parameter          | Always                             | `r ref("ParamLgl")` |
| `r ref("p_uty")`                   | Untyped parameter                    | Never                              | `r ref("ParamUty")` |

These domain constructors each take some of the following arguments:

* **`lower`**, **`upper`**: lower and upper bound of numerical parameters (`r ref("p_dbl")` and `r ref("p_int")`). These need to be given to get bounded parameter spaces valid for tuning.
* **`levels`**: Allowed categorical values for `p_fct` parameters.
  Required argument for `r ref("p_fct")`.
  See [below](#autolevel) for more details on this parameter.
* **`trafo`**: transformation function, see [below](#searchspace-trafo).
* **`depends`**: dependencies, see [below](#searchspace-depends).
* **`tags`**: Further information about a parameter, used for example by the [`hyperband`](#hyperband) tuner.
* **`default`**: Value corresponding to default behavior when the parameter is not given.
  Not used for tuning search spaces.
* **`special_vals`**: Valid values besides the normally accepted values for a parameter.
  Not used for tuning search spaces.
* **`custom_check`**: Function that checks whether a value given to `r ref("p_uty")` is valid.
  Not used for tuning search spaces.

The `lower` and `upper` parameters are always in the first and second position respectively, except for `r ref("p_fct")` where `levels` is in the first position.
It is preferred to omit the labels (ex: upper = 0.1 becomes just 0.1). This way of defining a `r ref("ParamSet")` is more concise than the equivalent definition above.
Preferred:

```{r optimization-021}
search_space = ps(cost = p_dbl(0.1, 10), kernel = p_fct(c("polynomial", "radial")))
```

### Transformations (`trafo`) {#searchspace-trafo}

We can use the `r mlr_pkg("paradox")` function `r ref("generate_design_grid")` to look at the values that would be evaluated by grid search.
(We are using `r ref("rbindlist()")` here because the result of `$transpose()` is a list that is harder to read.
If we didn't use `$transpose()`, on the other hand, the transformations that we investigate here are not applied.) In `generate_design_grid(search_space, 3)`, `search_space` is the `r ref("ParamSet")` argument and 3 is the specified resolution in the parameter space.
The resolution for categorical parameters is ignored; these parameters always produce a grid over all of their valid levels.
For numerical parameters the endpoints of the params are always included in the grid, so if there were 3 levels for the kernel instead of 2 there would be 9 rows, or if the resolution was 4 in this example there would be 8 rows in the resulting table.

```{r optimization-022}
library("data.table")
rbindlist(generate_design_grid(search_space, 3)$transpose())
```

We notice that the `cost` parameter is taken on a linear scale.
We assume, however, that the difference of cost between `0.1` and `1` should have a similar effect as the difference between `1` and `10`.
Therefore it makes more sense to tune it on a *logarithmic scale*.
This is done by using a **transformation** (`trafo`).
This is a function that is applied to a parameter after it has been sampled by the tuner.
We can tune `cost` on a logarithmic scale by sampling on the linear scale `[-1, 1]` and computing `10^x` from that value.
```{r optimization-023}
search_space = ps(
  cost = p_dbl(-1, 1, trafo = function(x) 10^x),
  kernel = p_fct(c("polynomial", "radial"))
)
rbindlist(generate_design_grid(search_space, 3)$transpose())
```

It is even possible to attach another transformation to the `r ref("ParamSet")` as a whole that gets executed after individual parameter's transformations were performed.
It is given through the `.extra_trafo` argument and should be a function with parameters `x` and `param_set` that takes a list of parameter values in `x` and returns a modified list.
This transformation can access all parameter values of an evaluation and modify them with interactions.
It is even possible to add or remove parameters.
(The following is a bit of a silly example.)

```{r optimization-024}
search_space = ps(
  cost = p_dbl(-1, 1, trafo = function(x) 10^x),
  kernel = p_fct(c("polynomial", "radial")),
  .extra_trafo = function(x, param_set) {
    if (x$kernel == "polynomial") {
      x$cost = x$cost * 2
    }
    x
  }
)
rbindlist(generate_design_grid(search_space, 3)$transpose())
```

The available types of search space parameters are limited: continuous, integer, discrete, and logical scalars.
There are many machine learning algorithms, however, that take parameters of other types, for example vectors or functions.
These can not be defined in a search space `r ref("ParamSet")`, and they are often given as `r ref("ParamUty")` in the `r ref("Learner")`'s `r ref("ParamSet")`.
When trying to tune over these hyperparameters, it is necessary to perform a Transformation that changes the type of a parameter.

An example is the `class.weights` parameter of the [Support Vector Machine](https://machinelearningmastery.com/cost-sensitive-svm-for-imbalanced-classification/) (SVM), which takes a named vector of class weights with one entry for each target class.
The trafo that would tune `class.weights` for the `r ref("mlr_tasks_spam")`, `'tsk("spam")` dataset could be:

```{r optimization-025}
search_space = ps(
  class.weights = p_dbl(0.1, 0.9, trafo = function(x) c(spam = x, nonspam = 1 - x))
)
generate_design_grid(search_space, 3)$transpose()
```

(We are omitting `r ref("rbindlist()")` in this example because it breaks the vector valued return elements.)

### Automatic Factor Level Transformation {#autolevel}

A common use-case is the necessity to specify a list of values that should all be tried (or sampled from).
It may be the case that a hyperparameter accepts function objects as values and a certain list of functions should be tried.
Or it may be that a choice of special numeric values should be tried.
For this, the `r ref("p_fct")` constructor's `level` argument may be a value that is not a `character` vector, but something else.
If, for example, only the values `0.1`, `3`, and `10` should be tried for the `cost` parameter, even when doing random search, then the following search space would achieve that:

```{r optimization-026}
search_space = ps(
  cost = p_fct(c(0.1, 3, 10)),
  kernel = p_fct(c("polynomial", "radial"))
)
rbindlist(generate_design_grid(search_space, 3)$transpose())
```

This is equivalent to the following:
```{r optimization-027}
search_space = ps(
  cost = p_fct(c("0.1", "3", "10"),
    trafo = function(x) list(`0.1` = 0.1, `3` = 3, `10` = 10)[[x]]),
  kernel = p_fct(c("polynomial", "radial"))
)
rbindlist(generate_design_grid(search_space, 3)$transpose())
```

Note: Though the resolution is 3 here, in this case it doesn't matter because both `cost` and `kernel` are factors (the resolution for categorical variables is ignored, these parameters always produce a grid over all their valid levels).

This may seem silly, but makes sense when considering that factorial tuning parameters are always `character` values:

```{r optimization-028}
search_space = ps(
  cost = p_fct(c(0.1, 3, 10)),
  kernel = p_fct(c("polynomial", "radial"))
)
typeof(search_space$params$cost$levels)
```

Be aware that this results in an "unordered" hyperparameter, however.
Tuning algorithms that make use of ordering information of parameters, like genetic algorithms or model based optimization, will perform worse when this is done.
For these algorithms, it may make more sense to define a `r ref("p_dbl")` or `r ref("p_int")` with a more fitting trafo.

The `class.weights` case from above can also be implemented like this, if there are only a few candidates of `class.weights` vectors that should be tried.
Note that the `levels` argument of `r ref("p_fct")` must be named if there is no easy way for `as.character()` to create names:

```{r optimization-029}
search_space = ps(
  class.weights = p_fct(
    list(
      candidate_a = c(spam = 0.5, nonspam = 0.5),
      candidate_b = c(spam = 0.3, nonspam = 0.7)
    )
  )
)
generate_design_grid(search_space)$transpose()
```

### Parameter Dependencies (`depends`) {#searchspace-depends}

Some parameters are only relevant when another parameter has a certain value, or one of several values.
The [Support Vector Machine](https://machinelearningmastery.com/cost-sensitive-svm-for-imbalanced-classification/) (SVM), for example, has the `degree` parameter that is only valid when `kernel` is `"polynomial"`.
This can be specified using the `depends` argument.
It is an expression that must involve other parameters and be of the form `<param> == <scalar>`, `<param> %in% <vector>`, or multiple of these chained by `&&`.
To tune the `degree` parameter, one would need to do the following:

```{r optimization-030}
search_space = ps(
  cost = p_dbl(-1, 1, trafo = function(x) 10^x),
  kernel = p_fct(c("polynomial", "radial")),
  degree = p_int(1, 3, depends = kernel == "polynomial")
)
rbindlist(generate_design_grid(search_space, 3)$transpose(), fill = TRUE)
```

### Creating Tuning ParamSets from other ParamSets {#tune-token}

Having to define a tuning `r ref("ParamSet")` for a `r ref("Learner")` that already has parameter set information may seem unnecessarily tedious, and there is indeed a way to create tuning `r ref("ParamSet", "ParamSets")` from a `r ref("Learner")`'s `r ref("ParamSet")`, making use of as much information as already available.

This is done by setting values of a `r ref("Learner")`'s `r ref("ParamSet")` to so-called `r ref("TuneToken")`s, constructed with a `r ref("to_tune")` call.
This can be done in the same way that other hyperparameters are set to specific values.
It can be understood as the hyperparameters being tagged for later tuning.
The resulting `r ref("ParamSet")` used for tuning can be retrieved using the `$search_space()` method.

```{r optimization-031}
learner = lrn("classif.svm")
learner$param_set$values$kernel = "polynomial" # for example
learner$param_set$values$degree = to_tune(lower = 1, upper = 3)

print(learner$param_set$search_space())

rbindlist(generate_design_grid(
  learner$param_set$search_space(), 3)$transpose()
)
```

It is possible to omit `lower` here, because it can be inferred from the lower bound of the `degree` parameter itself.
For other parameters, that are already bounded, it is possible to not give any bounds at all, because their ranges are already bounded.
An example is the logical `shrinking` hyperparameter:
```{r optimization-032}
learner$param_set$values$shrinking = to_tune()

print(learner$param_set$search_space())

rbindlist(generate_design_grid(
  learner$param_set$search_space(), 3)$transpose()
)
```

`"to_tune")` can also be constructed with a `r ref("Domain")` object, i.e. something constructed with a `p_***` call.
This way it is possible to tune continuous parameters with discrete values, or to give trafos or dependencies.
One could, for example, tune the `cost` as above on three given special values, and introduce a dependency of `shrinking` on it.
Notice that a short form for `to_tune(<levels>)` is a short form of `to_tune(p_fct(<levels>))`.

:::{.callout-note}
When introducing the dependency, we need to use the `degree` value from *before* the implicit trafo, which is the name or `as.character()` of the respective value, here `"val2"`!
:::

```{r optimization-033}
learner$param_set$values$type = "C-classification" # needs to be set because of a bug in paradox
learner$param_set$values$cost = to_tune(c(val1 = 0.3, val2 = 0.7))
learner$param_set$values$shrinking = to_tune(p_lgl(depends = cost == "val2"))

print(learner$param_set$search_space())

rbindlist(generate_design_grid(learner$param_set$search_space(), 3)$transpose(), fill = TRUE)
```

The `"search_space()` picks up dependencies fromt the underlying `r ref("ParamSet")` automatically.
So if the `kernel` is tuned, then `degree` automatically gets the dependency on it, without us having to specify that.
(Here we reset `cost` and `shrinking` to `NULL` for the sake of clarity of the generated output.)

```{r optimization-034}
learner$param_set$values$cost = NULL
learner$param_set$values$shrinking = NULL
learner$param_set$values$kernel = to_tune(c("polynomial", "radial"))

print(learner$param_set$search_space())

rbindlist(generate_design_grid(learner$param_set$search_space(), 3)$transpose(), fill = TRUE)
```

It is even possible to define whole `r ref("ParamSet")`s that get tuned over for a single parameter.
This may be especially useful for vector hyperparameters that should be searched along multiple dimensions.
This `r ref("ParamSet")` must, however, have an `.extra_trafo` that returns a list with a single element, because it corresponds to a single hyperparameter that is being tuned.
Suppose the `class.weights` hyperparameter should be tuned along two dimensions:

```{r optimization-035}
learner$param_set$values$class.weights = to_tune(
  ps(spam = p_dbl(0.1, 0.9), nonspam = p_dbl(0.1, 0.9),
    .extra_trafo = function(x, param_set) list(c(spam = x$spam, nonspam = x$nonspam))
))
head(generate_design_grid(learner$param_set$search_space(), 3)$transpose(), 3)
```

## Nested Resampling {#nested-resampling}

Evaluating a machine learning model often requires an additional layer of resampling when hyperparameters or features have to be selected.
Nested resampling separates these model selection steps from the process estimating the performance of the model.
If the same data is used for the model selection steps and the evaluation of the model itself, the resulting performance estimate of the model might be severely biased.
One reason for this bias is that the repeated evaluation of the model on the test data could leak information about its structure into the model, this results in over-optimistic performance estimates.
Keep in mind that nested resampling is a statistical procedure to estimate the predictive performance of the model trained on the full dataset.
Nested resampling is not a procedure to select optimal hyperparameters.
The resampling produces many hyperparameter configurations which should be not used to construct a final model [@Simon2007].

```{r optimization-036, echo = FALSE, out.width="98%"}
knitr::include_graphics("images/nested_resampling.png")
```

The graphic above illustrates nested resampling for hyperparameter tuning with 3-fold cross-validation in the outer resampling and 4-fold cross-validation in the inner resampling.

The nested resampling process:

1. Uses a 3-fold cross-validation to get different testing and training data sets (outer resampling).
1. Within the training data uses a 4-fold cross-validation to get different inner testing and training data sets (inner resampling).
1. Tunes the hyperparameters using the inner data splits.
1. Fits the learner on the outer training data set using the tuned hyperparameter configuration obtained with the inner resampling.
1. Evaluates the performance of the learner on the outer testing data.
1. 2-5 is repeated for each of the three folds (outer resampling).
1. The three performance values are aggregated for an unbiased performance estimate.

See also [this article](https://machinelearningmastery.com/k-fold-cross-validation/) for more explanations.

### Execution {#nested-resamp-exec}

The previous [section](#tuning) examined the optimization of a simple classification tree on the `r ref("mlr_tasks_pima")`.
We continue the example and estimate the predictive performance of the model with nested resampling.

We use a 4-fold cross-validation in the inner resampling loop.
The `r ref("AutoTuner")` executes the hyperparameter tuning and is stopped after 5 evaluations.
The hyperparameter configurations are proposed by grid search.

```{r optimization-037}
library("mlr3verse")

learner = lrn("classif.rpart")
resampling = rsmp("cv", folds = 4)
measure = msr("classif.ce")
search_space = ps(cp = p_dbl(lower = 0.001, upper = 0.1))
terminator = trm("evals", n_evals = 5)
tuner = tnr("grid_search", resolution = 10)

at = AutoTuner$new(learner, resampling, measure, terminator, tuner, search_space)
```

A 3-fold cross-validation is used in the outer resampling loop.
On each of the three outer train sets hyperparameter tuning is done and we receive three optimized hyperparameter configurations.
To execute the nested resampling, we pass the `r ref("AutoTuner")` to the `r ref("resample()")` function.
We have to set `store_models = TRUE` because we need the `r ref("AutoTuner")` models to investigate the inner tuning.

```{r optimization-038}
task = tsk("pima")
outer_resampling = rsmp("cv", folds = 3)

rr = resample(task, at, outer_resampling, store_models = TRUE)
```

You can freely combine different inner and outer resampling strategies.
Nested resampling is not restricted to hyperparameter tuning.
You can swap the `r ref("AutoTuner")` for a `r ref("AutoFSelector")` and estimate the performance of a model which is fitted on an optimized feature subset.

### Evaluation {#nested-resamp-eval}

With the created `r ref("ResampleResult")` we can now inspect the executed resampling iterations more closely.
See the section on [Resampling](#resampling) for more detailed information about `r ref("ResampleResult")` objects.

We check the inner tuning results for stable hyperparameters.
This means that the selected hyperparameters should not vary too much.
We might observe unstable models in this example because the small data set and the low number of resampling iterations might introduces too much randomness.
Usually, we aim for the selection of stable hyperparameters for all outer training sets.

```{r optimization-039}
extract_inner_tuning_results(rr)
```

Next, we want to compare the predictive performances estimated on the outer resampling to the inner resampling.
Significantly lower predictive performances on the outer resampling indicate that the models with the optimized hyperparameters overfit the data.

```{r optimization-040}
rr$score()
```

The aggregated performance of all outer resampling iterations is essentially the unbiased performance of the model with optimal hyperparameter found by grid search.

```{r optimization-041}
rr$aggregate()
```

Note that nested resampling is computationally expensive.
For this reason we use relatively small number of hyperparameter configurations and a low number of resampling iterations in this example.
In practice, you normally have to increase both.
As this is computationally intensive you might want to have a look at the section on [Parallelization](#parallelization).

### Final Model {#nested-final-model}

We can use the `r ref("AutoTuner")` to tune the hyperparameters of our learner and fit the final model on the full data set.

```{r optimization-042}
at$train(task)
```

The trained model can now be used to make predictions on new data.

:::{.callout-warning}
A common mistake is to report the performance estimated on the resampling sets on which the tuning was performed (`at$tuning_result$classif.ce`) as the model's performance.
:::

Instead, the performance estimated with nested resampling should be reported as the actual performance of the model.

## Tuning with Hyperband {#hyperband}

Besides the more traditional tuning methods, the ecosystem around `r mlr_pkg("mlr3")` offers another procedure for hyperparameter optimization called Hyperband implemented in the `r mlr_pkg("mlr3hyperband")` package.

Hyperband is a budget-oriented procedure, weeding out suboptimal performing configurations early on during a partially sequential training process, increasing tuning efficiency as a consequence.
For this, a combination of incremental resource allocation and early stopping is used: As optimization progresses, computational resources are increased for more promising configurations, while less promising ones are terminated early.

To give an introductory analogy, imagine two horse trainers are given eight untrained horses.
Both trainers want to win the upcoming race, but they are only given 32 units of food.
Given that each horse can be fed up to 8 units food ("maximum budget" per horse), there is not enough food for all the horses.
It is critical to identify the most promising horses early, and give them enough food to improve.
So, the trainers need to develop a strategy to split up the food in the best possible way.
The first trainer is very optimistic and wants to explore the full capabilities of a horse, because he does not want to pass a judgment on a horse's performance unless it has been fully trained.
So, he divides his budget by the maximum amount he can give to a horse (lets say eight, so $32 / 8 = 4$) and randomly picks four horses - his budget simply is not enough to fully train more.
Those four horses are then trained to their full capabilities, while the rest is set free.
This way, the trainer is confident about choosing the best out of the four trained horses, but he might have overlooked the horse with the highest potential since he only focused on half of them.
The other trainer is more creative and develops a different strategy.
He thinks, if a horse is not performing well at the beginning, it will also not improve after further training.
Based on this assumption, he decides to give one unit of food to each horse and observes how they develop.
After the initial food is consumed, he checks their performance and kicks the slowest half out of his training regime.
Then, he increases the available food for the remaining, further trains them until the food is consumed again, only to kick out the worst half once more.
He repeats this until the one remaining horse gets the rest of the food.
This means only one horse is fully trained, but on the flip side, he was able to start training with all eight horses.

On race day, all the horses are put on the starting line.
But which trainer will have the winning horse?
The one, who tried to train a maximum amount of horses to their fullest?
Or the other one, who made assumptions about the training progress of his horses?
How the training phases may possibly look like is visualized in @fig-04-optimization-hyperband-01.

```{r optimization-043, eval = TRUE, echo = FALSE, fig.show='hold', out.width = '99%', fig.align = 'center', fig.cap = "Visulization of how the training processes may look like. The left plot corresponds to the non-selective trainer, while the right one to the selective trainer.", warning=FALSE}
#| label = "fig-04-optimization-hyperband-01"
knitr::include_graphics("images/horse_training1.png")
```

Hyperband works very similar in some ways, but also different in others.
It is not embodied by one of the trainers in our analogy, but more by the person, who would pay them.
Hyperband consists of several brackets, each bracket corresponding to a trainer, and we do not care about horses but about hyperparameter configurations of a machine learning algorithm.
The budget is not in terms of food, but in terms of a hyperparameter of the learner that scales in some way with the computational effort.
An example is the number of epochs we train a neural network, or the number of iterations in boosting.
Furthermore, there are not only two brackets (or trainers), but several, each placed at a unique spot between fully explorative of later training stages and extremely selective, equal to higher exploration of early training stages.
The level of selection aggressiveness is handled by a user-defined parameter called $\eta$.
So, $1/\eta$ is the fraction of remaining configurations after a bracket removes his worst performing ones, but $\eta$ is also the factor by that the budget is increased for the next stage.
Because there is a different maximum budget per configuration that makes sense in different scenarios, the user also has to set this as the $R$ parameter.
No further parameters are required for Hyperband -- the full required budget across all brackets is indirectly given by
$$
(\lfloor \log_{\eta}{R} \rfloor + 1)^2 * R
$$

[@Li2016].
To give an idea how a full bracket layout might look like for a specific $R$ and $\eta$, a quick overview is given in the following table.

```{r optimization-044, eval = TRUE, echo = FALSE}
eta = 2
R = 8
result = data.frame()
# add small number due to possible machine error
smax = floor(log(R, eta) + 10 * .Machine$double.eps)
B = (smax + 1) * R

# outer loop - iterate over brackets
for (s in smax:0) {

  n = ceiling((B / R) * ((eta^s) / (s + 1)))
  r = R * eta^(-s)

  # inner loop - iterate over bracket stages
  for (i in 0:s) {

    ni = floor(n * eta^(-i))
    ri = r * eta^i
    result = rbind(result, c(smax - s + 1, i + 1, ri, ni))
  }
}

names(result) = c("bracket", "stage", "budget", "n")

knitr::kable(
  list(
    result[1:4, 2:4],
    data.frame(stage = 1:3, budget = 2^(1:3), n = c(6, 3, 1)),
    data.frame(stage = 1:2, budget = c(4, 8), n = c(4, 2)),
    data.frame(stage = 1, budget = 8, n = 4)
  ),
  booktabs = TRUE,
  caption = "Hyperband layout for $\\eta = 2$ and $R = 8$, consisting of four brackets with $n$ as the amount of active configurations."
)
```

Of course, early termination based on a performance criterion may be disadvantageous if it is done too aggressively in certain scenarios.
A learner to jumping radically in its estimated performance during the training phase may get the best configurations canceled too early, simply because they do not improve quickly enough compared to others.
In other words, it is often unclear beforehand if having an high amount of configurations $n$, that gets aggressively discarded early, is better than having a high budget $B$ per configuration.
The arising tradeoff, that has to be made, is called the "$n$ versus $B/n$ problem".
To create a balance between selection based on early training performance versus exploration of training performances in later training stages, $\lfloor \log_{\eta}{R} \rfloor + 1$ brackets are constructed with an associated set of varying sized configurations.
Thus, some brackets contain more configurations, with a small initial budget.
In these, a lot are discarded after having been trained for only a short amount of time, corresponding to the selective trainer in our horse analogy.
Others are constructed with fewer configurations, where discarding only takes place after a significant amount of budget was consumed.
The last bracket usually never discards anything, but also starts with only very few configurations -- this is equivalent to the trainer explorative of later stages.
The former corresponds high $n$, while the latter high $B/n$.
Even though different brackets are initialized with a different amount of configurations and different initial budget sizes, each bracket is assigned (approximately) the same budget $(\lfloor \log_{\eta}{R} \rfloor + 1) * R$.

The configurations at the start of each bracket are initialized by random, often uniform sampling.
Note that currently all configurations are trained completely from the beginning, so no online updates of models from stage to stage is happening.

To identify the budget for evaluating Hyperband, the user has to specify explicitly which hyperparameter of the learner influences the budget by extending a single hyperparameter in the `r ref("ParamSet")` with an argument (`tags = "budget"`), like in the following snippet:

```{r optimization-045}
library("mlr3verse")

# Hyperparameter subset of XGBoost
search_space = ps(
  nrounds = p_int(lower = 1, upper = 16, tags = "budget"),
  booster = p_fct(levels = c("gbtree", "gblinear", "dart"))
)
```

Thanks to the broad ecosystem of the `r mlr_pkg("mlr3verse")` a learner does not require a natural budget parameter.
A typical case of this would be decision trees.
By using subsampling as preprocessing with `r mlr_pkg("mlr3pipelines")`, we can work around a lacking budget parameter.

```{r optimization-046}
set.seed(123)

# extend "classif.rpart" with "subsampling" as preprocessing step
ll = po("subsample") %>>% lrn("classif.rpart")

# extend hyperparameters of "classif.rpart" with subsampling fraction as budget
search_space = ps(
  classif.rpart.cp = p_dbl(lower = 0.001, upper = 0.1),
  classif.rpart.minsplit = p_int(lower = 1, upper = 10),
  subsample.frac = p_dbl(lower = 0.1, upper = 1, tags = "budget")
)
```

We can now plug the new learner with the extended hyperparameter set into a `r ref("TuningInstanceSingleCrit")` the same way as usual.
Naturally, Hyperband terminates once all of its brackets are evaluated, so a `r ref("Terminator")` in the tuning instance acts as an upper bound and should be only set to a low value if one is unsure of how long Hyperband will take to finish under the given settings.

```{r optimization-047}
instance = TuningInstanceSingleCrit$new(
  task = tsk("iris"),
  learner = ll,
  resampling = rsmp("holdout"),
  measure = msr("classif.ce"),
  terminator = trm("none"), # hyperband terminates itself
  search_space = search_space
)
```

Now, we initialize a new instance of the `r ref("mlr3hyperband::mlr_tuners_hyperband")` class and start tuning with it.

```{r optimization-048}
library("mlr3hyperband")
tuner = tnr("hyperband", eta = 3)

# reduce logging output
lgr::get_logger("bbotk")$set_threshold("warn")

tuner$optimize(instance)
```

To receive the results of each sampled configuration, we simply run the following snippet.

```{r optimization-049}
as.data.table(instance$archive)[, c(
  "subsample.frac",
  "classif.rpart.cp",
  "classif.rpart.minsplit",
  "classif.ce"
), with = FALSE]
```

You can access the best found configuration through the instance object.

```{r optimization-050}
instance$result
instance$result_learner_param_vals
instance$result_y
```

In the traditional way, Hyperband uses uniform sampling to receive a configuration sample at the start of each bracket.
But it is also possible to define a custom `r ref("Sampler")` for each hyperparameter.

```{r optimization-051}
search_space = ps(
  nrounds = p_int(lower = 1, upper = 16, tags = "budget"),
  eta = p_dbl(lower = 0, upper = 1),
  booster = p_fct(levels = c("gbtree", "gblinear", "dart"))
)

instance = TuningInstanceSingleCrit$new(
  task = tsk("iris"),
  learner = lrn("classif.xgboost"),
  resampling = rsmp("holdout"),
  measure = msr("classif.ce"),
  terminator = trm("none"), # hyperband terminates itself
  search_space = search_space
)

# beta distribution with alpha = 2 and beta = 5
# categorical distribution with custom probabilities
sampler = SamplerJointIndep$new(list(
  Sampler1DRfun$new(search_space$params$eta, function(n) rbeta(n, 2, 5)),
  Sampler1DCateg$new(search_space$params$booster, prob = c(0.2, 0.3, 0.5))
))
```

Then, the defined sampler has to be given as an argument during instance creation.
Afterwards, the usual tuning can proceed.

```{r optimization-052}
tuner = tnr("hyperband", eta = 2, sampler = sampler)
set.seed(123)
tuner$optimize(instance)

instance$result
```

Furthermore, we extended the original algorithm, to make it also possible to use `r mlr_pkg("mlr3hyperband")` for multi-objective optimization.
To do this, simply specify more measures in the `r ref("TuningInstanceMultiCrit")` and run the rest as usual.

```{r optimization-053}
instance = TuningInstanceMultiCrit$new(
  task = tsk("pima"),
  learner = lrn("classif.xgboost"),
  resampling = rsmp("holdout"),
  measures = msrs(c("classif.tpr", "classif.fpr")),
  terminator = trm("none"), # hyperband terminates itself
  search_space = search_space
)

tuner = tnr("hyperband", eta = 4)
tuner$optimize(instance)
```

Now the result is not a single best configuration but an estimated Pareto front.
All red points are not dominated by another parameter configuration regarding their *fpr* and *tpr* performance measures.

```{r optimization-054}
instance$result
plot(classif.tpr ~ classif.fpr, instance$archive$data)
points(classif.tpr ~ classif.fpr, instance$result, col = "red")
```

## Feature Selection {#fs}

Often, data sets include a large number of features.
The technique of extracting a subset of relevant features is called "feature selection".

The objective of feature selection is to fit the sparse dependent of a model on a subset of available data features in the most suitable manner.
Feature selection can enhance the interpretability of the model, speed up the learning process and improve the learner performance.
Different approaches exist to identify the relevant features.
Two different approaches are emphasized in the literature:
one is called [Filtering](#fs-filter) and the other approach is often referred to as feature subset selection or [wrapper methods](#fs-wrapper).

What are the differences [@guyon2003;@chandrashekar2014]?

* **Filtering**:
  An external algorithm computes a rank of the features (e.g. based on the correlation to the response).
  Then, features are subsetted by a certain criteria, e.g. an absolute number or a percentage of the number of variables.
  The selected features will then be used to fit a model (with optional hyperparameters selected by tuning).
  This calculation is usually cheaper than "feature subset selection" in terms of computation time.
  All filters are connected via package `r mlr_pkg("mlr3filters")`.
* **Wrapper Methods**:
  Here, no ranking of features is done.
  Instead, an optimization algorithm selects a subset of the features, evaluates the set by calculating the resampled predictive performance, and then
  proposes a new set of features (or terminates).
  A simple example is the sequential forward selection.
  This method is usually computationally very intensive as a lot of models are fitted.
  Also, strictly speaking, all these models would need to be tuned before the performance is estimated.
  This would require an additional nested level in a CV setting.
  After undertaken all of these steps, the final set of selected features is again fitted (with optional hyperparameters selected by tuning).
  Wrapper methods are implemented in the `r mlr_pkg("mlr3fselect")` package.
* **Embedded Methods**:
  Many learners internally select a subset of the features which they find helpful for prediction.
  These subsets can usually be queried, as the following example demonstrates:
  ```{r optimization-055}
  library("mlr3verse")

  task = tsk("iris")
  learner = lrn("classif.rpart")

  # ensure that the learner selects features
  stopifnot("selected_features" %in% learner$properties)

  # fit a simple classification tree
  learner = learner$train(task)

  # extract all features used in the classification tree:
  learner$selected_features()
  ```

There are also ensemble filters built upon the idea of stacking single filter methods. These are not yet implemented.

### Filters {#fs-filter}

Filter methods assign an importance value to each feature.
Based on these values the features can be ranked.
Thereafter, we are able to select a feature subset.
There is a list of all implemented filter methods in the [Appendix](#appendix).

#### Calculating filter values {#fs-calc}

Currently, only classification and regression tasks are supported.

The first step it to create a new R object using the class of the desired filter method.
Similar to other instances in `r mlr_pkg("mlr3")`, these are registered in a dictionary (`r ref("mlr_filters")`) with an associated shortcut function `r ref("flt()")`.
Each object of class `Filter` has a `.$calculate()` method which computes the filter values and ranks them in a descending order.

```{r optimization-056}
filter = flt("jmim")

task = tsk("iris")
filter$calculate(task)

as.data.table(filter)
```

Some filters support changing specific hyperparameters.
This is similar to setting hyperparameters of a `r ref("Learner")` using `.$param_set$values`:

```{r optimization-057}
filter_cor = flt("correlation")
filter_cor$param_set

# change parameter 'method'
filter_cor$param_set$values = list(method = "spearman")
filter_cor$param_set
```

#### Variable Importance Filters {#fs-var-imp-filters}

All `r ref("Learner")` with the property "importance" come with integrated feature selection methods.

You can find a list of all learners with this property in the [Appendix](#fs-filter-embedded-list).

For some learners the desired filter method needs to be set during learner creation.
For example, learner `r ref("mlr_learners_classif.ranger", text = "classif.ranger")` comes with multiple integrated methods, c.f. the help page of `r ref("ranger::ranger()")`.
To use method "impurity", you need to set the filter method during construction.

```{r optimization-058}
lrn = lrn("classif.ranger", importance = "impurity")
```

Now you can use the `r ref("mlr_filters_importance", text = "FilterImportance")` filter class for algorithm-embedded methods:

```{r optimization-059}
task = tsk("iris")
filter = flt("importance", learner = lrn)
filter$calculate(task)
head(as.data.table(filter), 3)
```

### Wrapper Methods {#fs-wrapper}

Wrapper feature selection is supported via the `r mlr_pkg("mlr3fselect")` extension package.
At the heart of `r mlr_pkg("mlr3fselect")` are the R6 classes:

* `r ref("FSelectInstanceSingleCrit")`, `"r ref(FSelectInstanceMultiCrit")`: These two classes describe the feature selection problem and store the results.
* `r ref("FSelector")`: This class is the base class for implementations of feature selection algorithms.

#### The `FSelectInstance` Classes {#fs-wrapper-optimization}

The following sub-section examines the feature selection on the `r ref("mlr_tasks_pima", text = "Pima")` data set which is used to predict whether or not a patient has diabetes.

```{r optimization-060}
task = tsk("pima")
print(task)
```

We use the classification tree from `r cran_pkg("rpart")`.

```{r optimization-061}
learner = lrn("classif.rpart")
```

Next, we need to specify how to evaluate the performance of the feature subsets.
For this, we need to choose a `r ref("Resampling", text = "resampling strategy")` and a `r ref("Measure", text = "performance measure")`.

```{r optimization-062}
hout = rsmp("holdout")
measure = msr("classif.ce")
```

Finally, one has to choose the available budget for the feature selection.
This is done by selecting one of the available `r ref("Terminator", text = "Terminators")`:

* Terminate after a given time (`r ref("TerminatorClockTime")`)
* Terminate after a given amount of iterations (`r ref("TerminatorEvals")`)
* Terminate after a specific performance is reached (`r ref("TerminatorPerfReached")`)
* Terminate when feature selection does not improve (`r ref("TerminatorStagnation")`)
* A combination of the above in an *ALL* or *ANY* fashion (`r ref("TerminatorCombo")`)

For this short introduction, we specify a budget of 20 evaluations and then put everything together into a `r ref("FSelectInstanceSingleCrit")`:

```{r optimization-063}
evals20 = trm("evals", n_evals = 20)

instance = FSelectInstanceSingleCrit$new(
  task = task,
  learner = learner,
  resampling = hout,
  measure = measure,
  terminator = evals20
)
instance
```

To start the feature selection, we still need to select an algorithm which are defined via the `r ref("FSelector")` class

#### The `FSelector` Class

The following algorithms are currently implemented in `r mlr_pkg("mlr3fselect")`:

* Random Search (`r ref("FSelectorRandomSearch")`)
* Exhaustive Search (`r ref("FSelectorExhaustiveSearch")`)
* Sequential Search (`r ref("FSelectorSequential")`)
* Recursive Feature Elimination (`r ref("FSelectorRFE")`)
* Design Points (`r ref("FSelectorDesignPoints")`)

In this example, we will use a simple random search and retrieve it from the dictionary `r ref("mlr_fselectors")` with the `r ref("fs()")` function:

```{r optimization-064}
fselector = fs("random_search")
```

#### Triggering the Tuning {#wrapper-selection-triggering}

To start the feature selection, we simply pass the `r ref("FSelectInstanceSingleCrit")` to the `$optimize()` method of the initialized `r ref("FSelector")`.
The algorithm proceeds as follows

1. The `r ref("FSelector")` proposes at least one feature subset and may propose multiple subsets to improve parallelization, which can be controlled via the setting `batch_size`).
1. For each feature subset, the given `r ref("Learner")` is fitted on the `r ref("Task")` using the provided `r ref("Resampling")`.
1  All evaluations are stored in the archive of the `r ref("FSelectInstanceSingleCrit")`.
1. The `r ref("Terminator")` is queried if the budget is exhausted.
1  If the budget is not exhausted, restart with 1) until it is.
1. Determine the feature subset with the best observed performance.
1. Store the best feature subset as the result in the instance object.
The best feature subset (`$result_feature_set`) and the corresponding measured performance (`$result_y`) can be accessed from the instance.

```{r optimization-065}
# reduce logging output
lgr::get_logger("bbotk")$set_threshold("warn")

fselector$optimize(instance)
instance$result_feature_set
instance$result_y
```

One can investigate all resamplings which were undertaken, as they are stored in the archive of the `r ref("FSelectInstanceSingleCrit")` and can be accessed by using `r ref("as.data.table()")`:

```{r optimization-066}
as.data.table(instance$archive)
```

The associated resampling iterations can be accessed in the `r ref("BenchmarkResult")`:

```{r optimization-067}
instance$archive$benchmark_result$data
```

The `uhash` column links the resampling iterations to the evaluated feature subsets stored in `instance$archive$data()`.
This allows e.g. to score the included `r ref("ResampleResult")`s on a different measure.

Now the optimized feature subset can be used to subset the task and fit the model on all observations.

```{r optimization-068}
task$select(instance$result_feature_set)
learner$train(task)
```

The trained model can now be used to make a prediction on external data.
Note that predicting on observations present in the `r ref("Task")`, should be avoided.
The model has seen these observations already during feature selection and therefore results would be statistically biased.
Hence, the resulting performance measure would be over-optimistic.
Instead, to get statistically unbiased performance estimates for the current task, [nested resampling](#nested-resampling) is required.

#### Filtering with Multiple Performance Measures {#mult-measures-filtering}

When filtering, you might want to use multiple criteria to evaluate the performance of the feature subsets. For example, you might want the subset with the lowest classification error and lowest time to train the model. The full list of performance measures can be found [here](https://mlr3.mlr-org.com/reference/mlr_measures.html).

We will expand the previous example and perform feature selection on the same dataset, `r ref("mlr_tasks_pima", text = "Pima Indian Diabetes")`, however, this time we will use `r ref("FSelectInstanceMultiCrit")` to select the subset of features that has the lowest classification error and the lowest time to train the model.

The filtering process with multiple criteria is very similar to filtering with a single criterion.

```{r optimization-069}
measures = msrs(c("classif.ce", "time_train"))
```

Instead of creating a new `r ref("FSelectInstanceSingleCrit")` with a single measure, we create a new `r ref("FSelectInstanceMultiCrit")` with the two measures we are interested in here.
Otherwise, it is the same as above.

```{r optimization-070}
library("mlr3filters")

evals20 = trm("evals", n_evals = 20)
instance = FSelectInstanceMultiCrit$new(
task = task,
learner = learner,
resampling = hout,
measures = measures,
terminator = evals20
)
instance
```

After triggering the filtering, we will have the subset of features with the best classification error and time to train the model.

```{r optimization-071}
# reduce logging output
lgr::get_logger("bbotk")$set_threshold("warn")

fselector$optimize(instance)
```

```{r optimization-072}
instance$result_feature_set
```

```{r optimization-073}
instance$result_y
```

#### Automating the Feature Selection {#autofselect}

The `r ref("AutoFSelector")` wraps a learner and augments it with an automatic feature selection for a given task.
Because the `r ref("AutoFSelector")` itself inherits from the `r ref("Learner")` base class, it can be used like any other learner.
Analogously to the previous subsection, a new classification tree learner is created.
This classification tree learner automatically starts a feature selection on the given task using an inner resampling (holdout).
We create a terminator which allows 10 evaluations, and uses a simple random search as feature selection algorithm:

```{r optimization-074}
learner = lrn("classif.rpart")
terminator = trm("evals", n_evals = 10)
fselector = fs("random_search")

at = AutoFSelector$new(
  learner = learner,
  resampling = rsmp("holdout"),
  measure = msr("classif.ce"),
  terminator = terminator,
  fselector = fselector
)
at
```

We can now use the learner like any other learner, calling the `$train()` and `$predict()` method.
This time however, we pass it to `r ref("benchmark()")` to compare the optimized feature subset to the complete feature set.
This way, the `r ref("AutoFSelector")` will do its resampling for feature selection on the training set of the respective split of the outer resampling.
The learner then undertakes predictions using the test set of the outer resampling.
This yields unbiased performance measures, as the observations in the test set have not been used during feature selection or fitting of the respective learner.
This is called [nested resampling](#nested-resampling).

To compare the optimized feature subset with the complete feature set, we can use `r ref("benchmark()")`:

```{r optimization-075}
grid = benchmark_grid(
  task = tsk("pima"),
  learner = list(at, lrn("classif.rpart")),
  resampling = rsmp("cv", folds = 3)
)

bmr = benchmark(grid, store_models = TRUE)
bmr$aggregate(msrs(c("classif.ce", "time_train")))
```

Note that we do not expect any significant differences since we only evaluated a small fraction of the possible feature subsets.
